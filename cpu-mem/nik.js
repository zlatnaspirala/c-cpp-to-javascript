// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  read_ = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  read_ = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
// Assertions on removed outgoing Module JS APIs.
Object.defineProperty(Module, 'read', { get: function() { abort('Module.read has been replaced with plain read') } });
Object.defineProperty(Module, 'readAsync', { get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
Object.defineProperty(Module, 'readBinary', { get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO enable when SDL2 is fixed Object.defineProperty(Module, 'setWindowTitle', { get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });


// TODO remove when SDL2 is fixed; also add the above assertion



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};




// Wraps a JS function as a wasm function with a given signature.
// In the future, we may get a WebAssembly.Function constructor. Until then,
// we create a wasm module that takes the JS function as an import with a given
// signature, and re-exports that as a wasm function.
function convertJsFunctionToWasm(func, sig) {
  return func;

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    e: {
      f: func
    }
  });
  var wrappedFunc = instance.exports.f;
  return wrappedFunc;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret = table.length;

  // Grow the table
  try {
    table.grow(1);
  } catch (err) {
    if (!err instanceof RangeError) {
      throw err;
    }
    throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';
  }

  // Insert new element
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!err instanceof TypeError) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  // TODO(sbc): Look into implementing this to allow re-using of table slots
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

var WebAssembly = {
  Memory: function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var oldBuffer = this.buffer;
        var ret = __growWasmMemory(amount);
        assert(this.buffer !== oldBuffer); // the call should have updated us
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 356 + 0) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // XXX hack to get an atob implementation

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


    var atob = decodeBase64;
    // This will be replaced by the actual wasm2js code.
    var exports = (
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$1 = env.emscripten_get_now;
 var fimport$2 = env.__cxa_allocate_exception;
 var fimport$3 = env.__cxa_throw;
 var fimport$4 = env.__cxa_uncaught_exceptions;
 var fimport$5 = env.__syscall6;
 var fimport$6 = env.__syscall145;
 var fimport$7 = env.__syscall140;
 var fimport$8 = env.__syscall146;
 var fimport$9 = env.__syscall54;
 var fimport$10 = env.__lock;
 var fimport$11 = env.__unlock;
 var fimport$12 = env.fabs;
 var fimport$13 = env.getenv;
 var fimport$14 = env.__map_file;
 var fimport$15 = env.__syscall91;
 var fimport$16 = env.strftime_l;
 var fimport$17 = env.abort;
 var fimport$18 = env.__cxa_pure_virtual;
 var fimport$19 = env.pthread_cond_broadcast;
 var fimport$20 = env.pthread_cond_wait;
 var fimport$21 = env.sbrk;
 var fimport$22 = env.emscripten_memcpy_big;
 var fimport$23 = env.setTempRet0;
 var global$0 = 139481872;
 var global$1 = 134238988;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS;
 function $0() {
  $474();
  $236();
  $475();
 }
 
 function $1() {
  return +(1.0e3);
 }
 
 function $2($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $22_1 = 0, $38_1 = 0, $54_1 = 0, $70_1 = 0, $86_1 = 0, $102_1 = 0, $118_1 = 0, $134_1 = 0, $164_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) - 8 | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $1679(1024 | 0, 67109904 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $22_1 = 24;
    HEAP8[(0 + 134218784 | 0) >> 0] = ((HEAPU8[(0 + 134218784 | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 1 | 0) + 1024 | 0) >> 0] | 0) << $22_1 | 0) >> $22_1 | 0) | 0;
    $1679(1024 | 0, 67109904 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $38_1 = 24;
    HEAP8[(0 + 134218784 | 0) >> 0] = ((HEAPU8[(0 + 134218784 | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 1 | 0) + 1024 | 0) >> 0] | 0) << $38_1 | 0) >> $38_1 | 0) | 0;
    $1679(1024 | 0, 67109904 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $54_1 = 24;
    HEAP8[(0 + 134218784 | 0) >> 0] = ((HEAPU8[(0 + 134218784 | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 1 | 0) + 1024 | 0) >> 0] | 0) << $54_1 | 0) >> $54_1 | 0) | 0;
    $1679(1024 | 0, 67109904 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $70_1 = 24;
    HEAP8[(0 + 134218784 | 0) >> 0] = ((HEAPU8[(0 + 134218784 | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 1 | 0) + 1024 | 0) >> 0] | 0) << $70_1 | 0) >> $70_1 | 0) | 0;
    $1679(1024 | 0, 67109904 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $86_1 = 24;
    HEAP8[(0 + 134218784 | 0) >> 0] = ((HEAPU8[(0 + 134218784 | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 1 | 0) + 1024 | 0) >> 0] | 0) << $86_1 | 0) >> $86_1 | 0) | 0;
    $1679(1024 | 0, 67109904 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $102_1 = 24;
    HEAP8[(0 + 134218784 | 0) >> 0] = ((HEAPU8[(0 + 134218784 | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 1 | 0) + 1024 | 0) >> 0] | 0) << $102_1 | 0) >> $102_1 | 0) | 0;
    $1679(1024 | 0, 67109904 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $118_1 = 24;
    HEAP8[(0 + 134218784 | 0) >> 0] = ((HEAPU8[(0 + 134218784 | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 1 | 0) + 1024 | 0) >> 0] | 0) << $118_1 | 0) >> $118_1 | 0) | 0;
    $1679(1024 | 0, 67109904 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $134_1 = 24;
    HEAP8[(0 + 134218784 | 0) >> 0] = ((HEAPU8[(0 + 134218784 | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 1 | 0) + 1024 | 0) >> 0] | 0) << $134_1 | 0) >> $134_1 | 0) | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0;
    continue label$2;
   };
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) & 15 | 0;
  HEAP32[$4_1 >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) < (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    $1679(1024 | 0, 67109904 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $164_1 = 24;
    HEAP8[(0 + 134218784 | 0) >> 0] = ((HEAPU8[(0 + 134218784 | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 1 | 0) + 1024 | 0) >> 0] | 0) << $164_1 | 0) >> $164_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $3() {
  $5(134218788 | 0) | 0;
  return;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7(134218788 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $6($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $6($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $64($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $4_1;
  $65($5_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $7($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $8($4_1 | 0);
  $9($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $8($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $72($4_1 | 0, $70($4_1 | 0) | 0 | 0, ($70($4_1 | 0) | 0) + (($71($4_1 | 0) | 0) << 2 | 0) | 0 | 0, ($70($4_1 | 0) | 0) + (($40($4_1 | 0) | 0) << 2 | 0) | 0 | 0, ($70($4_1 | 0) | 0) + (($71($4_1 | 0) | 0) << 2 | 0) | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $9($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $73($5_1 | 0);
   $75($24($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $74($5_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $10() {
  $12(134218800 | 0) | 0;
  return;
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $14(134218800 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $13($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $13($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $64($5_1 | 0) | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $4_1;
  $90($5_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $14($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $15($4_1 | 0);
  $16($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $15($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $97($4_1 | 0, $95($4_1 | 0) | 0 | 0, ($95($4_1 | 0) | 0) + (($96($4_1 | 0) | 0) << 3 | 0) | 0 | 0, ($95($4_1 | 0) | 0) + (($42($4_1 | 0) | 0) << 3 | 0) | 0 | 0, ($95($4_1 | 0) | 0) + (($96($4_1 | 0) | 0) << 3 | 0) | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $16($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  label$1 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $98($5_1 | 0);
   $100($31($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $99($5_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $17() {
  $5(134218812 | 0) | 0;
  return;
 }
 
 function $18($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7(134218812 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $19($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $75_1 = 0.0, $225_1 = 0;
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 88 | 0) >> 2] = 67108864;
  HEAP32[($3_1 + 84 | 0) >> 2] = (((HEAP32[($3_1 + 92 | 0) >> 2] | 0) + 67108864 | 0) - 1 | 0 | 0) / (HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($3_1 + 84 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3_1 + 84 | 0) >> 2] = 8;
  }
  HEAPF64[($3_1 + 72 | 0) >> 3] = 1.0e9;
  HEAP32[($3_1 + 68 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF64[($3_1 + 56 | 0) >> 3] = +fimport$1();
    $2(HEAP32[($3_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0);
    HEAPF64[($3_1 + 48 | 0) >> 3] = +fimport$1();
    label$4 : {
     if (!(+HEAPF64[($3_1 + 48 | 0) >> 3] - +HEAPF64[($3_1 + 56 | 0) >> 3] < +HEAPF64[($3_1 + 72 | 0) >> 3] & 1 | 0)) {
      break label$4
     }
     HEAPF64[($3_1 + 72 | 0) >> 3] = +HEAPF64[($3_1 + 48 | 0) >> 3] - +HEAPF64[($3_1 + 56 | 0) >> 3];
    }
    $75_1 = (+HEAPF64[($3_1 + 48 | 0) >> 3] - +HEAPF64[($3_1 + 56 | 0) >> 3]) / +$1();
    HEAPF64[(0 + 134218824 | 0) >> 3] = +HEAPF64[(0 + 134218824 | 0) >> 3] + $75_1;
    HEAP32[($3_1 + 68 | 0) >> 2] = (HEAP32[($3_1 + 68 | 0) >> 2] | 0) + 1 | 0;
    continue label$3;
   };
  }
  i64toi32_i32$1 = Math_imul(HEAP32[($3_1 + 84 | 0) >> 2] | 0, HEAP32[($3_1 + 92 | 0) >> 2] | 0);
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $225_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 40 | 0) >> 2] = $225_1;
  HEAP32[($3_1 + 44 | 0) >> 2] = i64toi32_i32$0;
  $20(134218788 | 0, $3_1 + 92 | 0 | 0);
  HEAPF64[($3_1 + 32 | 0) >> 3] = +HEAPF64[($3_1 + 72 | 0) >> 3];
  label$5 : {
   label$6 : {
    if (!(+HEAPF64[($3_1 + 32 | 0) >> 3] > +(0 | 0) & 1 | 0)) {
     break label$6
    }
    HEAPF64[($3_1 + 24 | 0) >> 3] = +HEAPF64[($3_1 + 32 | 0) >> 3] / +$1();
    i64toi32_i32$0 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
    HEAPF64[($3_1 + 16 | 0) >> 3] = (+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) / +HEAPF64[($3_1 + 24 | 0) >> 3];
    HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3] / 1048576.0;
    $21(134218800 | 0, $3_1 + 8 | 0 | 0);
    break label$5;
   }
   HEAPF64[$3_1 >> 3] = +(0 | 0);
   $21(134218800 | 0, $3_1 | 0);
  }
  global$0 = $3_1 + 96 | 0;
  return;
 }
 
 function $20($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($22($5_1 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $23($4_1 | 0, $5_1 | 0, 1 | 0) | 0;
    $26($24($5_1 | 0) | 0 | 0, $25(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    $27($4_1 | 0);
    HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0;
    break label$1;
   }
   $28($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $21($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($29($5_1 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $30($4_1 | 0, $5_1 | 0, 1 | 0) | 0;
    $33($31($5_1 | 0) | 0 | 0, $32(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    $34($4_1 | 0);
    HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 8 | 0;
    break label$1;
   }
   $35($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $22($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $111((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $23($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $24($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $81((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $25($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $26($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $112(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $27($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $28($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  $8_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = $24($8_1 | 0) | 0;
  $114($4_1 + 16 | 0 | 0, $113($8_1 | 0, ($40($8_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $40($8_1 | 0) | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  $26(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, $25(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0, $115(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 4 | 0;
  $116($8_1 | 0, $4_1 + 16 | 0 | 0);
  $117($4_1 + 16 | 0 | 0) | 0;
  global$0 = $4_1 + 48 | 0;
  return;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $158((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $30($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $31($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $106((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $32($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $33($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $159(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $34($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $35($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  $8_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = $31($8_1 | 0) | 0;
  $161($4_1 + 16 | 0 | 0, $160($8_1 | 0, ($42($8_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $42($8_1 | 0) | 0 | 0, HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  $33(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0, $32(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0, $162(HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[($4_1 + 24 | 0) >> 2] = (HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 8 | 0;
  $163($8_1 | 0, $4_1 + 16 | 0 | 0);
  $164($4_1 + 16 | 0 | 0) | 0;
  global$0 = $4_1 + 48 | 0;
  return;
 }
 
 function $36() {
  var $2_1 = 0, $49_1 = 0, $50_1 = 0, $16_1 = 0, $61_1 = 0, $92_1 = 0, $93_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $39($38(134221116 | 0, 134224624 | 0) | 0 | 0, 4 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0) >>> 0 < ($40(134218788 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    $16_1 = 134218788;
    $364(134221116 | 0, HEAP32[($41($16_1 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) != (($40($16_1 | 0) | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$4
      }
      $38(134221116 | 0, 134224637 | 0) | 0;
      break label$3;
     }
     $39(134221116 | 0, 4 | 0) | 0;
    }
    label$5 : {
     if (!((((HEAP32[($2_1 + 12 | 0) >> 2] | 0) >>> 0) % (10 >>> 0) | 0 | 0) == (9 | 0) & 1 | 0)) {
      break label$5
     }
     $39(134221116 | 0, 4 | 0) | 0;
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $49_1 = 4;
  $50_1 = 134221116;
  $39($50_1 | 0, $49_1 | 0) | 0;
  $39($50_1 | 0, $49_1 | 0) | 0;
  $39($50_1 | 0, $49_1 | 0) | 0;
  $39($38($50_1 | 0, 134224639 | 0) | 0 | 0, $49_1 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  label$6 : {
   label$7 : while (1) {
    if (!((HEAP32[($2_1 + 8 | 0) >> 2] | 0) >>> 0 < ($42(134218800 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$6
    }
    $61_1 = 134218800;
    $367(134221116 | 0, +(+HEAPF64[($43($61_1 | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 3])) | 0;
    label$8 : {
     label$9 : {
      if (!((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != (($42($61_1 | 0) | 0) - 1 | 0 | 0) & 1 | 0)) {
       break label$9
      }
      $38(134221116 | 0, 134224637 | 0) | 0;
      break label$8;
     }
     $39(134221116 | 0, 4 | 0) | 0;
    }
    label$10 : {
     if (!((((HEAP32[($2_1 + 8 | 0) >> 2] | 0) >>> 0) % (10 >>> 0) | 0 | 0) == (9 | 0) & 1 | 0)) {
      break label$10
     }
     $39(134221116 | 0, 4 | 0) | 0;
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$7;
   };
  }
  $92_1 = 4;
  $93_1 = 134221116;
  $39($364($38($93_1 | 0, 134224654 | 0) | 0 | 0, (HEAPU8[(0 + 134218784 | 0) >> 0] | 0) & 255 | 0 | 0) | 0 | 0, $92_1 | 0) | 0;
  $39($367($38($93_1 | 0, 134224672 | 0) | 0 | 0, +(+HEAPF64[(0 + 134218824 | 0) >> 3])) | 0 | 0, $92_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $37($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $12_1 = 0, $16_1 = 0, $20_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $12_1 = 24;
  $16_1 = 24;
  $371(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, (($46($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, (10 << $12_1 | 0) >> $12_1 | 0 | 0) | 0) << $16_1 | 0) >> $16_1 | 0 | 0) | 0;
  $315(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $20_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $20_1 | 0;
 }
 
 function $38($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $45(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $44(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $39($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0](HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function $42($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0 | 0;
 }
 
 function $43($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0;
 }
 
 function $44($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $238(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $45($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = 0, $37_1 = 0, $43_1 = 0, $49_1 = 0, $57_1 = 0, $68_1 = 0, $18_1 = 0, $42_1 = 0, $48_1 = 0, $55_1 = 0, $77_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $323($5_1 + 24 | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(($195($5_1 + 24 | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $196($5_1 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
   $18_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   $19_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if (!((($197($19_1 + (HEAP32[((HEAP32[$19_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 176 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break label$3
     }
     $37_1 = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
     break label$2;
    }
    $37_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   }
   $42_1 = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
   $43_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $48_1 = $43_1 + (HEAP32[((HEAP32[$43_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $49_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $55_1 = $198($49_1 + (HEAP32[((HEAP32[$49_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
   $57_1 = 24;
   HEAP32[($5_1 + 8 | 0) >> 2] = $199(HEAP32[$5_1 >> 2] | 0 | 0, $18_1 | 0, $37_1 | 0, $42_1 | 0, $48_1 | 0, ($55_1 << $57_1 | 0) >> $57_1 | 0 | 0) | 0;
   label$4 : {
    if (!(($200($5_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break label$4
    }
    $68_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    $201($68_1 + (HEAP32[((HEAP32[$68_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
   }
  }
  $325($5_1 + 24 | 0 | 0) | 0;
  $77_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $77_1 | 0;
 }
 
 function $46($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $11_1 = 0, $18_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $7_1 = $4_1 + 16 | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 27 | 0) >> 0] = $1_1;
  $316($7_1 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
  $11_1 = 24;
  $14_1 = $226($225($7_1 | 0) | 0 | 0, ((HEAPU8[($4_1 + 27 | 0) >> 0] | 0) << $11_1 | 0) >> $11_1 | 0 | 0) | 0;
  $579($4_1 + 16 | 0 | 0) | 0;
  $18_1 = 24;
  global$0 = $4_1 + 32 | 0;
  return ($14_1 << $18_1 | 0) >> $18_1 | 0 | 0;
 }
 
 function $47() {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = 134218812;
  $39($365($38($364(134221116 | 0, (HEAP32[(0 + 134218832 | 0) >> 2] | 0) + 1 | 0 | 0) | 0 | 0, 134224685 | 0) | 0 | 0, (HEAP32[(0 + 134218832 | 0) >> 2] | 0) + ($40($3_1 | 0) | 0) | 0 | 0) | 0 | 0, 4 | 0) | 0;
  HEAP32[(0 + 134218832 | 0) >> 2] = (HEAP32[(0 + 134218832 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($48($3_1 | 0) | 0) >> 2] | 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = $49($3_1 | 0) | 0;
  $50($2_1 + 24 | 0 | 0, $2_1 + 16 | 0 | 0, 0 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $51($3_1 | 0, HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $19(HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0);
  global$0 = $2_1 + 32 | 0;
  return;
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $49($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $57($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $50($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = $58(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $51($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  $11_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $52($11_1 | 0) | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $53($4_1 + 32 | 0 | 0, $4_1 + 16 | 0 | 0) | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = (HEAP32[$11_1 >> 2] | 0) + ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) << 2 | 0) | 0;
  $55($11_1 | 0, $54((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($11_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0);
  $56($11_1 | 0, (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + -4 | 0 | 0);
  HEAP32[($4_1 + 40 | 0) >> 2] = $57($11_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $30_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  global$0 = $4_1 + 48 | 0;
  return $30_1 | 0;
 }
 
 function $52($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $229(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $6_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $53($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($228(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) - ($228(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) | 0) >> 2 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $54($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $12_1 = $232($231(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0, $231(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $231(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $12_1 | 0;
 }
 
 function $55($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $56($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $40($5_1 | 0) | 0;
  $79($5_1 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  $230($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $56($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $57($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $227($4_1 + 8 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $59($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return (HEAP32[$4_1 >> 2] | 0 | 0) == (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $60() {
  var $2_1 = 0, $33_1 = 0, $44_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 28 | 0) >> 2] = 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = 1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) < (33554432 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($2_1 + 20 | 0) >> 2] = 1;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) <= (HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($2_1 + 24 | 0) >> 2] | 0 | (HEAP32[($2_1 + 20 | 0) >> 2] | 0) | 0;
      $20(134218812 | 0, $2_1 + 16 | 0 | 0);
      HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) << 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = (HEAP32[($2_1 + 24 | 0) >> 2] | 0) << 1 | 0;
    continue label$2;
   };
  }
  $33_1 = 134218812;
  HEAP32[($2_1 + 8 | 0) >> 2] = $49($33_1 | 0) | 0;
  HEAP32[$2_1 >> 2] = $61($33_1 | 0) | 0;
  $62(HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
  label$5 : {
   label$6 : while (1) {
    if (!((($59(134218812 | 0) | 0) ^ -1 | 0) & 1 | 0)) {
     break label$5
    }
    $47();
    continue label$6;
   };
  }
  $36();
  $44_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
  global$0 = $2_1 + 32 | 0;
  return $44_1 | 0;
 }
 
 function $61($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $57($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $62($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $63($58($4_1 + 8 | 0 | 0) | 0 | 0, $58($4_1 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $63($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $235(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $64($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $65($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $67($8_1 | 0, HEAP32[($66($4_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
  $68($8_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $66($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $67($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$8_1 >> 2] = HEAP32[($66($4_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $68($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $69($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $69($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $70($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $25(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $71($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $74(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $72($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $79($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $74($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($76($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $75($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $80(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $76($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $77((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $77($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $78(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $79($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14_1 = $24($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = $17_1;
    $82($14_1 | 0, $25($17_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $80($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $85(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $81($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $89(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $82($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $83(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $83($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $84(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $84($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $85($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $86(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $86($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $87(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $87($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $88(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $88($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $1567(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $90($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $92($8_1 | 0, HEAP32[($91($4_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
  $93($8_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $91($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $92($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$8_1 >> 2] = HEAP32[($91($4_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $93($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $94($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $94($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $95($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $32(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $96($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $99(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $97($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  return;
 }
 
 function $98($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $104($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $99($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($101($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $100($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $105(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $101($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $102((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $102($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $103(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $103($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $104($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14_1 = $31($5_1 | 0) | 0;
    $17_1 = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) + -8 | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = $17_1;
    $107($14_1 | 0, $32($17_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $105($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $85(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 3 | 0 | 0, 8 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $106($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $110(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $108(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $109(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $110($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $111($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $118(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $112($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $119(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $113($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $36_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $120($5_1 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $1608($5_1 | 0);
   abort();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $71($5_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($121($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $36_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $36_1 | 0;
 }
 
 function $114($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $16_1 = 0, $23_1 = 0, $28_1 = 0, $30_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $8_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $8_1;
  $122($8_1 + 12 | 0 | 0, 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
    $16_1 = $124($123($8_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $16_1 = 0;
  }
  HEAP32[$8_1 >> 2] = $16_1;
  $23_1 = (HEAP32[$8_1 >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($8_1 + 8 | 0) >> 2] = $23_1;
  HEAP32[($8_1 + 4 | 0) >> 2] = $23_1;
  $28_1 = (HEAP32[$8_1 >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($125($8_1 | 0) | 0) >> 2] = $28_1;
  $30_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $30_1 | 0;
 }
 
 function $115($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $116($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $8($5_1 | 0);
  $126($24($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $127($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $127($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $127($22($5_1 | 0) | 0 | 0, $125(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $128($5_1 | 0, $40($5_1 | 0) | 0 | 0);
  $129($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $117($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  $130($5_1 | 0);
  label$1 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $75($123($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $131($5_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $118($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $119($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function $120($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $133($132(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $134() | 0;
  $15_1 = HEAP32[($135($3_1 + 24 | 0 | 0, $3_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $15_1 | 0;
 }
 
 function $121($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $136(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $122($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $67($9_1 | 0, HEAP32[($66($5_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
  $145($9_1 + 4 | 0 | 0, $144(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $123($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $147((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $146(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $125($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $148((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $126($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $14_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) - (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0) >> 2 | 0;
  $14_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[$14_1 >> 2] = (HEAP32[$14_1 >> 2] | 0) + (($7_1 - (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) << 2 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) > ($7_1 | 0) & 1 | 0)) {
    break label$1
   }
   $1679(HEAP32[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $127($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($153(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  $13_1 = HEAP32[($153(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = $13_1;
  $16_1 = HEAP32[($153($4_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $16_1;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $72($5_1 | 0, $70($5_1 | 0) | 0 | 0, ($70($5_1 | 0) | 0) + (($71($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($70($5_1 | 0) | 0) + (($71($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($70($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $129($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $130($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $154($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $131($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($155($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 2 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $132($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $139((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $133($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $138(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $134() {
  return $140() | 0 | 0;
 }
 
 function $135($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $137(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($141($4_1 + 8 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[$4_1 >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $137($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(($141($4_1 + 8 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = HEAP32[$4_1 >> 2] | 0;
    break label$1;
   }
   $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $138($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = $142(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $139($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $143(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $140() {
  return 2147483647 | 0;
 }
 
 function $141($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0 | 0;
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 1073741823 | 0;
 }
 
 function $143($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $144($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $144(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $146($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($142(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $149(134224687 | 0);
   abort();
  }
  $19_1 = $150((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $19_1 | 0;
 }
 
 function $147($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $152((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $148($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $118(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $149($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = fimport$2(8 | 0) | 0;
  $151($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  fimport$3($5_1 | 0, 134237948 | 0, 5 | 0);
  abort();
 }
 
 function $150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = $1566(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $151($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1572($9_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$9_1 >> 2] = 134237908 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $152($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $153($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $154($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $156(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $157((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $13_1 = $123($5_1 | 0) | 0;
    $16_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $16_1;
    $82($13_1 | 0, $25($16_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $157($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $78(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $158($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $165(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $159($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  $166(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $160($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $36_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $167($5_1 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $1608($5_1 | 0);
   abort();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $96($5_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($121($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $36_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $36_1 | 0;
 }
 
 function $161($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $16_1 = 0, $23_1 = 0, $28_1 = 0, $30_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $8_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $8_1;
  $168($8_1 + 12 | 0 | 0, 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($6_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
    $16_1 = $170($169($8_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $16_1 = 0;
  }
  HEAP32[$8_1 >> 2] = $16_1;
  $23_1 = (HEAP32[$8_1 >> 2] | 0) + ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($8_1 + 8 | 0) >> 2] = $23_1;
  HEAP32[($8_1 + 4 | 0) >> 2] = $23_1;
  $28_1 = (HEAP32[$8_1 >> 2] | 0) + ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($171($8_1 | 0) | 0) >> 2] = $28_1;
  $30_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $30_1 | 0;
 }
 
 function $162($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $163($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $15($5_1 | 0);
  $172($31($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $173($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $173($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $173($29($5_1 | 0) | 0 | 0, $171(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $174($5_1 | 0, $42($5_1 | 0) | 0 | 0);
  $175($5_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $164($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
  $176($5_1 | 0);
  label$1 : {
   if (!((HEAP32[$5_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $100($169($5_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $177($5_1 | 0) | 0 | 0);
  }
  $15_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $166($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAPF64[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 3] = +HEAPF64[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 3];
  return;
 }
 
 function $167($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $179($178(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $134() | 0;
  $15_1 = HEAP32[($135($3_1 + 24 | 0 | 0, $3_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return $15_1 | 0;
 }
 
 function $168($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $9_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $92($9_1 | 0, HEAP32[($91($5_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
  $185($9_1 + 4 | 0 | 0, $184(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $169($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $187((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $170($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $186(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $171($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $188((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $172($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $14_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) - (HEAP32[($6_1 + 24 | 0) >> 2] | 0) | 0) >> 3 | 0;
  $14_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  HEAP32[$14_1 >> 2] = (HEAP32[$14_1 >> 2] | 0) + (($7_1 - (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) << 3 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) > ($7_1 | 0) & 1 | 0)) {
    break label$1
   }
   $1679(HEAP32[(HEAP32[($6_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $13_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($190(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  $13_1 = HEAP32[($190(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = $13_1;
  $16_1 = HEAP32[($190($4_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = $16_1;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $174($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $97($5_1 | 0, $95($5_1 | 0) | 0 | 0, ($95($5_1 | 0) | 0) + (($96($5_1 | 0) | 0) << 3 | 0) | 0 | 0, ($95($5_1 | 0) | 0) + (($96($5_1 | 0) | 0) << 3 | 0) | 0 | 0, ($95($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $175($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $176($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $191($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $177($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($192($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0) >> 3 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $178($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $181((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $180(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $180($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $5_1 = $182(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $181($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $183(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $182($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 536870911 | 0;
 }
 
 function $183($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $184($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $184(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $186($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  label$1 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0) >>> 0 > ($182(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   $149(134224687 | 0);
   abort();
  }
  $19_1 = $150((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 3 | 0 | 0, 8 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $19_1 | 0;
 }
 
 function $187($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $189((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $165(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $189($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $190($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $191($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $193(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $192($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $194((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $193($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $13_1 = $169($5_1 | 0) | 0;
    $16_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -8 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $16_1;
    $107($13_1 | 0, $32($16_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $103(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $195($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $207($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $198($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0, $15_1 = 0, $19_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!(($209($208() | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $11_1 = 24;
   $15_1 = 24;
   HEAP32[($4_1 + 76 | 0) >> 2] = (($46($4_1 | 0, (32 << $11_1 | 0) >> $11_1 | 0 | 0) | 0) << $15_1 | 0) >> $15_1 | 0;
  }
  $19_1 = 24;
  $21_1 = ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) << $19_1 | 0) >> $19_1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $199($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $76_1 = 0, $79_1 = 0, $142_1 = 0;
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 64 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 47 | 0) >> 0] = $5_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($8_1 + 40 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 60 | 0) >> 2] | 0) | 0;
   HEAP32[($8_1 + 36 | 0) >> 2] = $202(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) - (HEAP32[($8_1 + 40 | 0) >> 2] | 0) | 0;
     break label$3;
    }
    HEAP32[($8_1 + 36 | 0) >> 2] = 0;
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 56 | 0) >> 2] | 0) - (HEAP32[($8_1 + 60 | 0) >> 2] | 0) | 0;
   label$5 : {
    if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!(($203(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($8_1 + 64 | 0) >> 2] = 0;
     HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
     break label$1;
    }
   }
   label$7 : {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$7
    }
    $76_1 = $8_1 + 16 | 0;
    $79_1 = 24;
    $204($76_1 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0, ((HEAPU8[($8_1 + 47 | 0) >> 0] | 0) << $79_1 | 0) >> $79_1 | 0 | 0) | 0;
    label$8 : {
     label$9 : {
      if (!(($203(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, $205($76_1 | 0) | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($8_1 + 64 | 0) >> 2] = 0;
      HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = 1;
      break label$8;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = 0;
    }
    $1584($8_1 + 16 | 0 | 0) | 0;
    label$10 : {
     switch (HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) {
     case 1:
      break label$1;
     default:
      break label$10;
     };
    }
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 56 | 0) >> 2] | 0) | 0;
   label$11 : {
    if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$11
    }
    label$12 : {
     if (!(($203(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($8_1 + 64 | 0) >> 2] = 0;
     HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
     break label$1;
    }
   }
   $206(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
  }
  $142_1 = HEAP32[($8_1 + 72 | 0) >> 2] | 0;
  global$0 = $8_1 + 80 | 0;
  return $142_1 | 0;
 }
 
 function $200($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0 | 0;
 }
 
 function $201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $210(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $202($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $203($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($6_1, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $204($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $9_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $211($6_1 | 0) | 0;
  $9_1 = 24;
  $1596($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, ((HEAPU8[($5_1 + 7 | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $205($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $213($212(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $206($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $207($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $224(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $208() {
  return -1 | 0;
 }
 
 function $209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $210($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $330($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $211($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $214($4_1 | 0) | 0;
  $215($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $212($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($217($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $218($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $219($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $213($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $214($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $215($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $216($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $216($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $217($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $16_1 = (((HEAPU8[(($220(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0) & 128 | 0 | 0) != (0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $218($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($220(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $219($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $221($220(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $220($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $222(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $221($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $223(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $222($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $223($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $224($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $584(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 134222264 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $9_1 = 24;
  $13_1 = 24;
  $15_1 = ((FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($5_1, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0) | 0) << $13_1 | 0) >> $13_1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $228($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $229($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $233($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $230($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $72($5_1 | 0, $70($5_1 | 0) | 0 | 0, ($70($5_1 | 0) | 0) + (($71($5_1 | 0) | 0) << 2 | 0) | 0 | 0, ($70($5_1 | 0) | 0) + ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, ($70($5_1 | 0) | 0) + (($40($5_1 | 0) | 0) << 2 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $231($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $232($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $27_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) - (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0) >> 2 | 0;
  label$1 : {
   if (!((HEAP32[$5_1 >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   $1681(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, (HEAP32[$5_1 >> 2] | 0) << 2 | 0 | 0) | 0;
  }
  $27_1 = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$5_1 >> 2] | 0) << 2 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $27_1 | 0;
 }
 
 function $233($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $234($4_1 + 8 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $234($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $235($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $243(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $236() {
  $3();
  $10();
  $17();
  return;
 }
 
 function $237($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $60() | 0 | 0;
 }
 
 function $238($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($1_1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0_1 >> 0] | 0) {
      break label$3
     }
     $1_1 = $0_1;
     break label$1;
    }
    $1_1 = $0_1;
    label$4 : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3_1 & 255 | 0) {
     break label$6
    }
    $1_1 = $2_1;
    break label$1;
   }
   label$7 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $239($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = HEAPU8[($240($0_1 | 0) | 0) >> 0] | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[($240($1_1 | 0) | 0) >> 0] | 0;
  HEAP8[$1_1 >> 0] = HEAPU8[($240($2_1 + 15 | 0 | 0) | 0) >> 0] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $240($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $241($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($242($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($242($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($242($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $242($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $243($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $7_1 = 0;
  label$1 : while (1) {
   $3_1 = $1_1 + -4 | 0;
   label$2 : while (1) {
    $4_1 = $0_1;
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          $0_1 = $1_1 - $4_1 | 0;
          $5_1 = $0_1 >> 2 | 0;
          if ($5_1 >>> 0 > 5 >>> 0) {
           break label$8
          }
          label$9 : {
           switch ($5_1 | 0) {
           case 2:
            $0_1 = $1_1 + -4 | 0;
            if (!($244($2_1 | 0, $0_1 | 0, $4_1 | 0) | 0)) {
             break label$3
            }
            $245($4_1 | 0, $0_1 | 0);
            return;
           case 4:
            $246($4_1 | 0, $4_1 + 4 | 0 | 0, $4_1 + 8 | 0 | 0, $1_1 + -4 | 0 | 0, $2_1 | 0) | 0;
            return;
           case 3:
            break label$7;
           case 5:
            break label$9;
           default:
            break label$3;
           };
          }
          $247($4_1 | 0, $4_1 + 4 | 0 | 0, $4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0, $1_1 + -4 | 0 | 0, $2_1 | 0) | 0;
          return;
         }
         label$12 : {
          if (($0_1 | 0) > (123 | 0)) {
           break label$12
          }
          $248($4_1 | 0, $1_1 | 0, $2_1 | 0);
          return;
         }
         $6_1 = $4_1 + ((($5_1 | 0) / (2 | 0) | 0) << 2 | 0) | 0;
         label$13 : {
          label$14 : {
           if (($0_1 | 0) < (3997 | 0)) {
            break label$14
           }
           $0_1 = (($5_1 | 0) / (4 | 0) | 0) << 2 | 0;
           $7_1 = $247($4_1 | 0, $4_1 + $0_1 | 0 | 0, $6_1 | 0, $6_1 + $0_1 | 0 | 0, $3_1 | 0, $2_1 | 0) | 0;
           break label$13;
          }
          $7_1 = $249($4_1 | 0, $6_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
         }
         $0_1 = $3_1;
         label$15 : {
          label$16 : {
           if (!($244($2_1 | 0, $4_1 | 0, $6_1 | 0) | 0)) {
            break label$16
           }
           $0_1 = $3_1;
           break label$15;
          }
          label$17 : while (1) {
           label$18 : {
            $0_1 = $0_1 + -4 | 0;
            if (($4_1 | 0) != ($0_1 | 0)) {
             break label$18
            }
            $5_1 = $4_1 + 4 | 0;
            if ($244($2_1 | 0, $4_1 | 0, $3_1 | 0) | 0) {
             break label$5
            }
            label$19 : while (1) {
             if (($5_1 | 0) == ($3_1 | 0)) {
              break label$3
             }
             label$20 : {
              if (!($244($2_1 | 0, $4_1 | 0, $5_1 | 0) | 0)) {
               break label$20
              }
              $245($5_1 | 0, $3_1 | 0);
              $5_1 = $5_1 + 4 | 0;
              break label$5;
             }
             $5_1 = $5_1 + 4 | 0;
             continue label$19;
            };
           }
           if (!($244($2_1 | 0, $0_1 | 0, $6_1 | 0) | 0)) {
            continue label$17
           }
           break label$17;
          };
          $245($4_1 | 0, $0_1 | 0);
          $7_1 = $7_1 + 1 | 0;
         }
         $8_1 = $4_1 + 4 | 0;
         if ($8_1 >>> 0 >= $0_1 >>> 0) {
          break label$6
         }
         label$21 : while (1) {
          $5_1 = $8_1;
          $8_1 = $5_1 + 4 | 0;
          if ($244($2_1 | 0, $5_1 | 0, $6_1 | 0) | 0) {
           continue label$21
          }
          label$22 : while (1) {
           $0_1 = $0_1 + -4 | 0;
           if (!($244($2_1 | 0, $0_1 | 0, $6_1 | 0) | 0)) {
            continue label$22
           }
           break label$22;
          };
          label$23 : {
           if ($5_1 >>> 0 <= $0_1 >>> 0) {
            break label$23
           }
           $8_1 = $5_1;
           break label$6;
          }
          $245($5_1 | 0, $0_1 | 0);
          $6_1 = ($6_1 | 0) == ($5_1 | 0) ? $0_1 : $6_1;
          $7_1 = $7_1 + 1 | 0;
          continue label$21;
         };
        }
        $249($4_1 | 0, $4_1 + 4 | 0 | 0, $1_1 + -4 | 0 | 0, $2_1 | 0) | 0;
        break label$3;
       }
       label$24 : {
        if (($8_1 | 0) == ($6_1 | 0)) {
         break label$24
        }
        if (!($244($2_1 | 0, $6_1 | 0, $8_1 | 0) | 0)) {
         break label$24
        }
        $245($8_1 | 0, $6_1 | 0);
        $7_1 = $7_1 + 1 | 0;
       }
       label$25 : {
        if ($7_1) {
         break label$25
        }
        $6_1 = $250($4_1 | 0, $8_1 | 0, $2_1 | 0) | 0;
        label$26 : {
         $0_1 = $8_1 + 4 | 0;
         if (!($250($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0)) {
          break label$26
         }
         $1_1 = $8_1;
         $0_1 = $4_1;
         if (!$6_1) {
          continue label$1
         }
         break label$3;
        }
        if ($6_1) {
         continue label$2
        }
       }
       label$27 : {
        if (($8_1 - $4_1 | 0 | 0) >= ($1_1 - $8_1 | 0 | 0)) {
         break label$27
        }
        $243($4_1 | 0, $8_1 | 0, $2_1 | 0);
        $0_1 = $8_1 + 4 | 0;
        continue label$2;
       }
       $243($8_1 + 4 | 0 | 0, $1_1 | 0, $2_1 | 0);
       $1_1 = $8_1;
       $0_1 = $4_1;
       continue label$1;
      }
      $0_1 = $3_1;
      if (($5_1 | 0) == ($0_1 | 0)) {
       break label$3
      }
      label$28 : while (1) {
       $6_1 = $5_1;
       $5_1 = $6_1 + 4 | 0;
       if (!($244($2_1 | 0, $4_1 | 0, $6_1 | 0) | 0)) {
        continue label$28
       }
       label$29 : while (1) {
        $0_1 = $0_1 + -4 | 0;
        if ($244($2_1 | 0, $4_1 | 0, $0_1 | 0) | 0) {
         continue label$29
        }
        break label$29;
       };
       label$30 : {
        if ($6_1 >>> 0 < $0_1 >>> 0) {
         break label$30
        }
        $4_1 = $6_1;
        continue label$4;
       }
       $245($6_1 | 0, $0_1 | 0);
       continue label$28;
      };
     };
    }
    break label$2;
   };
   break label$1;
  };
 }
 
 function $244($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $245($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($251($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($251($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($251($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $246($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = $249($0_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
  label$1 : {
   if (!($244($4_1 | 0, $3_1 | 0, $2_1 | 0) | 0)) {
    break label$1
   }
   $245($2_1 | 0, $3_1 | 0);
   label$2 : {
    if ($244($4_1 | 0, $2_1 | 0, $1_1 | 0) | 0) {
     break label$2
    }
    return $5_1 + 1 | 0 | 0;
   }
   $245($1_1 | 0, $2_1 | 0);
   label$3 : {
    if ($244($4_1 | 0, $1_1 | 0, $0_1 | 0) | 0) {
     break label$3
    }
    return $5_1 + 2 | 0 | 0;
   }
   $245($0_1 | 0, $1_1 | 0);
   $5_1 = $5_1 + 3 | 0;
  }
  return $5_1 | 0;
 }
 
 function $247($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = $246($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $5_1 | 0) | 0;
  label$1 : {
   if (!($244($5_1 | 0, $4_1 | 0, $3_1 | 0) | 0)) {
    break label$1
   }
   $245($3_1 | 0, $4_1 | 0);
   label$2 : {
    if ($244($5_1 | 0, $3_1 | 0, $2_1 | 0) | 0) {
     break label$2
    }
    return $6_1 + 1 | 0 | 0;
   }
   $245($2_1 | 0, $3_1 | 0);
   label$3 : {
    if ($244($5_1 | 0, $2_1 | 0, $1_1 | 0) | 0) {
     break label$3
    }
    return $6_1 + 2 | 0 | 0;
   }
   $245($1_1 | 0, $2_1 | 0);
   label$4 : {
    if ($244($5_1 | 0, $1_1 | 0, $0_1 | 0) | 0) {
     break label$4
    }
    return $6_1 + 3 | 0 | 0;
   }
   $245($0_1 | 0, $1_1 | 0);
   $6_1 = $6_1 + 4 | 0;
  }
  return $6_1 | 0;
 }
 
 function $248($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $7_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $0_1 + 8 | 0;
  $249($0_1 | 0, $0_1 + 4 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $5_1 = $0_1 + 12 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($5_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!($244($2_1 | 0, $5_1 | 0, $4_1 | 0) | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($251($5_1 | 0) | 0) >> 2] | 0;
     $6_1 = $5_1;
     label$4 : {
      label$5 : while (1) {
       $7_1 = $4_1;
       HEAP32[$6_1 >> 2] = HEAP32[($251($7_1 | 0) | 0) >> 2] | 0;
       label$6 : {
        if (($7_1 | 0) != ($0_1 | 0)) {
         break label$6
        }
        $7_1 = $0_1;
        break label$4;
       }
       $6_1 = $7_1;
       $4_1 = $7_1 + -4 | 0;
       if ($244($2_1 | 0, $3_1 + 12 | 0 | 0, $4_1 | 0) | 0) {
        continue label$5
       }
       break label$5;
      };
     }
     HEAP32[$7_1 >> 2] = HEAP32[($251($3_1 + 12 | 0 | 0) | 0) >> 2] | 0;
    }
    $4_1 = $5_1;
    $5_1 = $5_1 + 4 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $249($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = $244($3_1 | 0, $1_1 | 0, $0_1 | 0) | 0;
  $5_1 = $244($3_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($4_1) {
      break label$3
     }
     $4_1 = 0;
     if (!$5_1) {
      break label$1
     }
     $245($1_1 | 0, $2_1 | 0);
     $4_1 = 1;
     if (!($244($3_1 | 0, $1_1 | 0, $0_1 | 0) | 0)) {
      break label$1
     }
     $245($0_1 | 0, $1_1 | 0);
     break label$2;
    }
    label$4 : {
     if (!$5_1) {
      break label$4
     }
     $245($0_1 | 0, $2_1 | 0);
     return 1 | 0;
    }
    $245($0_1 | 0, $1_1 | 0);
    $4_1 = 1;
    if (!($244($3_1 | 0, $2_1 | 0, $1_1 | 0) | 0)) {
     break label$1
    }
    $245($1_1 | 0, $2_1 | 0);
   }
   $4_1 = 2;
  }
  return $4_1 | 0;
 }
 
 function $250($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $7_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = ($1_1 - $0_1 | 0) >> 2 | 0;
    if ($4_1 >>> 0 > 5 >>> 0) {
     break label$2
    }
    $5_1 = 1;
    label$3 : {
     switch ($4_1 | 0) {
     case 2:
      $4_1 = $1_1 + -4 | 0;
      if (!($244($2_1 | 0, $4_1 | 0, $0_1 | 0) | 0)) {
       break label$1
      }
      $245($0_1 | 0, $4_1 | 0);
      break label$1;
     case 3:
      $249($0_1 | 0, $0_1 + 4 | 0 | 0, $1_1 + -4 | 0 | 0, $2_1 | 0) | 0;
      break label$1;
     case 4:
      $246($0_1 | 0, $0_1 + 4 | 0 | 0, $0_1 + 8 | 0 | 0, $1_1 + -4 | 0 | 0, $2_1 | 0) | 0;
      break label$1;
     case 5:
      break label$3;
     default:
      break label$1;
     };
    }
    $247($0_1 | 0, $0_1 + 4 | 0 | 0, $0_1 + 8 | 0 | 0, $0_1 + 12 | 0 | 0, $1_1 + -4 | 0 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   $6_1 = $0_1 + 8 | 0;
   $249($0_1 | 0, $0_1 + 4 | 0 | 0, $6_1 | 0, $2_1 | 0) | 0;
   $7_1 = $0_1 + 12 | 0;
   $8_1 = 0;
   $5_1 = 1;
   label$7 : while (1) {
    if (($7_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    label$8 : {
     label$9 : {
      if (!($244($2_1 | 0, $7_1 | 0, $6_1 | 0) | 0)) {
       break label$9
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($251($7_1 | 0) | 0) >> 2] | 0;
      $9_1 = $7_1;
      label$10 : {
       label$11 : while (1) {
        $4_1 = $6_1;
        HEAP32[$9_1 >> 2] = HEAP32[($251($4_1 | 0) | 0) >> 2] | 0;
        label$12 : {
         if (($4_1 | 0) != ($0_1 | 0)) {
          break label$12
         }
         $4_1 = $0_1;
         break label$10;
        }
        $9_1 = $4_1;
        $6_1 = $4_1 + -4 | 0;
        if ($244($2_1 | 0, $3_1 + 12 | 0 | 0, $6_1 | 0) | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      HEAP32[$4_1 >> 2] = HEAP32[($251($3_1 + 12 | 0 | 0) | 0) >> 2] | 0;
      $8_1 = $8_1 + 1 | 0;
      if (($8_1 | 0) == (8 | 0)) {
       break label$8
      }
     }
     $6_1 = $7_1;
     $7_1 = $7_1 + 4 | 0;
     continue label$7;
    }
    break label$7;
   };
   $5_1 = ($7_1 + 4 | 0 | 0) == ($1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $251($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $252($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($253($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($253($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($253($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $253($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $254($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $255($0_1) {
  $0_1 = $0_1 | 0;
  return $1657($0_1 | 0) | 0 | 0;
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  return $1658($0_1 | 0) | 0 | 0;
 }
 
 function $257($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $258() {
  return ($259() | 0 | 0) > (0 | 0) | 0;
 }
 
 function $259() {
  return fimport$4() | 0 | 0;
 }
 
 function $260($0_1) {
  $0_1 = $0_1 | 0;
  $261($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $261($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 134225084;
  $262($0_1 | 0, 0 | 0);
  $579($0_1 + 28 | 0 | 0) | 0;
  $1653(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
  $1653(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0);
  $1653(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0);
  $1653(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $262($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    return;
   }
   $2_1 = $2_1 + -1 | 0;
   $3_1 = $2_1 << 2 | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0]($1_1, $0_1, HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0);
   continue label$1;
  };
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  $1567($260($0_1 | 0) | 0 | 0);
 }
 
 function $264($0_1) {
  $0_1 = $0_1 | 0;
  $261($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $265($0_1) {
  $0_1 = $0_1 | 0;
  $1567($264($0_1 | 0) | 0 | 0);
 }
 
 function $266($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 134224764;
  $579($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $267($0_1) {
  $0_1 = $0_1 | 0;
  $1567($266($0_1 | 0) | 0 | 0);
 }
 
 function $268($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 134224764;
  $1172($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $269($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $270($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $271($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $272($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $272($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $273($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $272($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $274($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $275($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $276($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = $6_1 - $5_1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $277($3_1 + 12 | 0 | 0, $277($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $278($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $279($0_1 | 0, $5_1 | 0);
      break label$3;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$1
     }
     HEAP8[$1_1 >> 0] = $280($5_1 | 0) | 0;
     $5_1 = 1;
    }
    $1_1 = $1_1 + $5_1 | 0;
    $4_1 = $5_1 + $4_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $277($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $281($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $278($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1679($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $279($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $280($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $281($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $254($2_1 + 8 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $282($0_1) {
  $0_1 = $0_1 | 0;
  return $208() | 0 | 0;
 }
 
 function $283($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1) | 0 | 0) != ($208() | 0 | 0)) {
    break label$1
   }
   return $208() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $284(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $284($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 & 255 | 0 | 0;
 }
 
 function $285($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $208() | 0 | 0;
 }
 
 function $286($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $208() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $284(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $7_1 - $6_1 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $277($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $278(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = $6_1 + (HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $6_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $287($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $208() | 0 | 0;
 }
 
 function $288($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 134224828;
  $579($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $289($0_1) {
  $0_1 = $0_1 | 0;
  $1567($288($0_1 | 0) | 0 | 0);
 }
 
 function $290($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 134224828;
  $1172($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $291($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $292($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $293($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $272($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $294($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $272($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $295($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $296($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $297($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = ($6_1 - $5_1 | 0) >> 2 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $277($3_1 + 12 | 0 | 0, $277($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $298($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $299($0_1 | 0, $5_1 | 0);
      $1_1 = $1_1 + ($5_1 << 2 | 0) | 0;
      break label$3;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$1
     }
     HEAP32[$1_1 >> 2] = $300($5_1 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $5_1 = 1;
    }
    $4_1 = $5_1 + $4_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $298($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0_1 = $257($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
 }
 
 function $300($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
  return $302() | 0 | 0;
 }
 
 function $302() {
  return -1 | 0;
 }
 
 function $303($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1) | 0 | 0) != ($302() | 0 | 0)) {
    break label$1
   }
   return $302() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $304(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $304($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $305($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $302() | 0 | 0;
 }
 
 function $306($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $302() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $304(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = ($7_1 - $6_1 | 0) >> 2 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $277($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $298(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    $7_1 = $6_1 << 2 | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $7_1 | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $7_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $302() | 0 | 0;
 }
 
 function $308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $309($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $308($0_1 | 0, 134224924 | 0) | 0;
  $260($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $310($0_1) {
  $0_1 = $0_1 | 0;
  return $309($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $311($0_1) {
  $0_1 = $0_1 | 0;
  $1567($309($0_1 | 0) | 0 | 0);
 }
 
 function $312($0_1) {
  $0_1 = $0_1 | 0;
  $311($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $313($0_1) {
  $0_1 = $0_1 | 0;
  return $322($0_1 | 0) | 0 | 0;
 }
 
 function $314($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $315($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($207($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = $323($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
    if (!($195($2_1 | 0) | 0)) {
     break label$2
    }
    if (($324($207($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $201($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $325($2_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $316($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1170($0_1 | 0, $1_1 + 28 | 0 | 0) | 0;
 }
 
 function $317($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($326($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $318($0_1) {
  $0_1 = $0_1 | 0;
  return (($327(HEAP32[$0_1 >> 2] | 0 | 0) | 0) << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $319($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ((HEAPU16[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + ($2_1 << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $320($0_1) {
  $0_1 = $0_1 | 0;
  $328(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $321($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $326($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $322($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
 }
 
 function $323($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($313($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($314($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $315($314($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $324($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($207($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($313($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($197($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($258() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($324($207($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $201($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $326($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($386($0_1 | 0) | 0) ^ ($386($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $327($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1) | 0 | 0;
  }
  return $284(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $284(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $329($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $284($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 1 | 0;
  HEAP8[$2_1 >> 0] = $1_1;
  return $284($1_1 | 0) | 0 | 0;
 }
 
 function $330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = !(HEAP32[($0_1 + 24 | 0) >> 2] | 0) | $1_1 | 0;
 }
 
 function $331($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $331($0_1 | 0, 134224972 | 0) | 0;
  $264($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $333($0_1) {
  $0_1 = $0_1 | 0;
  return $332($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $334($0_1) {
  $0_1 = $0_1 | 0;
  $1567($332($0_1 | 0) | 0 | 0);
 }
 
 function $335($0_1) {
  $0_1 = $0_1 | 0;
  $334($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $336($0_1) {
  $0_1 = $0_1 | 0;
  return $322($0_1 | 0) | 0 | 0;
 }
 
 function $337($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $338($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($346($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = $347($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
    if (!($348($2_1 | 0) | 0)) {
     break label$2
    }
    if (($349($346($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $345($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $350($2_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $339($0_1) {
  $0_1 = $0_1 | 0;
  return $584($0_1 | 0, 134222256 | 0) | 0 | 0;
 }
 
 function $340($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($351($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $341($0_1) {
  $0_1 = $0_1 | 0;
  return $352(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $342($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $343($0_1) {
  $0_1 = $0_1 | 0;
  $353(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $344($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $351($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $345($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $210($0_1 | 0, $1_1 | 0);
 }
 
 function $346($0_1) {
  $0_1 = $0_1 | 0;
  return $224($0_1 | 0) | 0 | 0;
 }
 
 function $347($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($336($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($337($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $338($337($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $348($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $349($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $350($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($346($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($336($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($197($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($258() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($349($346($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $345($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($387($0_1 | 0) | 0) ^ ($387($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $352($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1) | 0 | 0;
  }
  return $304(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $353($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $304(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $354($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $304($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 4 | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  return $304($1_1 | 0) | 0 | 0;
 }
 
 function $356($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $357($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $356($0_1 | 0, 134225020 | 0) | 0;
  $260($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $358($0_1) {
  $0_1 = $0_1 | 0;
  return $357($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $359($0_1) {
  $0_1 = $0_1 | 0;
  $1567($357($0_1 | 0) | 0 | 0);
 }
 
 function $360($0_1) {
  $0_1 = $0_1 | 0;
  $359($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $361($0_1) {
  $0_1 = $0_1 | 0;
  return $584($0_1 | 0, 134222092 | 0) | 0 | 0;
 }
 
 function $362($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $363($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $364($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = $323($2_1 + 24 | 0 | 0, $0_1 | 0) | 0;
   if (!($195($3_1 | 0) | 0)) {
    break label$1
   }
   $197($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
   $316($2_1 + 16 | 0 | 0, $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
   $4_1 = $361($2_1 + 16 | 0 | 0) | 0;
   $579($2_1 + 16 | 0 | 0) | 0;
   $5_1 = $196($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   $6_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $7_1 = $198($6_1 | 0) | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $362($4_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $6_1 | 0, $7_1 | 0, $1_1 | 0) | 0;
   if (!($200($2_1 + 16 | 0 | 0) | 0)) {
    break label$1
   }
   $201($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
  }
  $325($3_1 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $365($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = $323($2_1 + 24 | 0 | 0, $0_1 | 0) | 0;
   if (!($195($3_1 | 0) | 0)) {
    break label$1
   }
   $316($2_1 + 16 | 0 | 0, $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
   $4_1 = $361($2_1 + 16 | 0 | 0) | 0;
   $579($2_1 + 16 | 0 | 0) | 0;
   $5_1 = $196($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   $6_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $7_1 = $198($6_1 | 0) | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $363($4_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $6_1 | 0, $7_1 | 0, $1_1 | 0) | 0;
   if (!($200($2_1 + 16 | 0 | 0) | 0)) {
    break label$1
   }
   $201($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
  }
  $325($3_1 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $366($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $367($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = $323($2_1 + 24 | 0 | 0, $0_1 | 0) | 0;
   if (!($195($3_1 | 0) | 0)) {
    break label$1
   }
   $316($2_1 + 16 | 0 | 0, $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
   $4_1 = $361($2_1 + 16 | 0 | 0) | 0;
   $579($2_1 + 16 | 0 | 0) | 0;
   $5_1 = $196($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   $6_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $7_1 = $198($6_1 | 0) | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $366($4_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0, $6_1 | 0, $7_1 | 0, +$1_1) | 0;
   if (!($200($2_1 + 16 | 0 | 0) | 0)) {
    break label$1
   }
   $201($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
  }
  $325($3_1 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $368($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $369($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($209($329($2_1 | 0, $1_1 | 0) | 0 | 0, $208() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $370($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $371($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = $323($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   if (!($195($3_1 | 0) | 0)) {
    break label$1
   }
   $4_1 = $196($2_1 | 0, $0_1 | 0) | 0;
   $369($368($4_1 | 0) | 0 | 0, $1_1 | 0) | 0;
   if (!($200($4_1 | 0) | 0)) {
    break label$1
   }
   $201($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  $325($3_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $372($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $373($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $372($0_1 | 0, 134225068 | 0) | 0;
  $264($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $374($0_1) {
  $0_1 = $0_1 | 0;
  return $373($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  $1567($373($0_1 | 0) | 0 | 0);
 }
 
 function $376($0_1) {
  $0_1 = $0_1 | 0;
  $375($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $377($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($354($355($2_1 | 0, $1_1 | 0) | 0 | 0, $302() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $380($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $381($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $382($0_1 | 0) | 0;
  $1580($0_1 | 0, $1_1 | 0, $44($1_1 | 0) | 0 | 0);
  return $0_1 | 0;
 }
 
 function $382($0_1) {
  $0_1 = $0_1 | 0;
  $214($0_1 | 0) | 0;
  $215($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $383($0_1) {
  $0_1 = $0_1 | 0;
  $1567($261($0_1 | 0) | 0 | 0);
 }
 
 function $384($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 4098;
  HEAP32[($0_1 + 8 | 0) >> 2] = 6;
  HEAP32[($0_1 + 16 | 0) >> 2] = !$1_1;
  $1680($0_1 + 32 | 0 | 0, 0 | 0, 40 | 0) | 0;
  $1172($0_1 + 28 | 0 | 0) | 0;
 }
 
 function $385($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $386($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($209($327($1_1 | 0) | 0 | 0, $208() | 0 | 0) | 0) {
     break label$2
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $387($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($354($352($1_1 | 0) | 0 | 0, $302() | 0 | 0) | 0) {
     break label$2
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $388($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $389($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $390($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($389($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $391($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $392() {
  return 134218836 | 0;
 }
 
 function $393($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[($392() | 0) >> 2] = 0 - $0_1 | 0;
   $0_1 = -1;
  }
  return $0_1 | 0;
 }
 
 function $394($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $395($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = $394(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0;
  $0_1 = $393(fimport$5(6 | 0, $1_1 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $396($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($4_1 | 0) != (0 | 0)) | 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
  $4_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 2;
  HEAP32[$3_1 >> 2] = $4_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    $4_1 = $393(fimport$6(145 | 0, $3_1 | 0) | 0 | 0) | 0;
    if (($4_1 | 0) > (0 | 0)) {
     break label$2
    }
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | (($4_1 & 48 | 0) ^ 16 | 0) | 0;
    break label$1;
   }
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   if ($4_1 >>> 0 <= $6_1 >>> 0) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $5_1 + ($4_1 - $6_1 | 0) | 0;
   label$3 : {
    if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
     break label$3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
    HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $397($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $11_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $0_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $0_1;
  i64toi32_i32$0 = $1$hi;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  $16_1 = $3_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $11_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $11_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  HEAP32[($16_1 + 4 | 0) >> 2] = $11_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $3_1 + 24 | 0;
  label$1 : {
   label$2 : {
    if (($393(fimport$7(140 | 0, $3_1 | 0) | 0 | 0) | 0 | 0) < (0 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = -1;
   $1_1 = -1;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = -1;
   HEAP32[($3_1 + 24 | 0) >> 2] = -1;
   HEAP32[($3_1 + 28 | 0) >> 2] = i64toi32_i32$2;
  }
  global$0 = $3_1 + 32 | 0;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return $1_1 | 0;
 }
 
 function $398($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $8_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 40 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  $6_1 = 2;
  HEAP32[($3_1 + 24 | 0) >> 2] = 2;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = $3_1 + 32 | 0;
  label$1 : {
   label$2 : {
    $7_1 = $1_1 + $2_1 | 0;
    $4_1 = $393(fimport$8(146 | 0, $3_1 + 16 | 0 | 0) | 0 | 0) | 0;
    if (($7_1 | 0) == ($4_1 | 0)) {
     break label$2
    }
    $1_1 = $3_1 + 32 | 0;
    label$3 : while (1) {
     label$4 : {
      if (($4_1 | 0) > (-1 | 0)) {
       break label$4
      }
      $4_1 = 0;
      HEAP32[($0_1 + 28 | 0) >> 2] = 0;
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = 0;
      HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
      if (($6_1 | 0) == (2 | 0)) {
       break label$1
      }
      $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
      break label$1;
     }
     $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
     $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
     $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
     HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + $8_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - $8_1 | 0;
     $8_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
     $6_1 = $6_1 - $5_1 | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
     HEAP32[$3_1 >> 2] = $8_1;
     $7_1 = $7_1 - $4_1 | 0;
     $4_1 = $393(fimport$8(146 | 0, $3_1 | 0) | 0 | 0) | 0;
     if (($7_1 | 0) != ($4_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 48 | 0;
  return $4_1 | 0;
 }
 
 function $399($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = 59;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 64 | 0) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 21523;
   HEAP32[$3_1 >> 2] = $4_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $3_1 + 24 | 0;
   if (!(fimport$9(54 | 0, $3_1 | 0) | 0)) {
    break label$1
   }
   HEAP8[($0_1 + 75 | 0) >> 0] = 255;
  }
  $0_1 = $398($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $400($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $401($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $402() {
  fimport$10(134220928 | 0);
  return 134220936 | 0;
 }
 
 function $403() {
  fimport$11(134220928 | 0);
 }
 
 function $404($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $405($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = -1;
  label$1 : {
   if (($0_1 | 0) == (-1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   label$2 : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    $3_1 = $400($1_1 | 0) | 0;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($4_1) {
       break label$5
      }
      $404($1_1 | 0) | 0;
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$4
      }
     }
     if ($4_1 >>> 0 > ((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + -8 | 0) >>> 0) {
      break label$3
     }
    }
    if (!$3_1) {
     break label$1
    }
    $401($1_1 | 0);
    return -1 | 0;
   }
   $2_1 = $4_1 + -1 | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   HEAP8[$2_1 >> 0] = $0_1;
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
   label$6 : {
    if (!$3_1) {
     break label$6
    }
    $401($1_1 | 0);
   }
   $2_1 = $0_1;
  }
  return $2_1 | 0;
 }
 
 function $406($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($404($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $407($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if ($400($0_1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    return HEAPU8[$1_1 >> 0] | 0 | 0;
   }
   return $406($0_1 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    $1_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$4;
   }
   $1_1 = $406($0_1 | 0) | 0;
  }
  $401($0_1 | 0);
  return $1_1 | 0;
 }
 
 function $408($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $409($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($408($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   $6_1 = 0;
   label$4 : {
    if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    $4_1 = $1_1;
    label$5 : while (1) {
     $3_1 = $4_1;
     if (!$3_1) {
      break label$4
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $1_1 = $1_1 - $3_1 | 0;
    $0_1 = $0_1 + $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    $6_1 = $3_1;
   }
   $1679($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $6_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $410($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $409($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = $400($3_1 | 0) | 0;
   $0_1 = $409($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $401($3_1 | 0);
  }
  label$3 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$3
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $411($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $412($0_1 | 0) | 0 | 0;
    }
    $1_1 = $400($0_1 | 0) | 0;
    $2_1 = $412($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $401($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 134238592 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $411(HEAP32[(0 + 134238592 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($402() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $400($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $412($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $401($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $403();
  }
  return $2_1 | 0;
 }
 
 function $412($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $413() {
  $414(134221620 | 0) | 0;
 }
 
 function $414($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[(0 + 134225672 | 0) >> 2] | 0;
  $417(134221624 | 0, $1_1 | 0, 134221680 | 0) | 0;
  $418(134220940 | 0, 134221624 | 0) | 0;
  $419(134221688 | 0, $1_1 | 0, 134221744 | 0) | 0;
  $420(134221028 | 0, 134221688 | 0) | 0;
  $1_1 = HEAP32[(0 + 134225676 | 0) >> 2] | 0;
  $421(134221752 | 0, $1_1 | 0, 134221800 | 0) | 0;
  $422(134221116 | 0, 134221752 | 0) | 0;
  $423(134221808 | 0, $1_1 | 0, 134221856 | 0) | 0;
  $424(134221200 | 0, 134221808 | 0) | 0;
  $1_1 = HEAP32[(0 + 134225680 | 0) >> 2] | 0;
  $421(134221864 | 0, $1_1 | 0, 134221912 | 0) | 0;
  $422(134221284 | 0, 134221864 | 0) | 0;
  $422(134221452 | 0, $207((HEAP32[((HEAP32[(0 + 134221284 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 134221284 | 0 | 0) | 0 | 0) | 0;
  $423(134221920 | 0, $1_1 | 0, 134221968 | 0) | 0;
  $424(134221368 | 0, 134221920 | 0) | 0;
  $424(134221536 | 0, $346((HEAP32[((HEAP32[(0 + 134221368 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 134221368 | 0 | 0) | 0 | 0) | 0;
  $425((HEAP32[((HEAP32[(0 + 134220940 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 134220940 | 0 | 0, 134221116 | 0) | 0;
  $426((HEAP32[((HEAP32[(0 + 134221028 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 134221028 | 0 | 0, 134221200 | 0) | 0;
  $427((HEAP32[((HEAP32[(0 + 134221284 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 134221284 | 0 | 0) | 0;
  $427((HEAP32[((HEAP32[(0 + 134221368 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 134221368 | 0 | 0) | 0;
  $425((HEAP32[((HEAP32[(0 + 134221284 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 134221284 | 0 | 0, 134221116 | 0) | 0;
  $426((HEAP32[((HEAP32[(0 + 134221368 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 134221368 | 0 | 0, 134221200 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $415($0_1) {
  $0_1 = $0_1 | 0;
  $416(134221620 | 0) | 0;
 }
 
 function $416($0_1) {
  $0_1 = $0_1 | 0;
  $315(134221116 | 0) | 0;
  $338(134221200 | 0) | 0;
  $315(134221452 | 0) | 0;
  $338(134221536 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $417($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $268($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 134225692;
  $1_1 = $208() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  $428($3_1 + 8 | 0 | 0, $4_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $3_1 + 8 | 0);
  $579($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $418($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $429($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134224896;
  HEAP32[$2_1 >> 2] = 134224916;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $430($0_1 + (HEAP32[(0 + 134224884 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $419($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $290($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 134225832;
  $1_1 = $302() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  $431($3_1 + 8 | 0 | 0, $4_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $3_1 + 8 | 0);
  $579($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $420($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $432($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134224944;
  HEAP32[$2_1 >> 2] = 134224964;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $433($0_1 + (HEAP32[(0 + 134224932 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $421($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $268($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 134225932;
  $428($3_1 + 8 | 0 | 0, $4_1 | 0);
  $1_1 = $434($3_1 + 8 | 0 | 0) | 0;
  $579($3_1 + 8 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $435($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $422($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $429($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134224992;
  HEAP32[$2_1 >> 2] = 134225012;
  $430($0_1 + (HEAP32[(0 + 134224980 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $423($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $290($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 134226036;
  $431($3_1 + 8 | 0 | 0, $4_1 | 0);
  $1_1 = $436($3_1 + 8 | 0 | 0) | 0;
  $579($3_1 + 8 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $437($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $424($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $432($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134225040;
  HEAP32[$2_1 >> 2] = 134225060;
  $433($0_1 + (HEAP32[(0 + 134225028 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $425($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $426($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $427($0_1) {
  $0_1 = $0_1 | 0;
  $438($0_1 | 0, 8192 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $428($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1170($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  $450($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134225128;
  return $0_1 | 0;
 }
 
 function $430($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $384($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = $208() | 0;
 }
 
 function $431($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1170($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $432($0_1) {
  $0_1 = $0_1 | 0;
  $450($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134225200;
  return $0_1 | 0;
 }
 
 function $433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $384($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = $302() | 0;
 }
 
 function $434($0_1) {
  $0_1 = $0_1 | 0;
  return $584($0_1 | 0, 134222272 | 0) | 0 | 0;
 }
 
 function $435($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $436($0_1) {
  $0_1 = $0_1 | 0;
  return $584($0_1 | 0, 134222280 | 0) | 0 | 0;
 }
 
 function $437($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $438($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 | $1_1 | 0;
  return $2_1 | 0;
 }
 
 function $439($0_1) {
  $0_1 = $0_1 | 0;
  $266($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $440($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $434($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $441($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $435(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break label$1
   }
   $819(134225784 | 0);
   abort();
  }
 }
 
 function $441($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $442($0_1) {
  $0_1 = $0_1 | 0;
  return $443($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $443($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $208() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break label$1;
   }
   HEAP32[($2_1 + 24 | 0) >> 2] = 1;
   $4_1 = HEAP32[($447($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
   $3_1 = 0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : while (1) {
        if (($3_1 | 0) >= ($4_1 | 0)) {
         break label$6
        }
        $5_1 = $407(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
        if (($5_1 | 0) == (-1 | 0)) {
         break label$5
        }
        HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $5_1;
        $3_1 = $3_1 + 1 | 0;
        continue label$7;
       };
      }
      label$8 : {
       label$9 : {
        if (!(HEAPU8[($0_1 + 53 | 0) >> 0] | 0)) {
         break label$9
        }
        HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
        break label$8;
       }
       $6_1 = ($2_1 + 23 | 0) + 1 | 0;
       label$10 : while (1) {
        $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        $5_1 = ($2_1 + 24 | 0) + $4_1 | 0;
        $3_1 = ($448(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $5_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 23 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0;
        if ($3_1 >>> 0 > 2 >>> 0) {
         break label$8
        }
        label$11 : {
         switch ($3_1 | 0) {
         default:
          i64toi32_i32$1 = $7$hi;
          i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $7_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          if (($4_1 | 0) == (8 | 0)) {
           break label$5
          }
          $3_1 = $407(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
          if (($3_1 | 0) == (-1 | 0)) {
           break label$5
          }
          HEAP8[$5_1 >> 0] = $3_1;
          $4_1 = $4_1 + 1 | 0;
          continue label$10;
         case 2:
          break label$11;
         case 1:
          break label$5;
         };
        }
        break label$10;
       };
       HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
      }
      if ($1_1) {
       break label$4
      }
      label$13 : while (1) {
       if (($4_1 | 0) < (1 | 0)) {
        break label$3
       }
       $4_1 = $4_1 + -1 | 0;
       if (($405($284(HEAP8[(($2_1 + 24 | 0) + $4_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
        continue label$13
       }
       break label$13;
      };
     }
     $3_1 = $208() | 0;
     break label$1;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = $284(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
   }
   $3_1 = $284(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $444($0_1) {
  $0_1 = $0_1 | 0;
  return $443($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $445($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $209($1_1 | 0, $208() | 0 | 0) | 0;
  $4_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $3_1 = $1_1;
    if ($4_1 & 255 | 0) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($209($3_1 | 0, $208() | 0 | 0) | 0) ^ 1 | 0;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 255 | 0)) {
     break label$3
    }
    HEAP8[($2_1 + 19 | 0) >> 0] = $280(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    label$4 : {
     label$5 : {
      label$6 : {
       $3_1 = ($446(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 19 | 0 | 0, $2_1 + 20 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0;
       if ($3_1 >>> 0 > 2 >>> 0) {
        break label$6
       }
       label$7 : {
        switch ($3_1 | 0) {
        case 2:
         break label$7;
        default:
         break label$5;
        };
       }
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $2_1 + 25 | 0;
       HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
      }
      label$8 : while (1) {
       label$9 : {
        $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        if ($3_1 >>> 0 > ($2_1 + 24 | 0) >>> 0) {
         break label$9
        }
        $4_1 = 1;
        break label$4;
       }
       $3_1 = $3_1 + -1 | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
       if (($405(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
        continue label$8
       }
       break label$8;
      };
     }
     $4_1 = 0;
     $3_1 = $208() | 0;
    }
    if (!$4_1) {
     break label$1
    }
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
   $3_1 = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $446($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $447($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $449($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $448($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $449($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $244($2_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $450($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 134225084;
  return $0_1 | 0;
 }
 
 function $451($0_1) {
  $0_1 = $0_1 | 0;
  $288($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $452($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $436($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $453($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $437(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break label$1
   }
   $819(134225784 | 0);
   abort();
  }
 }
 
 function $453($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $454($0_1) {
  $0_1 = $0_1 | 0;
  return $455($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $455($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $302() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break label$1;
   }
   HEAP32[($2_1 + 24 | 0) >> 2] = 1;
   $4_1 = HEAP32[($447($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
   $3_1 = 0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : while (1) {
        if (($3_1 | 0) >= ($4_1 | 0)) {
         break label$6
        }
        $5_1 = $407(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
        if (($5_1 | 0) == (-1 | 0)) {
         break label$5
        }
        HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $5_1;
        $3_1 = $3_1 + 1 | 0;
        continue label$7;
       };
      }
      label$8 : {
       label$9 : {
        if (!(HEAPU8[($0_1 + 53 | 0) >> 0] | 0)) {
         break label$9
        }
        HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
        break label$8;
       }
       $6_1 = $2_1 + 24 | 0;
       label$10 : while (1) {
        $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        $5_1 = ($2_1 + 24 | 0) + $4_1 | 0;
        $3_1 = ($459(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $5_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0;
        if ($3_1 >>> 0 > 2 >>> 0) {
         break label$8
        }
        label$11 : {
         switch ($3_1 | 0) {
         default:
          i64toi32_i32$1 = $7$hi;
          i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $7_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          if (($4_1 | 0) == (8 | 0)) {
           break label$5
          }
          $3_1 = $407(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
          if (($3_1 | 0) == (-1 | 0)) {
           break label$5
          }
          HEAP8[$5_1 >> 0] = $3_1;
          $4_1 = $4_1 + 1 | 0;
          continue label$10;
         case 2:
          break label$11;
         case 1:
          break label$5;
         };
        }
        break label$10;
       };
       HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
      }
      if ($1_1) {
       break label$4
      }
      label$13 : while (1) {
       if (($4_1 | 0) < (1 | 0)) {
        break label$3
       }
       $4_1 = $4_1 + -1 | 0;
       if (($405($304(HEAP8[(($2_1 + 24 | 0) + $4_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
        continue label$13
       }
       break label$13;
      };
     }
     $3_1 = $302() | 0;
     break label$1;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = $304(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   }
   $3_1 = $304(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $456($0_1) {
  $0_1 = $0_1 | 0;
  return $455($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $457($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $354($1_1 | 0, $302() | 0 | 0) | 0;
  $4_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $3_1 = $1_1;
    if ($4_1 & 255 | 0) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($354($3_1 | 0, $302() | 0 | 0) | 0) ^ 1 | 0;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 255 | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = $300(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    label$4 : {
     label$5 : {
      label$6 : {
       $3_1 = ($458(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0;
       if ($3_1 >>> 0 > 2 >>> 0) {
        break label$6
       }
       label$7 : {
        switch ($3_1 | 0) {
        case 2:
         break label$7;
        default:
         break label$5;
        };
       }
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $2_1 + 25 | 0;
       HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
      }
      label$8 : while (1) {
       label$9 : {
        $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        if ($3_1 >>> 0 > ($2_1 + 24 | 0) >>> 0) {
         break label$9
        }
        $4_1 = 1;
        break label$4;
       }
       $3_1 = $3_1 + -1 | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
       if (($405(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
        continue label$8
       }
       break label$8;
      };
     }
     $4_1 = 0;
     $3_1 = $302() | 0;
    }
    if (!$4_1) {
     break label$1
    }
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
   $3_1 = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $458($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $459($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $460($0_1) {
  $0_1 = $0_1 | 0;
  $266($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $461($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1) | 0;
  $1_1 = $434($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $435($1_1 | 0) | 0;
 }
 
 function $462($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $5_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $463(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($410($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break label$1
    }
    label$3 : {
     $5_1 = $3_1 + -1 | 0;
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     switch ($5_1 | 0) {
     case 1:
      break label$1;
     default:
      continue label$2;
     };
    }
    break label$2;
   };
   $4_1 = $411(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $463($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $464($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$2
    }
    $3_1 = 0;
    label$3 : while (1) {
     if (($3_1 | 0) >= ($2_1 | 0)) {
      break label$1
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $284(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($208() | 0 | 0)) {
      break label$1
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$3;
    };
   }
   $3_1 = $410($1_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $465($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($209($1_1 | 0, $208() | 0 | 0) | 0) {
      break label$3
     }
     HEAP8[($2_1 + 23 | 0) >> 0] = $280($1_1 | 0) | 0;
     label$4 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$4
      }
      if (($410($2_1 + 23 | 0 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
       break label$3
      }
      break label$2;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $3_1 = $2_1 + 32 | 0;
     $4_1 = ($2_1 + 23 | 0) + 1 | 0;
     $5_1 = $2_1 + 23 | 0;
     label$5 : while (1) {
      $6_1 = $446(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $3_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
       break label$2
      }
      label$6 : {
       if (($6_1 | 0) != (3 | 0)) {
        break label$6
       }
       if (($410($5_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0)) {
        break label$2
       }
       break label$3;
      }
      if ($6_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $5_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($410($2_1 + 24 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
       break label$2
      }
      $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($6_1 | 0) == (1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $0_1 = $466($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $208() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $466($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($209($0_1 | 0, $208() | 0 | 0) | 0)) {
    break label$1
   }
   $0_1 = ($208() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $467($0_1) {
  $0_1 = $0_1 | 0;
  $288($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $468($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1) | 0;
  $1_1 = $436($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $437($1_1 | 0) | 0;
 }
 
 function $469($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $5_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $470(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($410($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break label$1
    }
    label$3 : {
     $5_1 = $3_1 + -1 | 0;
     if ($5_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     switch ($5_1 | 0) {
     case 1:
      break label$1;
     default:
      continue label$2;
     };
    }
    break label$2;
   };
   $4_1 = $411(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $470($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $471($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$2
    }
    $3_1 = 0;
    label$3 : while (1) {
     if (($3_1 | 0) >= ($2_1 | 0)) {
      break label$1
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $304(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($302() | 0 | 0)) {
      break label$1
     }
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$3;
    };
   }
   $3_1 = $410($1_1 | 0, 4 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $472($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($354($1_1 | 0, $302() | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $300($1_1 | 0) | 0;
     label$4 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$4
      }
      if (($410($2_1 + 20 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
       break label$3
      }
      break label$2;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $3_1 = $2_1 + 32 | 0;
     $4_1 = $2_1 + 24 | 0;
     $5_1 = $2_1 + 20 | 0;
     label$5 : while (1) {
      $6_1 = $458(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $3_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
       break label$2
      }
      label$6 : {
       if (($6_1 | 0) != (3 | 0)) {
        break label$6
       }
       if (($410($5_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0)) {
        break label$2
       }
       break label$3;
      }
      if ($6_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $5_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($410($2_1 + 24 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
       break label$2
      }
      $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($6_1 | 0) == (1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $0_1 = $473($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $302() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $473($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($354($0_1 | 0, $302() | 0 | 0) | 0)) {
    break label$1
   }
   $0_1 = ($302() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $474() {
  $413();
 }
 
 function $475() {
  
 }
 
 function $476($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  label$1 : {
   if (($0_1 | 0) == (32 | 0)) {
    break label$1
   }
   $1_1 = ($0_1 + -9 | 0) >>> 0 < 5 >>> 0;
  }
  return $1_1 | 0;
 }
 
 function $477($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$2 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2_1 - $3_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1_1 | $1$hi | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $11_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $12_1 = 0
     } else {
      $12_1 = 1
     }
     $13_1 = $12_1;
    } else {
     $13_1 = 0
    }
    $11_1 = $13_1;
   }
   if ($11_1) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   HEAP32[($0_1 + 104 | 0) >> 2] = $3_1 + $1_1 | 0;
   return;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
 }
 
 function $478($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $4$hi = 0, i64toi32_i32$4 = 0, $3_1 = 0, $4_1 = 0, $1_1 = 0, $2_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $28_1 = 0, $10$hi = 0, $27_1 = 0, $27$hi = 0, $35_1 = 0, $35$hi = 0, $47_1 = 0, $49_1 = 0, $49$hi = 0, $56_1 = 0, $56$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $22_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $23_1 = 0
       } else {
        $23_1 = 1
       }
       $24_1 = $23_1;
      } else {
       $24_1 = 0
      }
      $22_1 = $24_1;
     }
     if ($22_1) {
      break label$2
     }
    }
    $1_1 = $406($0_1 | 0) | 0;
    if (($1_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$1 = $27$hi;
    i64toi32_i32$2 = $27_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = $2_1 - $3_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
    $35_1 = i64toi32_i32$0;
    $35$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$0 = $35$hi;
    i64toi32_i32$2 = $35_1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $25_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       $26_1 = 0
      } else {
       $26_1 = 1
      }
      $28_1 = $26_1;
     } else {
      $28_1 = 0
     }
     $25_1 = $28_1;
    }
    if ($25_1) {
     break label$5
    }
    i64toi32_i32$3 = $4$hi;
    HEAP32[($0_1 + 104 | 0) >> 2] = $3_1 + $4_1 | 0;
    break label$4;
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
  }
  label$6 : {
   label$7 : {
    if ($2_1) {
     break label$7
    }
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    break label$6;
   }
   $47_1 = $0_1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $49_1 = i64toi32_i32$3;
   $49$hi = i64toi32_i32$5;
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$3 = ($2_1 - $3_1 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $56_1 = i64toi32_i32$3;
   $56$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $49$hi;
   i64toi32_i32$2 = $49_1;
   i64toi32_i32$3 = $56$hi;
   i64toi32_i32$0 = $56_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$2 = $47_1;
   HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$8 : {
   $0_1 = $3_1 + -1 | 0;
   if (($1_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
    break label$8
   }
   HEAP8[$0_1 >> 0] = $1_1;
  }
  return $1_1 | 0;
 }
 
 function $479($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $480($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $479($0_1 | 0) | 0 | 0;
 }
 
 function $481($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $8$hi = 0, $8_1 = 0, $9$hi = 0, $6_1 = 0, $9_1 = 0, $10$hi = 0, $10_1 = 0, $11$hi = 0, $5_1 = 0, $11_1 = 0, $12$hi = 0, $12_1 = 0, $7_1 = 0, $32_1 = 0, $33_1 = 0, $163_1 = 0, $163$hi = 0, $193_1 = 0, $193$hi = 0, $255_1 = 0, $255$hi = 0, $419$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if ($1_1 >>> 0 > 36 >>> 0) {
        break label$5
       }
       label$6 : while (1) {
        label$7 : {
         label$8 : {
          $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($4_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$8
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
          $4_1 = HEAPU8[$4_1 >> 0] | 0;
          break label$7;
         }
         $4_1 = $478($0_1 | 0) | 0;
        }
        if ($476($4_1 | 0) | 0) {
         continue label$6
        }
        break label$6;
       };
       $5_1 = 0;
       label$9 : {
        $6_1 = $4_1 + -43 | 0;
        if ($6_1 >>> 0 > 2 >>> 0) {
         break label$9
        }
        label$10 : {
         switch ($6_1 | 0) {
         case 1:
          break label$9;
         default:
          break label$10;
         };
        }
        $5_1 = ($4_1 | 0) == (45 | 0) ? -1 : 0;
        label$11 : {
         $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($4_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$11
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
         $4_1 = HEAPU8[$4_1 >> 0] | 0;
         break label$9;
        }
        $4_1 = $478($0_1 | 0) | 0;
       }
       label$12 : {
        label$13 : {
         if ($1_1 & -17 | 0) {
          break label$13
         }
         if (($4_1 | 0) != (48 | 0)) {
          break label$13
         }
         label$14 : {
          label$15 : {
           $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($4_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$15
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
           $4_1 = HEAPU8[$4_1 >> 0] | 0;
           break label$14;
          }
          $4_1 = $478($0_1 | 0) | 0;
         }
         label$16 : {
          if (($4_1 | 32 | 0 | 0) != (120 | 0)) {
           break label$16
          }
          label$17 : {
           label$18 : {
            $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($4_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$18
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
            $4_1 = HEAPU8[$4_1 >> 0] | 0;
            break label$17;
           }
           $4_1 = $478($0_1 | 0) | 0;
          }
          $1_1 = 16;
          if ((HEAPU8[($4_1 + 134226145 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
           break label$4
          }
          label$19 : {
           $4_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
           if (!$4_1) {
            break label$19
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          label$20 : {
           if (!$2_1) {
            break label$20
           }
           i64toi32_i32$0 = 0;
           $8_1 = 0;
           $8$hi = i64toi32_i32$0;
           if (!$4_1) {
            break label$1
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$1 = 0;
           i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
           return i64toi32_i32$1 | 0;
          }
          i64toi32_i32$1 = 0;
          $477($0_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
          i64toi32_i32$1 = 0;
          i64toi32_i32$0 = 0;
          i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
          return i64toi32_i32$0 | 0;
         }
         if ($1_1) {
          break label$12
         }
         $1_1 = 8;
         break label$4;
        }
        $1_1 = $1_1 ? $1_1 : 10;
        if ($1_1 >>> 0 > (HEAPU8[($4_1 + 134226145 | 0) >> 0] | 0) >>> 0) {
         break label$12
        }
        label$21 : {
         if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
          break label$21
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$0 = 0;
        $477($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
        HEAP32[($392() | 0) >> 2] = 22;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
        return i64toi32_i32$1 | 0;
       }
       if (($1_1 | 0) != (10 | 0)) {
        break label$4
       }
       i64toi32_i32$1 = 0;
       $8_1 = 0;
       $8$hi = i64toi32_i32$1;
       $2_1 = $4_1 + -48 | 0;
       if ($2_1 >>> 0 > 9 >>> 0) {
        break label$2
       }
       $1_1 = 0;
       label$22 : while (1) {
        $1_1 = Math_imul($1_1, 10);
        label$23 : {
         label$24 : {
          $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($4_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$24
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
          $4_1 = HEAPU8[$4_1 >> 0] | 0;
          break label$23;
         }
         $4_1 = $478($0_1 | 0) | 0;
        }
        $1_1 = $1_1 + $2_1 | 0;
        label$25 : {
         $2_1 = $4_1 + -48 | 0;
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$25
         }
         if ($1_1 >>> 0 < 429496729 >>> 0) {
          continue label$22
         }
        }
        break label$22;
       };
       i64toi32_i32$1 = 0;
       $8_1 = $1_1;
       $8$hi = i64toi32_i32$1;
       if ($2_1 >>> 0 > 9 >>> 0) {
        break label$2
       }
       $1_1 = 10;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$0 = 0;
       i64toi32_i32$0 = __wasm_i64_mul($8_1 | 0, i64toi32_i32$1 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $9_1 = i64toi32_i32$0;
       $9$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $2_1;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = -1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
       $163_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
       $163$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$2 = $163$hi;
       i64toi32_i32$3 = $163_1;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
        break label$3
       }
       label$26 : while (1) {
        label$27 : {
         label$28 : {
          $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($4_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$28
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
          $4_1 = HEAPU8[$4_1 >> 0] | 0;
          break label$27;
         }
         $4_1 = $478($0_1 | 0) | 0;
        }
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$1 = $9$hi;
        i64toi32_i32$3 = $9_1;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$2 = $10_1;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $8_1 = i64toi32_i32$4;
        $8$hi = i64toi32_i32$5;
        label$29 : {
         $2_1 = $4_1 + -48 | 0;
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$29
         }
         i64toi32_i32$5 = $8$hi;
         i64toi32_i32$1 = $8_1;
         i64toi32_i32$3 = 429496729;
         i64toi32_i32$2 = -1717986918;
         if (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
          break label$29
         }
         i64toi32_i32$1 = $8$hi;
         i64toi32_i32$5 = 0;
         i64toi32_i32$5 = __wasm_i64_mul($8_1 | 0, i64toi32_i32$1 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
         $9_1 = i64toi32_i32$5;
         $9$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $2_1;
         i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
         $10_1 = i64toi32_i32$5;
         $10$hi = i64toi32_i32$1;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -1;
         i64toi32_i32$3 = -1;
         i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
         $193_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
         $193$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $9$hi;
         i64toi32_i32$1 = $9_1;
         i64toi32_i32$2 = $193$hi;
         i64toi32_i32$3 = $193_1;
         if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
          break label$3
         }
         continue label$26;
        }
        break label$26;
       };
       if ($2_1 >>> 0 <= 9 >>> 0) {
        break label$3
       }
       break label$2;
      }
      HEAP32[($392() | 0) >> 2] = 22;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$5 | 0;
     }
     label$30 : {
      if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
       break label$30
      }
      i64toi32_i32$5 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$5;
      label$31 : {
       $2_1 = HEAPU8[($4_1 + 134226145 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$31
       }
       $6_1 = 0;
       label$32 : while (1) {
        $6_1 = $2_1 + Math_imul($6_1, $1_1) | 0;
        label$33 : {
         label$34 : {
          $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($4_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$34
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
          $4_1 = HEAPU8[$4_1 >> 0] | 0;
          break label$33;
         }
         $4_1 = $478($0_1 | 0) | 0;
        }
        $2_1 = HEAPU8[($4_1 + 134226145 | 0) >> 0] | 0;
        label$35 : {
         if ($6_1 >>> 0 > 119304646 >>> 0) {
          break label$35
         }
         if ($1_1 >>> 0 > $2_1 >>> 0) {
          continue label$32
         }
        }
        break label$32;
       };
       i64toi32_i32$5 = 0;
       $8_1 = $6_1;
       $8$hi = i64toi32_i32$5;
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$3
      }
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = 0;
      $11_1 = $1_1;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$5 = -1;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = __wasm_i64_udiv(-1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $12_1 = i64toi32_i32$1;
      $12$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$3 = $8_1;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$2 = $12_1;
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
       break label$3
      }
      label$36 : while (1) {
       i64toi32_i32$3 = $8$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $8$hi;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$5 = __wasm_i64_mul($8_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $9_1 = i64toi32_i32$5;
       $9$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 255;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $10_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       $10$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $10_1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$1 = -1;
       i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
       $255_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $255$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $9$hi;
       i64toi32_i32$5 = $9_1;
       i64toi32_i32$3 = $255$hi;
       i64toi32_i32$1 = $255_1;
       if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
        break label$3
       }
       label$37 : {
        label$38 : {
         $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($4_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$38
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
         $4_1 = HEAPU8[$4_1 >> 0] | 0;
         break label$37;
        }
        $4_1 = $478($0_1 | 0) | 0;
       }
       i64toi32_i32$5 = $9$hi;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$5 = $9$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$2 = $10$hi;
       i64toi32_i32$3 = $10_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $8_1 = i64toi32_i32$0;
       $8$hi = i64toi32_i32$4;
       $2_1 = HEAPU8[($4_1 + 134226145 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$3
       }
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$4 = $12$hi;
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$5 = $8_1;
       i64toi32_i32$1 = $12$hi;
       i64toi32_i32$3 = $12_1;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
        continue label$36
       }
       break label$3;
      };
     }
     $7_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 134226401 | 0) >> 0] | 0;
     i64toi32_i32$5 = 0;
     $8_1 = 0;
     $8$hi = i64toi32_i32$5;
     label$39 : {
      $2_1 = HEAPU8[($4_1 + 134226145 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$39
      }
      $6_1 = 0;
      label$40 : while (1) {
       $6_1 = $2_1 | ($6_1 << $7_1 | 0) | 0;
       label$41 : {
        label$42 : {
         $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($4_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$42
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
         $4_1 = HEAPU8[$4_1 >> 0] | 0;
         break label$41;
        }
        $4_1 = $478($0_1 | 0) | 0;
       }
       $2_1 = HEAPU8[($4_1 + 134226145 | 0) >> 0] | 0;
       label$43 : {
        if ($6_1 >>> 0 > 134217727 >>> 0) {
         break label$43
        }
        if ($1_1 >>> 0 > $2_1 >>> 0) {
         continue label$40
        }
       }
       break label$40;
      };
      i64toi32_i32$5 = 0;
      $8_1 = $6_1;
      $8$hi = i64toi32_i32$5;
     }
     if ($1_1 >>> 0 <= $2_1 >>> 0) {
      break label$3
     }
     i64toi32_i32$5 = 0;
     $10_1 = $7_1;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $32_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $32_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $11_1 = $32_1;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$1 = $8_1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     label$44 : while (1) {
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$1 = $8_1;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
       $33_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
       $33_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      }
      $8_1 = $33_1;
      $8$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 255;
      i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
      $9_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $9$hi = i64toi32_i32$1;
      label$45 : {
       label$46 : {
        $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($4_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$46
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
        $4_1 = HEAPU8[$4_1 >> 0] | 0;
        break label$45;
       }
       $4_1 = $478($0_1 | 0) | 0;
      }
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$3 = $9_1;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $8_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      $8$hi = i64toi32_i32$5;
      $2_1 = HEAPU8[($4_1 + 134226145 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$3
      }
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$1 = $8_1;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$3 = $11_1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
       continue label$44
      }
      break label$44;
     };
    }
    if ($1_1 >>> 0 <= (HEAPU8[($4_1 + 134226145 | 0) >> 0] | 0) >>> 0) {
     break label$2
    }
    label$47 : while (1) {
     label$48 : {
      label$49 : {
       $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if ($4_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$49
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
       $4_1 = HEAPU8[$4_1 >> 0] | 0;
       break label$48;
      }
      $4_1 = $478($0_1 | 0) | 0;
     }
     if ($1_1 >>> 0 > (HEAPU8[($4_1 + 134226145 | 0) >> 0] | 0) >>> 0) {
      continue label$47
     }
     break label$47;
    };
    HEAP32[($392() | 0) >> 2] = 34;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $5_1 = !(i64toi32_i32$3 & i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0) ? $5_1 : 0;
    i64toi32_i32$5 = i64toi32_i32$1;
    $8_1 = i64toi32_i32$3;
    $8$hi = i64toi32_i32$5;
   }
   label$50 : {
    if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
     break label$50
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   label$51 : {
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$4 = $3_1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0) {
     break label$51
    }
    label$52 : {
     i64toi32_i32$1 = $3$hi;
     if ($3_1 & 1 | 0) {
      break label$52
     }
     if ($5_1) {
      break label$52
     }
     HEAP32[($392() | 0) >> 2] = 34;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
     return i64toi32_i32$4 | 0;
    }
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$51
    }
    HEAP32[($392() | 0) >> 2] = 34;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$4 | 0;
   }
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
   $9_1 = i64toi32_i32$1;
   $9$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$3 = $8_1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
   $419$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$1 = $419$hi;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$3 = $9$hi;
   i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
   i64toi32_i32$2 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
   $8_1 = i64toi32_i32$5;
   $8$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$4 = $8_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$4 | 0;
 }
 
 function $482() {
  return 134238744 | 0;
 }
 
 function $483($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $3_1 ? $3_1 : 134222040;
  $3_1 = HEAP32[$5_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      $6_1 = 0;
      break label$1;
     }
     $6_1 = -2;
     if (!$2_1) {
      break label$1
     }
     $7_1 = $0_1 ? $0_1 : $4_1 + 12 | 0;
     label$5 : {
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $0_1 = $2_1;
       break label$5;
      }
      label$7 : {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       $0_1 = ($3_1 << 24 | 0) >> 24 | 0;
       if (($0_1 | 0) < (0 | 0)) {
        break label$7
       }
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = ($0_1 | 0) != (0 | 0);
       break label$1;
      }
      $3_1 = HEAP32[(HEAP32[(($484() | 0) + 188 | 0) >> 2] | 0) >> 2] | 0;
      $0_1 = HEAP8[$1_1 >> 0] | 0;
      label$8 : {
       if ($3_1) {
        break label$8
       }
       HEAP32[$7_1 >> 2] = $0_1 & 57343 | 0;
       $6_1 = 1;
       break label$1;
      }
      $3_1 = ($0_1 & 255 | 0) + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3_1 = HEAP32[(($3_1 << 2 | 0) + 134226416 | 0) >> 2] | 0;
      $0_1 = $2_1 + -1 | 0;
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $8_1 = HEAPU8[$1_1 >> 0] | 0;
     $9_1 = $8_1 >>> 3 | 0;
     if (($9_1 + -16 | 0 | (($3_1 >> 26 | 0) + $9_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$9 : while (1) {
      $0_1 = $0_1 + -1 | 0;
      label$10 : {
       $3_1 = ($8_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$10
       }
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = $2_1 - $0_1 | 0;
       break label$1;
      }
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
      $8_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) == (128 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[($392() | 0) >> 2] = 84;
    $6_1 = -1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $484() {
  return $482() | 0 | 0;
 }
 
 function $485($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $486($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $487($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$4 = 0, $21_1 = 0, $73_1 = 0, $74_1 = 0, $74$hi = 0, $75_1 = 0, $75$hi = 0, $79$hi = 0, $83_1 = 0, $86_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $1671($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     $5_1 = $3_1 + -16383 | 0;
     if (($5_1 | 0) >= (16384 | 0)) {
      break label$3
     }
     $3_1 = $5_1;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $1671($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   $1671($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    $5_1 = $3_1 + 16382 | 0;
    if (($5_1 | 0) <= (-16383 | 0)) {
     break label$4
    }
    $3_1 = $5_1;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   $1671($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-49146 | 0) ? $3_1 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $73_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $74_1 = $1_1;
  $74$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $75_1 = $2_1;
  $75$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $21_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $21_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $79$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $74$hi;
  i64toi32_i32$2 = $75$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $79$hi;
  $1671($73_1 | 0, $74_1 | 0, i64toi32_i32$1 | 0, $75_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $21_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $83_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $86_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $488($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $8_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $10_1 = 0, $12_1 = 0, $12$hi = 0, $11_1 = 0, $11$hi = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $11_1 = 0;
  $11$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 134226700 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 134226688 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $478($1_1 | 0) | 0;
     }
     if ($476($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    label$6 : {
     label$7 : {
      $8_1 = $2_1 + -43 | 0;
      if ($8_1 >>> 0 <= 2 >>> 0) {
       break label$7
      }
      $9_1 = 1;
      break label$6;
     }
     $9_1 = 1;
     label$8 : {
      switch ($8_1 | 0) {
      case 1:
       break label$6;
      default:
       break label$8;
      };
     }
     $9_1 = 1 - ((($2_1 | 0) == (45 | 0)) << 1 | 0) | 0;
     label$9 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $478($1_1 | 0) | 0;
    }
    $8_1 = 0;
    label$10 : {
     label$11 : {
      label$12 : {
       label$13 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($8_1 + 134226620 | 0) >> 0] | 0 | 0)) {
         break label$12
        }
        label$14 : {
         if ($8_1 >>> 0 > 6 >>> 0) {
          break label$14
         }
         label$15 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$15
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$14;
         }
         $2_1 = $478($1_1 | 0) | 0;
        }
        $8_1 = $8_1 + 1 | 0;
        if (($8_1 | 0) != (8 | 0)) {
         continue label$13
        }
        break label$11;
       };
      }
      $10_1 = 3;
      label$16 : {
       if (($8_1 | 0) == (3 | 0)) {
        break label$16
       }
       if (!$3_1) {
        break label$10
       }
       if ($8_1 >>> 0 < 4 >>> 0) {
        break label$10
       }
       $10_1 = $8_1;
       if (($8_1 | 0) == (8 | 0)) {
        break label$11
       }
      }
      label$17 : {
       $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$17
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$11
      }
      if ($10_1 >>> 0 < 4 >>> 0) {
       break label$11
      }
      label$18 : while (1) {
       label$19 : {
        if (!$1_1) {
         break label$19
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $10_1 = $10_1 + -1 | 0;
       if ($10_1 >>> 0 > 3 >>> 0) {
        continue label$18
       }
       break label$18;
      };
     }
     $1667($4_1 | 0, Math_fround(Math_fround(Math_fround($9_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$0;
     break label$1;
    }
    label$20 : {
     label$21 : {
      label$22 : {
       if ($8_1) {
        break label$22
       }
       $8_1 = 0;
       label$23 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($8_1 + 134226629 | 0) >> 0] | 0 | 0)) {
         break label$22
        }
        label$24 : {
         if ($8_1 >>> 0 > 1 >>> 0) {
          break label$24
         }
         label$25 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$25
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$24;
         }
         $2_1 = $478($1_1 | 0) | 0;
        }
        $8_1 = $8_1 + 1 | 0;
        if (($8_1 | 0) != (3 | 0)) {
         continue label$23
        }
        break label$21;
       };
      }
      label$26 : {
       label$27 : {
        if ($8_1 >>> 0 > 3 >>> 0) {
         break label$27
        }
        switch ($8_1 | 0) {
        case 3:
         break label$21;
        case 1:
        case 2:
         break label$27;
        default:
         break label$26;
        };
       }
       label$28 : {
        if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
         break label$28
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       HEAP32[($392() | 0) >> 2] = 22;
       break label$20;
      }
      label$29 : {
       if (($2_1 | 0) != (48 | 0)) {
        break label$29
       }
       label$30 : {
        label$31 : {
         $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         if ($8_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$31
         }
         HEAP32[$5_1 >> 2] = $8_1 + 1 | 0;
         $8_1 = HEAPU8[$8_1 >> 0] | 0;
         break label$30;
        }
        $8_1 = $478($1_1 | 0) | 0;
       }
       label$32 : {
        if (($8_1 | 32 | 0 | 0) != (120 | 0)) {
         break label$32
        }
        $489($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $9_1 | 0, $3_1 | 0);
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
        $12_1 = i64toi32_i32$0;
        $12$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$1;
        $11$hi = i64toi32_i32$0;
        break label$1;
       }
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$29
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      $490($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $9_1 | 0, $3_1 | 0);
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
      $12_1 = i64toi32_i32$0;
      $12$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$0;
      break label$1;
     }
     label$33 : {
      label$34 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$34
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$33;
      }
      $2_1 = $478($1_1 | 0) | 0;
     }
     label$35 : {
      label$36 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$36
       }
       $8_1 = 1;
       break label$35;
      }
      i64toi32_i32$0 = 2147450880;
      $12_1 = 0;
      $12$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$37 : while (1) {
      label$38 : {
       label$39 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$39
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$38;
       }
       $2_1 = $478($1_1 | 0) | 0;
      }
      $10_1 = $2_1 + -65 | 0;
      label$40 : {
       label$41 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$41
        }
        if ($10_1 >>> 0 < 26 >>> 0) {
         break label$41
        }
        $10_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$41
        }
        if ($10_1 >>> 0 >= 26 >>> 0) {
         break label$40
        }
       }
       $8_1 = $8_1 + 1 | 0;
       continue label$37;
      }
      break label$37;
     };
     i64toi32_i32$0 = 2147450880;
     $12_1 = 0;
     $12$hi = i64toi32_i32$0;
     if (($2_1 | 0) == (41 | 0)) {
      break label$1
     }
     label$42 : {
      $2_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$42
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$43 : {
      if (!$3_1) {
       break label$43
      }
      if (!$8_1) {
       break label$1
      }
      label$44 : while (1) {
       $8_1 = $8_1 + -1 | 0;
       label$45 : {
        if (!$2_1) {
         break label$45
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       if ($8_1) {
        continue label$44
       }
       break label$1;
      };
     }
     HEAP32[($392() | 0) >> 2] = 22;
    }
    i64toi32_i32$0 = 0;
    $11_1 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $477($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $12_1 = 0;
   $12$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $489($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $15$hi = 0, $16_1 = 0, $19_1 = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $14_1 = 0, $18$hi = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $20_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $105_1 = 0, $106_1 = 0, $107_1 = 0, $108_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $133_1 = 0, $133$hi = 0, $137_1 = 0, $137$hi = 0, $142_1 = 0, $142$hi = 0, $146_1 = 0, $146$hi = 0, $164_1 = 0, $164$hi = 0, $168_1 = 0, $168$hi = 0, $275$hi = 0, $282_1 = 0, $282$hi = 0, $290_1 = 0, $290$hi = 0, $294_1 = 0, $294$hi = 0, $298_1 = 0, $298$hi = 0, $302_1 = 0, $302$hi = 0, $313_1 = 0, $313$hi = 0, $330_1 = 0, $330$hi = 0, $334_1 = 0, $334$hi = 0, $339_1 = 0, $339$hi = 0, $341_1 = 0, $341$hi = 0, $359$hi = 0, $364$hi = 0, $386_1 = 0, $386$hi = 0, $390_1 = 0, $390$hi = 0, $394_1 = 0, $394$hi = 0, $398_1 = 0, $398$hi = 0, $417_1 = 0, $417$hi = 0, $421_1 = 0, $421$hi = 0, $455_1 = 0, $455$hi = 0, $459_1 = 0, $459$hi = 0, $464_1 = 0, $464$hi = 0, $467_1 = 0, $467$hi = 0, $475_1 = 0, $475$hi = 0, $479_1 = 0, $479$hi = 0, $483_1 = 0, $483$hi = 0, $487_1 = 0, $487$hi = 0, $489_1 = 0, $489$hi = 0, $493_1 = 0, $493$hi = 0, $497_1 = 0, $497$hi = 0, $501_1 = 0, $501$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $478($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $7_1 = $478($1_1 | 0) | 0;
      $9_1 = 1;
      continue label$6;
     };
    }
    $7_1 = $478($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$10;
     }
     $7_1 = $478($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : while (1) {
    $12_1 = $7_1 | 32 | 0;
    label$14 : {
     label$15 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break label$15
      }
      label$16 : {
       if (($7_1 | 0) == (46 | 0)) {
        break label$16
       }
       if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
        break label$12
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break label$15
      }
      if ($8_1) {
       break label$12
      }
      $8_1 = 1;
      i64toi32_i32$5 = $19$hi;
      $14_1 = $19_1;
      $14$hi = i64toi32_i32$5;
      break label$14;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     label$17 : {
      label$18 : {
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $105_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $106_1 = 0
         } else {
          $106_1 = 1
         }
         $107_1 = $106_1;
        } else {
         $107_1 = 0
        }
        $105_1 = $107_1;
       }
       if ($105_1) {
        break label$18
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break label$17;
      }
      label$19 : {
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
        $108_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $109_1 = 0
         } else {
          $109_1 = 1
         }
         $110_1 = $109_1;
        } else {
         $110_1 = 0
        }
        $108_1 = $110_1;
       }
       if ($108_1) {
        break label$19
       }
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $1671($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       $1668($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $133_1 = i64toi32_i32$5;
       $133$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $137_1 = i64toi32_i32$2;
       $137$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$2 = $15$hi;
       i64toi32_i32$0 = $133$hi;
       i64toi32_i32$3 = $137$hi;
       $1671($6_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $133_1 | 0, i64toi32_i32$0 | 0, $137_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
       $142_1 = i64toi32_i32$3;
       $142$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $146_1 = i64toi32_i32$0;
       $146$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = $142$hi;
       i64toi32_i32$5 = $146$hi;
       $1659($6_1 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $142_1 | 0, i64toi32_i32$2 | 0, $146_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
       break label$17;
      }
      if ($11_1) {
       break label$17
      }
      if (!$7_1) {
       break label$17
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $1671($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
      $164_1 = i64toi32_i32$3;
      $164$hi = i64toi32_i32$0;
      i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $168_1 = i64toi32_i32$0;
      $168$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$2 = $164$hi;
      i64toi32_i32$5 = $168$hi;
      $1659($6_1 + 64 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $164_1 | 0, i64toi32_i32$2 | 0, $168_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    label$20 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$20
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label$13;
    }
    $7_1 = $478($1_1 | 0) | 0;
    continue label$13;
   };
  }
  label$21 : {
   label$22 : {
    if ($9_1) {
     break label$22
    }
    label$23 : {
     $7_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$23
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$24 : {
     label$25 : {
      if (!$5_1) {
       break label$25
      }
      if (!$7_1) {
       break label$24
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      if (!$8_1) {
       break label$24
      }
      if (!$7_1) {
       break label$24
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      break label$24;
     }
     i64toi32_i32$4 = 0;
     $477($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    }
    $1666($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
    i64toi32_i32$5 = $6_1 + 104 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$4;
    break label$21;
   }
   label$26 : {
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 7;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
     $111_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $112_1 = 0
      } else {
       $112_1 = 1
      }
      $113_1 = $112_1;
     } else {
      $113_1 = 0
     }
     $111_1 = $113_1;
    }
    if ($111_1) {
     break label$26
    }
    i64toi32_i32$5 = $19$hi;
    $15_1 = $19_1;
    $15$hi = i64toi32_i32$5;
    label$27 : while (1) {
     $10_1 = $10_1 << 4 | 0;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $15_1 = i64toi32_i32$2;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 8;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
      continue label$27
     }
     break label$27;
    };
   }
   label$28 : {
    label$29 : {
     if (($7_1 | 32 | 0 | 0) != (112 | 0)) {
      break label$29
     }
     i64toi32_i32$5 = $491($1_1 | 0, $5_1 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $15_1 = i64toi32_i32$5;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$5 = -2147483648;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$28
     }
     label$30 : {
      if (!$5_1) {
       break label$30
      }
      i64toi32_i32$0 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$28
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      break label$28;
     }
     i64toi32_i32$0 = 0;
     $16_1 = 0;
     $16$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $477($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
     i64toi32_i32$0 = 0;
     $19_1 = 0;
     $19$hi = i64toi32_i32$0;
     break label$21;
    }
    i64toi32_i32$0 = 0;
    $15_1 = 0;
    $15$hi = i64toi32_i32$0;
    if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
     break label$28
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   label$31 : {
    if ($10_1) {
     break label$31
    }
    $1666($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
    i64toi32_i32$3 = $6_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$0;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$0;
    break label$21;
   }
   label$32 : {
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$4 = $8_1;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $14_1 : $19_1;
    i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 2;
    i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $114_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $114_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $275$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$5 = $275$hi;
    i64toi32_i32$3 = $114_1;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$0 = $15_1;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$0 = -32;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = 0 - $3_1 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $282_1 = i64toi32_i32$5;
    $282$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$5 = $282$hi;
    i64toi32_i32$0 = $282_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
     $115_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
       $116_1 = 0
      } else {
       $116_1 = 1
      }
      $117_1 = $116_1;
     } else {
      $117_1 = 0
     }
     $115_1 = $117_1;
    }
    if ($115_1) {
     break label$32
    }
    $1668($6_1 + 160 | 0 | 0, $4_1 | 0);
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
    $290_1 = i64toi32_i32$2;
    $290$hi = i64toi32_i32$1;
    i64toi32_i32$0 = (i64toi32_i32$0 + 160 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $294_1 = i64toi32_i32$1;
    $294$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $290$hi;
    i64toi32_i32$1 = $294$hi;
    i64toi32_i32$0 = -1;
    i64toi32_i32$5 = 2147418111;
    $1671($6_1 + 144 | 0 | 0, $290_1 | 0, i64toi32_i32$2 | 0, $294_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$5 = HEAP32[($6_1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($6_1 + 148 | 0) >> 2] | 0;
    $298_1 = i64toi32_i32$5;
    $298$hi = i64toi32_i32$0;
    i64toi32_i32$1 = ($6_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $302_1 = i64toi32_i32$0;
    $302$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $298$hi;
    i64toi32_i32$0 = $302$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $1671($6_1 + 128 | 0 | 0, $298_1 | 0, i64toi32_i32$5 | 0, $302_1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    HEAP32[($392() | 0) >> 2] = 34;
    i64toi32_i32$0 = ($6_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$2;
    break label$21;
   }
   label$33 : {
    label$34 : {
     label$35 : {
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$1 = $3_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $313_1 = i64toi32_i32$1;
      $313$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$1 = $313$hi;
      i64toi32_i32$5 = $313_1;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $118_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $119_1 = 0
        } else {
         $119_1 = 1
        }
        $120_1 = $119_1;
       } else {
        $120_1 = 0
       }
       $118_1 = $120_1;
      }
      if ($118_1) {
       break label$35
      }
      label$36 : {
       if (($10_1 | 0) <= (-1 | 0)) {
        break label$36
       }
       label$37 : while (1) {
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = -1073807360;
        $1659($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1073610752;
        $7_1 = $1662($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $330_1 = i64toi32_i32$0;
        $330$hi = i64toi32_i32$2;
        $1_1 = ($7_1 | 0) < (0 | 0);
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $330$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ? $16_1 : $330_1;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
        $334_1 = i64toi32_i32$1;
        $334$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$3 = ($6_1 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $339_1 = i64toi32_i32$5;
        $339$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$5 = $339$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $17_1 : $339_1;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
        $341_1 = i64toi32_i32$2;
        $341$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $334$hi;
        i64toi32_i32$1 = $341$hi;
        $1659($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $334_1 | 0, i64toi32_i32$0 | 0, $341_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$2 = $19_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19_1 = i64toi32_i32$5;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$4;
        $17$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6_1;
        i64toi32_i32$2 = HEAP32[($6_1 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[($6_1 + 404 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$4;
        $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
        if (($10_1 | 0) > (-1 | 0)) {
         continue label$37
        }
        break label$37;
       };
      }
      label$38 : {
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
       $359$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$1 = $19_1;
       i64toi32_i32$2 = $359$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $14_1 = i64toi32_i32$2;
       $14$hi = i64toi32_i32$0;
       i64toi32_i32$4 = $2_1;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $364$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $14$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$4 = $364$hi;
       i64toi32_i32$3 = $2_1;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$4 | 0)) {
        $121_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
          $122_1 = 0
         } else {
          $122_1 = 1
         }
         $123_1 = $122_1;
        } else {
         $123_1 = 0
        }
        $121_1 = $123_1;
       }
       if ($121_1) {
        break label$38
       }
       i64toi32_i32$5 = $14$hi;
       $2_1 = $14_1;
       if (($14_1 | 0) >= (1 | 0)) {
        break label$38
       }
       $2_1 = 0;
       break label$34;
      }
      if (($2_1 | 0) < (113 | 0)) {
       break label$34
      }
      $1668($6_1 + 384 | 0 | 0, $4_1 | 0);
      i64toi32_i32$3 = $6_1 + 392 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $20_1 = 0;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
      $14_1 = i64toi32_i32$0;
      $14$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $18_1 = 0;
      $18$hi = i64toi32_i32$5;
      break label$33;
     }
     $1668($6_1 + 208 | 0 | 0, $4_1 | 0);
     i64toi32_i32$3 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 208 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 212 | 0) >> 2] | 0;
     $386_1 = i64toi32_i32$5;
     $386$hi = i64toi32_i32$0;
     i64toi32_i32$3 = (i64toi32_i32$3 + 208 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $390_1 = i64toi32_i32$0;
     $390$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $386$hi;
     i64toi32_i32$0 = $390$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 65536;
     $1671($6_1 + 192 | 0 | 0, $386_1 | 0, i64toi32_i32$5 | 0, $390_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 192 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 196 | 0) >> 2] | 0;
     $394_1 = i64toi32_i32$4;
     $394$hi = i64toi32_i32$3;
     i64toi32_i32$0 = (i64toi32_i32$0 + 192 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $398_1 = i64toi32_i32$3;
     $398$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $394$hi;
     i64toi32_i32$3 = $398$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 65536;
     $1671($6_1 + 176 | 0 | 0, $394_1 | 0, i64toi32_i32$4 | 0, $398_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0);
     HEAP32[($392() | 0) >> 2] = 34;
     i64toi32_i32$3 = ($6_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $6_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 180 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$5;
     break label$21;
    }
    $1668($6_1 + 336 | 0 | 0, $4_1 | 0);
    $1666($6_1 + 352 | 0 | 0, +(+$1677(+(1.0), 144 - $2_1 | 0 | 0)));
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
    $417_1 = i64toi32_i32$5;
    $417$hi = i64toi32_i32$0;
    i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $421_1 = i64toi32_i32$0;
    $421$hi = i64toi32_i32$5;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
    $14_1 = i64toi32_i32$5;
    $14$hi = i64toi32_i32$0;
    i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$0;
    $15$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $417$hi;
    i64toi32_i32$0 = $421$hi;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$4 = $15$hi;
    $486($6_1 + 368 | 0 | 0, $417_1 | 0, i64toi32_i32$5 | 0, $421_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 376 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 380 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$3;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 368 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$3;
    $20$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $16$hi;
   i64toi32_i32$4 = $17$hi;
   i64toi32_i32$4 = $16$hi;
   i64toi32_i32$3 = $17$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   $7_1 = !($10_1 & 1 | 0) & (($1664($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) & ($2_1 | 0) < (32 | 0) | 0) | 0;
   $1669($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $15$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
   $455_1 = i64toi32_i32$5;
   $455$hi = i64toi32_i32$0;
   i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $459_1 = i64toi32_i32$0;
   $459$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$3 = $455$hi;
   i64toi32_i32$4 = $459$hi;
   $1671($6_1 + 304 | 0 | 0, $14_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $455_1 | 0, i64toi32_i32$3 | 0, $459_1 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = $16$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $16_1;
   i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$4 : i64toi32_i32$3;
   $464_1 = i64toi32_i32$5;
   $464$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = $17$hi;
   i64toi32_i32$4 = i64toi32_i32$3 ? 0 : $17_1;
   i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$0 : i64toi32_i32$5;
   $467_1 = i64toi32_i32$4;
   $467$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$1 = $464$hi;
   i64toi32_i32$4 = $467$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$0 = $15$hi;
   $1671($6_1 + 288 | 0 | 0, $464_1 | 0, i64toi32_i32$1 | 0, $467_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$0 = $18$hi;
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$0 = HEAP32[($6_1 + 304 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($6_1 + 308 | 0) >> 2] | 0;
   $475_1 = i64toi32_i32$0;
   $475$hi = i64toi32_i32$3;
   i64toi32_i32$4 = ($6_1 + 304 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $479_1 = i64toi32_i32$3;
   $479$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$4 = $475$hi;
   i64toi32_i32$1 = $479$hi;
   $1659($6_1 + 272 | 0 | 0, $20_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $475_1 | 0, i64toi32_i32$4 | 0, $479_1 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 288 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 292 | 0) >> 2] | 0;
   $483_1 = i64toi32_i32$1;
   $483$hi = i64toi32_i32$4;
   i64toi32_i32$3 = (i64toi32_i32$3 + 288 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $487_1 = i64toi32_i32$4;
   $487$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 272 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 276 | 0) >> 2] | 0;
   $489_1 = i64toi32_i32$1;
   $489$hi = i64toi32_i32$4;
   i64toi32_i32$3 = (i64toi32_i32$3 + 272 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $493_1 = i64toi32_i32$4;
   $493$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $483$hi;
   i64toi32_i32$4 = $487$hi;
   i64toi32_i32$3 = $489$hi;
   i64toi32_i32$0 = $493$hi;
   $1659($6_1 + 256 | 0 | 0, $483_1 | 0, i64toi32_i32$1 | 0, $487_1 | 0, i64toi32_i32$4 | 0, $489_1 | 0, i64toi32_i32$3 | 0, $493_1 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$0 = HEAP32[($6_1 + 256 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($6_1 + 260 | 0) >> 2] | 0;
   $497_1 = i64toi32_i32$0;
   $497$hi = i64toi32_i32$3;
   i64toi32_i32$4 = ($6_1 + 256 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $501_1 = i64toi32_i32$3;
   $501$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$0 = $18$hi;
   i64toi32_i32$0 = $497$hi;
   i64toi32_i32$3 = $501$hi;
   i64toi32_i32$4 = $20$hi;
   i64toi32_i32$1 = $18$hi;
   $1673($6_1 + 240 | 0 | 0, $497_1 | 0, i64toi32_i32$0 | 0, $501_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$1 | 0);
   label$39 : {
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 240 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 244 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$4;
    i64toi32_i32$3 = (i64toi32_i32$3 + 240 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $17_1 = i64toi32_i32$4;
    $17$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    if ($1664($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0) {
     break label$39
    }
    HEAP32[($392() | 0) >> 2] = 34;
   }
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$3 = $17$hi;
   $487($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0);
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$3 = HEAP32[($6_1 + 232 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($6_1 + 236 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$3;
   $19$hi = i64toi32_i32$0;
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$0 = HEAP32[($6_1 + 224 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($6_1 + 228 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $16$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $19$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $490($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $20$hi = 0, $20_1 = 0, $12_1 = 0, $21$hi = 0, $11_1 = 0, $21_1 = 0, $8_1 = 0, $15_1 = 0, i64toi32_i32$0 = 0, $14_1 = 0, $23$hi = 0, $16_1 = 0, $22$hi = 0, $23_1 = 0, $22_1 = 0, $13_1 = 0, $18_1 = 0, $17_1 = 0, $24$hi = 0, $25$hi = 0, $24_1 = 0, $25_1 = 0, $9_1 = 0, $162_1 = 0, $163_1 = 0, $164_1 = 0, $165_1 = 0, $166_1 = 0, $167_1 = 0, $168_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $19_1 = 0, $26_1 = 0.0, $10_1 = 0, $128_1 = 0, $233_1 = 0, $233$hi = 0, $237_1 = 0, $237$hi = 0, $239_1 = 0, $239$hi = 0, $243_1 = 0, $243$hi = 0, $253_1 = 0, $253$hi = 0, $261_1 = 0, $261$hi = 0, $265_1 = 0, $265$hi = 0, $269_1 = 0, $269$hi = 0, $273_1 = 0, $273$hi = 0, $284_1 = 0, $284$hi = 0, $292_1 = 0, $292$hi = 0, $296_1 = 0, $296$hi = 0, $300_1 = 0, $300$hi = 0, $304_1 = 0, $304$hi = 0, $354_1 = 0, $354$hi = 0, $358_1 = 0, $358$hi = 0, $360_1 = 0, $360$hi = 0, $364_1 = 0, $364$hi = 0, $383_1 = 0, $383$hi = 0, $387_1 = 0, $387$hi = 0, $389_1 = 0, $389$hi = 0, $393_1 = 0, $393$hi = 0, $404_1 = 0, $404$hi = 0, $408_1 = 0, $408$hi = 0, $410_1 = 0, $410$hi = 0, $414_1 = 0, $414$hi = 0, $442_1 = 0, $442$hi = 0, $446_1 = 0, $446$hi = 0, $448_1 = 0, $448$hi = 0, $452_1 = 0, $452$hi = 0, $462_1 = 0, $462$hi = 0, $466_1 = 0, $466$hi = 0, $468_1 = 0, $468$hi = 0, $472_1 = 0, $472$hi = 0, $501_1 = 0, $579$hi = 0, $581$hi = 0, $589_1 = 0, $589$hi = 0, $730_1 = 0, $730$hi = 0, $734_1 = 0, $734$hi = 0, $736_1 = 0, $736$hi = 0, $740_1 = 0, $740$hi = 0, $759_1 = 0, $759$hi = 0, $763_1 = 0, $763$hi = 0, $805_1 = 0, $866_1 = 0, $866$hi = 0, $870_1 = 0, $870$hi = 0, $887_1 = 0, $887$hi = 0, $891_1 = 0, $891$hi = 0, $907_1 = 0, $907$hi = 0, $911_1 = 0, $911$hi = 0, $948_1 = 0, $948$hi = 0, $952_1 = 0, $952$hi = 0, $971_1 = 0, $971$hi = 0, $975_1 = 0, $975$hi = 0, $998_1 = 0, $998$hi = 0, $1002_1 = 0, $1002$hi = 0, $1018_1 = 0, $1018$hi = 0, $1022_1 = 0, $1022$hi = 0, $1036_1 = 0, $1036$hi = 0, $1038_1 = 0, $1038$hi = 0, $1058_1 = 0, $1058$hi = 0, $1062_1 = 0, $1062$hi = 0;
  $7_1 = global$0 - 8960 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = $4_1 + $3_1 | 0;
  $10_1 = 0 - $9_1 | 0;
  i64toi32_i32$0 = 0;
  $20_1 = 0;
  $20$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $12_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($12_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $12_1 + 1 | 0;
       $2_1 = HEAPU8[$12_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $12_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($12_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $12_1 + 1 | 0;
       $2_1 = HEAPU8[$12_1 >> 0] | 0;
       continue label$4;
      }
      $2_1 = $478($1_1 | 0) | 0;
      $11_1 = 1;
      continue label$4;
     };
    }
    $2_1 = $478($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $20_1 = 0;
   $20$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $12_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($12_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $12_1 + 1 | 0;
      $2_1 = HEAPU8[$12_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $478($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $20$hi;
    i64toi32_i32$0 = $20$hi;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = $20$hi + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $11_1 = 1;
   $8_1 = 1;
  }
  $13_1 = 0;
  HEAP32[($7_1 + 768 | 0) >> 2] = 0;
  $14_1 = $2_1 + -48 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         $15_1 = ($2_1 | 0) == (46 | 0);
         if ($15_1) {
          break label$16
         }
         i64toi32_i32$5 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$5;
         if ($14_1 >>> 0 <= 9 >>> 0) {
          break label$16
         }
         $12_1 = 0;
         $16_1 = 0;
         break label$15;
        }
        i64toi32_i32$5 = 0;
        $21_1 = 0;
        $21$hi = i64toi32_i32$5;
        $16_1 = 0;
        $12_1 = 0;
        $13_1 = 0;
        label$17 : while (1) {
         label$18 : {
          label$19 : {
           if (!($15_1 & 1 | 0)) {
            break label$19
           }
           label$20 : {
            if ($8_1) {
             break label$20
            }
            i64toi32_i32$5 = $21$hi;
            $20_1 = $21_1;
            $20$hi = i64toi32_i32$5;
            $8_1 = 1;
            break label$18;
           }
           $11_1 = ($11_1 | 0) != (0 | 0);
           break label$14;
          }
          i64toi32_i32$5 = $21$hi;
          i64toi32_i32$0 = $21_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = $21_1 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $21_1 = i64toi32_i32$1;
          $21$hi = i64toi32_i32$4;
          label$21 : {
           if (($12_1 | 0) > (2044 | 0)) {
            break label$21
           }
           $15_1 = ($2_1 | 0) != (48 | 0);
           i64toi32_i32$4 = $21$hi;
           $17_1 = $21_1;
           $11_1 = ($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0;
           label$22 : {
            if (!$16_1) {
             break label$22
            }
            $14_1 = ($2_1 + Math_imul(HEAP32[$11_1 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           $13_1 = $15_1 ? $17_1 : $13_1;
           HEAP32[$11_1 >> 2] = $14_1;
           $11_1 = 1;
           $2_1 = $16_1 + 1 | 0;
           $128_1 = $2_1;
           $2_1 = ($2_1 | 0) == (9 | 0);
           $16_1 = $2_1 ? 0 : $128_1;
           $12_1 = $12_1 + $2_1 | 0;
           break label$18;
          }
          if (($2_1 | 0) == (48 | 0)) {
           break label$18
          }
          HEAP32[($7_1 + 8944 | 0) >> 2] = HEAP32[($7_1 + 8944 | 0) >> 2] | 0 | 1 | 0;
         }
         label$23 : {
          label$24 : {
           $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$24
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
           $2_1 = HEAPU8[$2_1 >> 0] | 0;
           break label$23;
          }
          $2_1 = $478($1_1 | 0) | 0;
         }
         $14_1 = $2_1 + -48 | 0;
         $15_1 = ($2_1 | 0) == (46 | 0);
         if ($15_1) {
          continue label$17
         }
         if ($14_1 >>> 0 < 10 >>> 0) {
          continue label$17
         }
         break label$17;
        };
       }
       i64toi32_i32$4 = $20$hi;
       i64toi32_i32$4 = $21$hi;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$4 = $20$hi;
       i64toi32_i32$0 = $21$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $20_1 : $21_1;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : $21$hi;
       $20_1 = i64toi32_i32$3;
       $20$hi = i64toi32_i32$5;
       label$25 : {
        if (!$11_1) {
         break label$25
        }
        if (($2_1 | 32 | 0 | 0) != (101 | 0)) {
         break label$25
        }
        label$26 : {
         i64toi32_i32$5 = $491($1_1 | 0, $6_1 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $22_1 = i64toi32_i32$5;
         $22$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$26
         }
         if (!$6_1) {
          break label$12
         }
         i64toi32_i32$2 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$2;
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$26
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$2 = $22$hi;
        i64toi32_i32$2 = $20$hi;
        i64toi32_i32$2 = $22$hi;
        i64toi32_i32$4 = $22_1;
        i64toi32_i32$3 = $20$hi;
        i64toi32_i32$5 = $20_1;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $20_1 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$1;
        break label$11;
       }
       $11_1 = ($11_1 | 0) != (0 | 0);
       if (($2_1 | 0) < (0 | 0)) {
        break label$13
       }
      }
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$13
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if ($11_1) {
      break label$11
     }
     HEAP32[($392() | 0) >> 2] = 22;
    }
    i64toi32_i32$1 = 0;
    $21_1 = 0;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $477($1_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $20_1 = 0;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$27 : {
    $1_1 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
    if ($1_1) {
     break label$27
    }
    $1666($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$1;
    break label$10;
   }
   label$28 : {
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$2 = $21_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
     $162_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $163_1 = 0
      } else {
       $163_1 = 1
      }
      $164_1 = $163_1;
     } else {
      $164_1 = 0
     }
     $162_1 = $164_1;
    }
    if ($162_1) {
     break label$28
    }
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$5 = $20_1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$4 = $21_1;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$28
    }
    label$29 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$29
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$28
     }
    }
    $1669($7_1 + 32 | 0 | 0, $1_1 | 0);
    $1668($7_1 + 48 | 0 | 0, $5_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
    $233_1 = i64toi32_i32$5;
    $233$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $237_1 = i64toi32_i32$2;
    $237$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
    $239_1 = i64toi32_i32$5;
    $239$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $243_1 = i64toi32_i32$2;
    $243$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $233$hi;
    i64toi32_i32$2 = $237$hi;
    i64toi32_i32$4 = $239$hi;
    i64toi32_i32$1 = $243$hi;
    $1671($7_1 + 16 | 0 | 0, $233_1 | 0, i64toi32_i32$5 | 0, $237_1 | 0, i64toi32_i32$2 | 0, $239_1 | 0, i64toi32_i32$4 | 0, $243_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$1;
    break label$10;
   }
   label$30 : {
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$4 = ($4_1 | 0) / (-2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
    $253_1 = i64toi32_i32$4;
    $253$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$4 = $253$hi;
    i64toi32_i32$5 = $253_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $165_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $166_1 = 0
      } else {
       $166_1 = 1
      }
      $167_1 = $166_1;
     } else {
      $167_1 = 0
     }
     $165_1 = $167_1;
    }
    if ($165_1) {
     break label$30
    }
    $1668($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 100 | 0) >> 2] | 0;
    $261_1 = i64toi32_i32$2;
    $261$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $265_1 = i64toi32_i32$1;
    $265$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $261$hi;
    i64toi32_i32$1 = $265$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = 2147418111;
    $1671($7_1 + 80 | 0 | 0, $261_1 | 0, i64toi32_i32$2 | 0, $265_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $269_1 = i64toi32_i32$4;
    $269$hi = i64toi32_i32$5;
    i64toi32_i32$1 = (i64toi32_i32$1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $273_1 = i64toi32_i32$5;
    $273$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $269$hi;
    i64toi32_i32$5 = $273$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $1671($7_1 + 64 | 0 | 0, $269_1 | 0, i64toi32_i32$4 | 0, $273_1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    HEAP32[($392() | 0) >> 2] = 34;
    i64toi32_i32$5 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$2;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$2;
    break label$10;
   }
   label$31 : {
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$1 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $284_1 = i64toi32_i32$1;
    $284$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$5 = $20_1;
    i64toi32_i32$1 = $284$hi;
    i64toi32_i32$4 = $284_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $168_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       $169_1 = 0
      } else {
       $169_1 = 1
      }
      $170_1 = $169_1;
     } else {
      $170_1 = 0
     }
     $168_1 = $170_1;
    }
    if ($168_1) {
     break label$31
    }
    $1668($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 148 | 0) >> 2] | 0;
    $292_1 = i64toi32_i32$5;
    $292$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $296_1 = i64toi32_i32$2;
    $296$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $292$hi;
    i64toi32_i32$2 = $296$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 65536;
    $1671($7_1 + 128 | 0 | 0, $292_1 | 0, i64toi32_i32$5 | 0, $296_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $300_1 = i64toi32_i32$1;
    $300$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $304_1 = i64toi32_i32$4;
    $304$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $300$hi;
    i64toi32_i32$4 = $304$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    $1671($7_1 + 112 | 0 | 0, $300_1 | 0, i64toi32_i32$1 | 0, $304_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    HEAP32[($392() | 0) >> 2] = 34;
    i64toi32_i32$4 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$5;
    $20$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 116 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$2;
    $21$hi = i64toi32_i32$5;
    break label$10;
   }
   label$32 : {
    if (!$16_1) {
     break label$32
    }
    label$33 : {
     if (($16_1 | 0) > (8 | 0)) {
      break label$33
     }
     $2_1 = ($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$34 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $12_1 = $12_1 + 1 | 0;
   }
   i64toi32_i32$5 = $20$hi;
   $8_1 = $20_1;
   label$35 : {
    if (($13_1 | 0) > (8 | 0)) {
     break label$35
    }
    if (($13_1 | 0) > ($8_1 | 0)) {
     break label$35
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$35
    }
    label$36 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$36
     }
     $1669($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 768 | 0) >> 2] | 0 | 0);
     $1668($7_1 + 192 | 0 | 0, $5_1 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
     $354_1 = i64toi32_i32$5;
     $354$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $358_1 = i64toi32_i32$2;
     $358$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
     $360_1 = i64toi32_i32$5;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $364_1 = i64toi32_i32$2;
     $364$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $354$hi;
     i64toi32_i32$2 = $358$hi;
     i64toi32_i32$4 = $360$hi;
     i64toi32_i32$1 = $364$hi;
     $1671($7_1 + 160 | 0 | 0, $354_1 | 0, i64toi32_i32$5 | 0, $358_1 | 0, i64toi32_i32$2 | 0, $360_1 | 0, i64toi32_i32$4 | 0, $364_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$1;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$4;
     $21$hi = i64toi32_i32$1;
     break label$10;
    }
    label$37 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$37
     }
     $1669($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 768 | 0) >> 2] | 0 | 0);
     $1668($7_1 + 272 | 0 | 0, $5_1 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $383_1 = i64toi32_i32$1;
     $383$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $387_1 = i64toi32_i32$4;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $389_1 = i64toi32_i32$1;
     $389$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $393_1 = i64toi32_i32$4;
     $393$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $383$hi;
     i64toi32_i32$4 = $387$hi;
     i64toi32_i32$2 = $389$hi;
     i64toi32_i32$5 = $393$hi;
     $1671($7_1 + 240 | 0 | 0, $383_1 | 0, i64toi32_i32$1 | 0, $387_1 | 0, i64toi32_i32$4 | 0, $389_1 | 0, i64toi32_i32$2 | 0, $393_1 | 0, i64toi32_i32$5 | 0);
     $1668($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 134226656 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 244 | 0) >> 2] | 0;
     $404_1 = i64toi32_i32$5;
     $404$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $408_1 = i64toi32_i32$2;
     $408$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
     $410_1 = i64toi32_i32$5;
     $410$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $414_1 = i64toi32_i32$2;
     $414$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $404$hi;
     i64toi32_i32$2 = $408$hi;
     i64toi32_i32$4 = $410$hi;
     i64toi32_i32$1 = $414$hi;
     $1665($7_1 + 208 | 0 | 0, $404_1 | 0, i64toi32_i32$5 | 0, $408_1 | 0, i64toi32_i32$2 | 0, $410_1 | 0, i64toi32_i32$4 | 0, $414_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$1;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$4;
     $21$hi = i64toi32_i32$1;
     break label$10;
    }
    $1_1 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
    label$38 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$38
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$35
     }
    }
    $1669($7_1 + 336 | 0 | 0, $1_1 | 0);
    $1668($7_1 + 352 | 0 | 0, $5_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $442_1 = i64toi32_i32$1;
    $442$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $446_1 = i64toi32_i32$4;
    $446$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $448_1 = i64toi32_i32$1;
    $448$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $452_1 = i64toi32_i32$4;
    $452$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $442$hi;
    i64toi32_i32$4 = $446$hi;
    i64toi32_i32$2 = $448$hi;
    i64toi32_i32$5 = $452$hi;
    $1671($7_1 + 320 | 0 | 0, $442_1 | 0, i64toi32_i32$1 | 0, $446_1 | 0, i64toi32_i32$4 | 0, $448_1 | 0, i64toi32_i32$2 | 0, $452_1 | 0, i64toi32_i32$5 | 0);
    $1668($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 134226616 | 0) >> 2] | 0 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 324 | 0) >> 2] | 0;
    $462_1 = i64toi32_i32$5;
    $462$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $466_1 = i64toi32_i32$2;
    $466$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 308 | 0) >> 2] | 0;
    $468_1 = i64toi32_i32$5;
    $468$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $472_1 = i64toi32_i32$2;
    $472$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $462$hi;
    i64toi32_i32$2 = $466$hi;
    i64toi32_i32$4 = $468$hi;
    i64toi32_i32$1 = $472$hi;
    $1671($7_1 + 288 | 0 | 0, $462_1 | 0, i64toi32_i32$5 | 0, $466_1 | 0, i64toi32_i32$2 | 0, $468_1 | 0, i64toi32_i32$4 | 0, $472_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$1;
    break label$10;
   }
   $16_1 = 0;
   label$39 : {
    label$40 : {
     $1_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$40
     }
     $2_1 = 0;
     break label$39;
    }
    $18_1 = ($8_1 | 0) > (-1 | 0) ? $1_1 : $1_1 + 9 | 0;
    label$41 : {
     label$42 : {
      if ($12_1) {
       break label$42
      }
      $2_1 = 0;
      $12_1 = 0;
      break label$41;
     }
     $15_1 = HEAP32[(((8 - $18_1 | 0) << 2 | 0) + 134226656 | 0) >> 2] | 0;
     $6_1 = (1e9 | 0) / ($15_1 | 0) | 0;
     $11_1 = 0;
     $1_1 = 0;
     $2_1 = 0;
     label$43 : while (1) {
      $14_1 = ($7_1 + 768 | 0) + ($1_1 << 2 | 0) | 0;
      $501_1 = $14_1;
      $14_1 = HEAP32[$14_1 >> 2] | 0;
      $13_1 = ($14_1 >>> 0) / ($15_1 >>> 0) | 0;
      $11_1 = $13_1 + $11_1 | 0;
      HEAP32[$501_1 >> 2] = $11_1;
      $17_1 = ($1_1 | 0) == ($2_1 | 0);
      $1_1 = $1_1 + 1 | 0;
      $11_1 = $17_1 & !$11_1 | 0;
      $2_1 = $11_1 ? $1_1 & 2047 | 0 : $2_1;
      $8_1 = $11_1 ? $8_1 + -9 | 0 : $8_1;
      $11_1 = Math_imul($6_1, $14_1 - Math_imul($13_1, $15_1) | 0);
      if (($1_1 | 0) != ($12_1 | 0)) {
       continue label$43
      }
      break label$43;
     };
     if (!$11_1) {
      break label$41
     }
     HEAP32[(($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0) >> 2] = $11_1;
     $12_1 = $12_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $18_1 | 0) + 9 | 0;
   }
   label$44 : while (1) {
    $13_1 = ($7_1 + 768 | 0) + ($2_1 << 2 | 0) | 0;
    label$45 : {
     label$46 : while (1) {
      label$47 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$47
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$45
       }
       if ((HEAP32[$13_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$45
       }
      }
      $14_1 = $12_1 + 2047 | 0;
      $11_1 = 0;
      $15_1 = $12_1;
      label$48 : while (1) {
       $12_1 = $15_1;
       label$49 : {
        label$50 : {
         $1_1 = $14_1 & 2047 | 0;
         $15_1 = ($7_1 + 768 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $15_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $171_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $171_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $579$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $581$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $579$hi;
         i64toi32_i32$4 = $171_1;
         i64toi32_i32$2 = $581$hi;
         i64toi32_i32$5 = $11_1;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $20_1 = i64toi32_i32$3;
         $20$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $20$hi;
         i64toi32_i32$0 = $20$hi;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 1000000001;
         if ($20$hi >>> 0 > i64toi32_i32$4 >>> 0 | (($20$hi | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$50
         }
         $11_1 = 0;
         break label$49;
        }
        i64toi32_i32$1 = $20$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($20_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $21_1 = i64toi32_i32$0;
        $21$hi = i64toi32_i32$1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $589_1 = i64toi32_i32$0;
        $589$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $20$hi;
        i64toi32_i32$5 = $20_1;
        i64toi32_i32$0 = $589$hi;
        i64toi32_i32$4 = $589_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $20_1 = i64toi32_i32$2;
        $20$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $21$hi;
        $11_1 = $21_1;
       }
       i64toi32_i32$3 = $20$hi;
       $14_1 = $20_1;
       HEAP32[$15_1 >> 2] = $20_1;
       $15_1 = ($1_1 | 0) != (($12_1 + -1 | 0) & 2047 | 0 | 0) ? $12_1 : ($1_1 | 0) == ($2_1 | 0) ? $12_1 : $20_1 ? $12_1 : $1_1;
       $14_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($2_1 | 0)) {
        continue label$48
       }
       break label$48;
      };
      $16_1 = $16_1 + -29 | 0;
      if (!$11_1) {
       continue label$46
      }
      break label$46;
     };
     label$51 : {
      $2_1 = ($2_1 + -1 | 0) & 2047 | 0;
      if (($2_1 | 0) != ($15_1 | 0)) {
       break label$51
      }
      $1_1 = ($7_1 + 768 | 0) + ((($15_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $12_1 = ($15_1 + -1 | 0) & 2047 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 768 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $11_1;
     continue label$44;
    }
    break label$44;
   };
   label$52 : {
    label$53 : while (1) {
     $18_1 = ($12_1 + 1 | 0) & 2047 | 0;
     $19_1 = ($7_1 + 768 | 0) + ((($12_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$54 : while (1) {
      $14_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$55 : {
       label$56 : while (1) {
        $11_1 = $2_1;
        $1_1 = 0;
        label$57 : {
         label$58 : {
          label$59 : while (1) {
           $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($2_1 | 0) == ($12_1 | 0)) {
            break label$58
           }
           $2_1 = HEAP32[(($7_1 + 768 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0;
           $15_1 = HEAP32[(($1_1 << 2 | 0) + 134226640 | 0) >> 2] | 0;
           if ($2_1 >>> 0 < $15_1 >>> 0) {
            break label$58
           }
           if ($2_1 >>> 0 > $15_1 >>> 0) {
            break label$57
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$59
           }
           break label$59;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$57
         }
         i64toi32_i32$3 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$3;
         label$60 : while (1) {
          label$61 : {
           $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($2_1 | 0) != ($12_1 | 0)) {
            break label$61
           }
           $12_1 = ($12_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($12_1 << 2 | 0) + ($7_1 + 768 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $20$hi;
          i64toi32_i32$3 = $21$hi;
          i64toi32_i32$3 = $20$hi;
          i64toi32_i32$5 = $21$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1075633366;
          $1671($7_1 + 752 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
          $1669($7_1 + 736 | 0 | 0, HEAP32[(($7_1 + 768 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $730_1 = i64toi32_i32$4;
          $730$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $734_1 = i64toi32_i32$1;
          $734$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 736 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 740 | 0) >> 2] | 0;
          $736_1 = i64toi32_i32$4;
          $736$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $740_1 = i64toi32_i32$1;
          $740$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $730$hi;
          i64toi32_i32$1 = $734$hi;
          i64toi32_i32$5 = $736$hi;
          i64toi32_i32$3 = $740$hi;
          $1659($7_1 + 720 | 0 | 0, $730_1 | 0, i64toi32_i32$4 | 0, $734_1 | 0, i64toi32_i32$1 | 0, $736_1 | 0, i64toi32_i32$5 | 0, $740_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7_1 + 720 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $21_1 = i64toi32_i32$3;
          $21$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 720 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7_1 + 724 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$5;
          $20$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$60
          }
          break label$60;
         };
         $1668($7_1 + 704 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $20$hi;
         i64toi32_i32$3 = $21$hi;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $759_1 = i64toi32_i32$3;
         $759$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $763_1 = i64toi32_i32$5;
         $763$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $20$hi;
         i64toi32_i32$5 = $21$hi;
         i64toi32_i32$1 = $759$hi;
         i64toi32_i32$4 = $763$hi;
         $1671($7_1 + 688 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $759_1 | 0, i64toi32_i32$1 | 0, $763_1 | 0, i64toi32_i32$4 | 0);
         i64toi32_i32$5 = ($7_1 + 688 | 0) + 8 | 0;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $21_1 = i64toi32_i32$4;
         $21$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7_1;
         i64toi32_i32$1 = HEAP32[($7_1 + 688 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($7_1 + 692 | 0) >> 2] | 0;
         $22_1 = i64toi32_i32$1;
         $22$hi = i64toi32_i32$4;
         $15_1 = $16_1 + 113 | 0;
         $1_1 = $15_1 - $4_1 | 0;
         $14_1 = ($1_1 | 0) < ($3_1 | 0);
         $2_1 = $14_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($2_1 | 0) <= (112 | 0)) {
          break label$55
         }
         i64toi32_i32$4 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $24_1 = 0;
         $24$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $25_1 = 0;
         $25$hi = i64toi32_i32$4;
         break label$52;
        }
        $16_1 = $14_1 + $16_1 | 0;
        $2_1 = $12_1;
        if (($11_1 | 0) == ($2_1 | 0)) {
         continue label$56
        }
        break label$56;
       };
       $17_1 = 1e9 >>> $14_1 | 0;
       $6_1 = (-1 << $14_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $2_1 = $11_1;
       label$62 : while (1) {
        $15_1 = ($7_1 + 768 | 0) + ($11_1 << 2 | 0) | 0;
        $805_1 = $15_1;
        $15_1 = HEAP32[$15_1 >> 2] | 0;
        $1_1 = ($15_1 >>> $14_1 | 0) + $1_1 | 0;
        HEAP32[$805_1 >> 2] = $1_1;
        $13_1 = ($11_1 | 0) == ($2_1 | 0);
        $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
        $1_1 = $13_1 & !$1_1 | 0;
        $2_1 = $1_1 ? $11_1 : $2_1;
        $8_1 = $1_1 ? $8_1 + -9 | 0 : $8_1;
        $1_1 = Math_imul($15_1 & $6_1 | 0, $17_1);
        if (($11_1 | 0) != ($12_1 | 0)) {
         continue label$62
        }
        break label$62;
       };
       if (!$1_1) {
        continue label$54
       }
       label$63 : {
        if (($18_1 | 0) == ($2_1 | 0)) {
         break label$63
        }
        HEAP32[(($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0) >> 2] = $1_1;
        $12_1 = $18_1;
        continue label$53;
       }
       HEAP32[$19_1 >> 2] = HEAP32[$19_1 >> 2] | 0 | 1 | 0;
       $2_1 = $18_1;
       continue label$54;
      }
      break label$54;
     };
     break label$53;
    };
    $1666($7_1 + 640 | 0 | 0, +(+$1677(+(1.0), 225 - $2_1 | 0 | 0)));
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 640 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 644 | 0) >> 2] | 0;
    $866_1 = i64toi32_i32$4;
    $866$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 640 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $870_1 = i64toi32_i32$1;
    $870$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $866$hi;
    i64toi32_i32$1 = $870$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$3 = $21$hi;
    $486($7_1 + 672 | 0 | 0, $866_1 | 0, i64toi32_i32$4 | 0, $870_1 | 0, i64toi32_i32$1 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 684 | 0) >> 2] | 0;
    $25_1 = i64toi32_i32$3;
    $25$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$5;
    $24$hi = i64toi32_i32$3;
    $1666($7_1 + 624 | 0 | 0, +(+$1677(+(1.0), 113 - $2_1 | 0 | 0)));
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 628 | 0) >> 2] | 0;
    $887_1 = i64toi32_i32$3;
    $887$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $891_1 = i64toi32_i32$5;
    $891$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$1 = $887$hi;
    i64toi32_i32$4 = $891$hi;
    $1676($7_1 + 656 | 0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $887_1 | 0, i64toi32_i32$1 | 0, $891_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 664 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 668 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$1;
    $23$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$3 = $23$hi;
    $1673($7_1 + 608 | 0 | 0, $22_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $23_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $24$hi;
    i64toi32_i32$3 = $25$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $907_1 = i64toi32_i32$3;
    $907$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $911_1 = i64toi32_i32$5;
    $911$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $24$hi;
    i64toi32_i32$5 = $25$hi;
    i64toi32_i32$1 = $907$hi;
    i64toi32_i32$4 = $911$hi;
    $1659($7_1 + 592 | 0 | 0, $24_1 | 0, i64toi32_i32$3 | 0, $25_1 | 0, i64toi32_i32$5 | 0, $907_1 | 0, i64toi32_i32$1 | 0, $911_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($7_1 + 592 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 592 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 596 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$4;
   }
   label$64 : {
    $8_1 = ($11_1 + 4 | 0) & 2047 | 0;
    if (($8_1 | 0) == ($12_1 | 0)) {
     break label$64
    }
    label$65 : {
     label$66 : {
      $8_1 = HEAP32[(($7_1 + 768 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if ($8_1 >>> 0 > 499999999 >>> 0) {
       break label$66
      }
      label$67 : {
       if ($8_1) {
        break label$67
       }
       if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($12_1 | 0)) {
        break label$65
       }
      }
      $1666($7_1 + 480 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $23$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 480 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 484 | 0) >> 2] | 0;
      $948_1 = i64toi32_i32$4;
      $948$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $952_1 = i64toi32_i32$1;
      $952$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$5 = $948$hi;
      i64toi32_i32$3 = $952$hi;
      $1659($7_1 + 464 | 0 | 0, $20_1 | 0, i64toi32_i32$4 | 0, $23_1 | 0, i64toi32_i32$1 | 0, $948_1 | 0, i64toi32_i32$5 | 0, $952_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 464 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $23_1 = i64toi32_i32$3;
      $23$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 464 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 468 | 0) >> 2] | 0;
      $20_1 = i64toi32_i32$5;
      $20$hi = i64toi32_i32$3;
      break label$65;
     }
     label$68 : {
      if (($8_1 | 0) == (5e8 | 0)) {
       break label$68
      }
      $1666($7_1 + 576 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$3 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $971_1 = i64toi32_i32$3;
      $971$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $975_1 = i64toi32_i32$5;
      $975$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$5 = $23$hi;
      i64toi32_i32$1 = $971$hi;
      i64toi32_i32$4 = $975$hi;
      $1659($7_1 + 560 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $23_1 | 0, i64toi32_i32$5 | 0, $971_1 | 0, i64toi32_i32$1 | 0, $975_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$5 = ($7_1 + 560 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $23_1 = i64toi32_i32$4;
      $23$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 560 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 564 | 0) >> 2] | 0;
      $20_1 = i64toi32_i32$1;
      $20$hi = i64toi32_i32$4;
      break label$65;
     }
     $26_1 = +($5_1 | 0);
     label$69 : {
      if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($12_1 | 0)) {
       break label$69
      }
      $1666($7_1 + 512 | 0 | 0, +($26_1 * .5));
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $23$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 512 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 516 | 0) >> 2] | 0;
      $998_1 = i64toi32_i32$4;
      $998$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1002_1 = i64toi32_i32$1;
      $1002$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$5 = $998$hi;
      i64toi32_i32$3 = $1002$hi;
      $1659($7_1 + 496 | 0 | 0, $20_1 | 0, i64toi32_i32$4 | 0, $23_1 | 0, i64toi32_i32$1 | 0, $998_1 | 0, i64toi32_i32$5 | 0, $1002_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $23_1 = i64toi32_i32$3;
      $23$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $20_1 = i64toi32_i32$5;
      $20$hi = i64toi32_i32$3;
      break label$65;
     }
     $1666($7_1 + 544 | 0 | 0, +($26_1 * .75));
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $23$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $1018_1 = i64toi32_i32$3;
     $1018$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1022_1 = i64toi32_i32$5;
     $1022$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$1 = $1018$hi;
     i64toi32_i32$4 = $1022$hi;
     $1659($7_1 + 528 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $23_1 | 0, i64toi32_i32$5 | 0, $1018_1 | 0, i64toi32_i32$1 | 0, $1022_1 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = ($7_1 + 528 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $23_1 = i64toi32_i32$4;
     $23$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$1;
     $20$hi = i64toi32_i32$4;
    }
    if (($2_1 | 0) > (111 | 0)) {
     break label$64
    }
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $1676($7_1 + 448 | 0 | 0, $20_1 | 0, i64toi32_i32$4 | 0, $23_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 448 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
    $1036_1 = i64toi32_i32$3;
    $1036$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 456 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
    $1038_1 = i64toi32_i32$5;
    $1038$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1036$hi;
    i64toi32_i32$5 = $1038$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 0;
    if ($1664($1036_1 | 0, i64toi32_i32$3 | 0, $1038_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
     break label$64
    }
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $1659($7_1 + 432 | 0 | 0, $20_1 | 0, i64toi32_i32$4 | 0, $23_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1 + 440 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$3;
    $23$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$5;
    $20$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $23$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$5 = $21$hi;
   i64toi32_i32$1 = $20$hi;
   i64toi32_i32$4 = $23$hi;
   $1659($7_1 + 416 | 0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 420 | 0) >> 2] | 0;
   $1058_1 = i64toi32_i32$4;
   $1058$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1062_1 = i64toi32_i32$1;
   $1062$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $24$hi;
   i64toi32_i32$4 = $25$hi;
   i64toi32_i32$4 = $1058$hi;
   i64toi32_i32$1 = $1062$hi;
   i64toi32_i32$5 = $24$hi;
   i64toi32_i32$3 = $25$hi;
   $1673($7_1 + 400 | 0 | 0, $1058_1 | 0, i64toi32_i32$4 | 0, $1062_1 | 0, i64toi32_i32$1 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $25_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7_1 + 400 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$3;
   $21$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
   $22_1 = i64toi32_i32$5;
   $22$hi = i64toi32_i32$3;
   label$70 : {
    if (($15_1 & 2147483647 | 0 | 0) <= (-2 - $9_1 | 0 | 0)) {
     break label$70
    }
    label$71 : {
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$5 = $21$hi;
     if (+fimport$12(+(+$1674($22_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$5 | 0))) >= 1038459371706965525706099.0e10 ^ 1 | 0) {
      break label$71
     }
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 1073610752;
     $1671($7_1 + 384 | 0 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
     $14_1 = ($1_1 | 0) < ($3_1 | 0) & ($2_1 | 0) != ($1_1 | 0) | 0;
     $16_1 = $16_1 + 1 | 0;
     i64toi32_i32$3 = $7_1 + 392 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$4;
     $21$hi = i64toi32_i32$1;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$1;
     $22$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $1_1 = $1664($20_1 | 0, i64toi32_i32$4 | 0, $23_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    label$72 : {
     if (($16_1 + 110 | 0 | 0) > ($10_1 | 0)) {
      break label$72
     }
     if (!(($1_1 | 0) != (0 | 0) & $14_1 | 0)) {
      break label$70
     }
    }
    HEAP32[($392() | 0) >> 2] = 34;
   }
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$5 = $21$hi;
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   $487($7_1 + 368 | 0 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0);
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$3 = HEAP32[($7_1 + 376 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$3;
   $20$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $21$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $21_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $20$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $7_1 + 8960 | 0;
 }
 
 function $491($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $6_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $83$hi = 0, $85_1 = 0, $85$hi = 0, $134$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $478($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       $3_1 = $2_1 + -43 | 0;
       if ($3_1 >>> 0 > 2 >>> 0) {
        break label$7
       }
       label$8 : {
        switch ($3_1 | 0) {
        case 1:
         break label$7;
        default:
         break label$8;
        };
       }
       label$9 : {
        label$10 : {
         $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($3_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$10
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
         $4_1 = HEAPU8[$3_1 >> 0] | 0;
         break label$9;
        }
        $4_1 = $478($0_1 | 0) | 0;
       }
       $5_1 = ($2_1 | 0) == (45 | 0);
       $3_1 = $4_1 + -48 | 0;
       label$11 : {
        if ($1_1) {
         break label$11
        }
        $2_1 = $4_1;
        break label$6;
       }
       $2_1 = $4_1;
       if ($3_1 >>> 0 < 10 >>> 0) {
        break label$6
       }
       if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
        break label$5
       }
       i64toi32_i32$0 = -2147483648;
       i64toi32_i32$1 = 0;
       i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
       return i64toi32_i32$1 | 0;
      }
      $3_1 = $2_1 + -48 | 0;
      $5_1 = 0;
     }
     if ($3_1 >>> 0 >= 10 >>> 0) {
      break label$4
     }
     $3_1 = 0;
     label$12 : while (1) {
      $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
      label$13 : {
       label$14 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$14
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$13;
       }
       $2_1 = $478($0_1 | 0) | 0;
      }
      $3_1 = $3_1 + -48 | 0;
      label$15 : {
       $4_1 = $2_1 + -48 | 0;
       if ($4_1 >>> 0 > 9 >>> 0) {
        break label$15
       }
       if (($3_1 | 0) < (214748364 | 0)) {
        continue label$12
       }
      }
      break label$12;
     };
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $6_1 = i64toi32_i32$0;
     $6$hi = i64toi32_i32$1;
     label$16 : {
      if ($4_1 >>> 0 >= 10 >>> 0) {
       break label$16
      }
      label$17 : while (1) {
       i64toi32_i32$0 = $2_1;
       i64toi32_i32$1 = $2_1 >> 31 | 0;
       $83$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $6$hi;
       i64toi32_i32$0 = 0;
       i64toi32_i32$0 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$1 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $85_1 = i64toi32_i32$0;
       $85$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $83$hi;
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$0 = $85$hi;
       i64toi32_i32$3 = $85_1;
       i64toi32_i32$4 = $2_1 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $6_1 = i64toi32_i32$4;
       $6$hi = i64toi32_i32$5;
       label$18 : {
        label$19 : {
         $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$19
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
         $2_1 = HEAPU8[$2_1 >> 0] | 0;
         break label$18;
        }
        $2_1 = $478($0_1 | 0) | 0;
       }
       i64toi32_i32$5 = $6$hi;
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$3 = -48;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $6_1 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$4;
       label$20 : {
        $3_1 = $2_1 + -48 | 0;
        if ($3_1 >>> 0 > 9 >>> 0) {
         break label$20
        }
        i64toi32_i32$4 = $6$hi;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$1 = 21474836;
        i64toi32_i32$3 = 2061584302;
        if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
         $18_1 = 1
        } else {
         if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $19_1 = 0
          } else {
           $19_1 = 1
          }
          $20_1 = $19_1;
         } else {
          $20_1 = 0
         }
         $18_1 = $20_1;
        }
        if ($18_1) {
         continue label$17
        }
       }
       break label$17;
      };
      if ($3_1 >>> 0 >= 10 >>> 0) {
       break label$16
      }
      label$21 : while (1) {
       label$22 : {
        label$23 : {
         $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$23
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
         $2_1 = HEAPU8[$2_1 >> 0] | 0;
         break label$22;
        }
        $2_1 = $478($0_1 | 0) | 0;
       }
       if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
        continue label$21
       }
       break label$21;
      };
     }
     label$24 : {
      if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
       break label$24
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $6$hi;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
     i64toi32_i32$0 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     $134$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$0 = $134$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$3;
     $6_1 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$5;
     break label$3;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   i64toi32_i32$5 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
    break label$3
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$1 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$1 | 0;
  }
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$5 | 0;
 }
 
 function $492($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $8_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $7_1 = 0, $10_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0, $18$hi = 0, $19$hi = 0, $18_1 = 0, $16_1 = 0, $19_1 = 0, $20$hi = 0, $4_1 = 0, $9_1 = 0, $15_1 = 0, $20_1 = 0, $17_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $59_1 = 0, $71$hi = 0, $73$hi = 0, $78_1 = 0, $78$hi = 0, $180_1 = 0, $190_1 = 0, $252$hi = 0, $254$hi = 0, $259_1 = 0, $259$hi = 0, $303_1 = 0, $303$hi = 0, $309_1 = 0, $309$hi = 0, $310$hi = 0, $593_1 = 0, $593$hi = 0, $598_1 = 0, $598$hi = 0, $629_1 = 0, $629$hi = 0, $635_1 = 0, $635$hi = 0, $636$hi = 0, $660$hi = 0, $662$hi = 0, $668_1 = 0, $668$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $400($0_1 | 0) | 0;
  }
  label$2 : {
   $6_1 = HEAPU8[$1_1 >> 0] | 0;
   if (!$6_1) {
    break label$2
   }
   $7_1 = $0_1 + 4 | 0;
   i64toi32_i32$0 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$0;
   $4_1 = 0;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      label$6 : {
       label$7 : {
        if (!($476($6_1 & 255 | 0 | 0) | 0)) {
         break label$7
        }
        label$8 : while (1) {
         $6_1 = $1_1;
         $1_1 = $1_1 + 1 | 0;
         if ($476(HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
          continue label$8
         }
         break label$8;
        };
        i64toi32_i32$0 = 0;
        $477($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
        label$9 : while (1) {
         label$10 : {
          label$11 : {
           $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$11
           }
           HEAP32[$7_1 >> 2] = $1_1 + 1 | 0;
           $1_1 = HEAPU8[$1_1 >> 0] | 0;
           break label$10;
          }
          $1_1 = $478($0_1 | 0) | 0;
         }
         if ($476($1_1 | 0) | 0) {
          continue label$9
         }
         break label$9;
        };
        label$12 : {
         label$13 : {
          if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
           break label$13
          }
          $1_1 = HEAP32[$7_1 >> 2] | 0;
          break label$12;
         }
         $1_1 = (HEAP32[$7_1 >> 2] | 0) + -1 | 0;
         HEAP32[$7_1 >> 2] = $1_1;
        }
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
        $71$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$1 = $71$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$3 = $18_1;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $73$hi = i64toi32_i32$5;
        i64toi32_i32$2 = $1_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
        $78_1 = i64toi32_i32$2;
        $78$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $73$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$2 = $78$hi;
        i64toi32_i32$3 = $78_1;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$4;
        break label$6;
       }
       label$14 : {
        label$15 : {
         label$16 : {
          label$17 : {
           $6_1 = HEAPU8[$1_1 >> 0] | 0;
           if (($6_1 | 0) != (37 | 0)) {
            break label$17
           }
           $8_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
           if (($8_1 | 0) == (42 | 0)) {
            break label$16
           }
           if (($8_1 | 0) != (37 | 0)) {
            break label$15
           }
          }
          i64toi32_i32$4 = 0;
          $477($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
          $6_1 = $1_1 + (($6_1 | 0) == (37 | 0)) | 0;
          label$18 : {
           label$19 : {
            $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$19
            }
            HEAP32[$7_1 >> 2] = $1_1 + 1 | 0;
            $1_1 = HEAPU8[$1_1 >> 0] | 0;
            break label$18;
           }
           $1_1 = $478($0_1 | 0) | 0;
          }
          label$20 : {
           if (($1_1 | 0) == (HEAPU8[$6_1 >> 0] | 0 | 0)) {
            break label$20
           }
           label$21 : {
            if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
             break label$21
            }
            HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + -1 | 0;
           }
           $9_1 = 0;
           if (($1_1 | 0) >= (0 | 0)) {
            break label$2
           }
           break label$4;
          }
          i64toi32_i32$4 = $18$hi;
          i64toi32_i32$5 = $18_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
          i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
          }
          $18_1 = i64toi32_i32$2;
          $18$hi = i64toi32_i32$0;
          break label$6;
         }
         $6_1 = $1_1 + 2 | 0;
         $10_1 = 0;
         break label$14;
        }
        label$22 : {
         if (!($479($8_1 | 0) | 0)) {
          break label$22
         }
         if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
          break label$22
         }
         $6_1 = $1_1 + 3 | 0;
         $10_1 = $493($2_1 | 0, (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0 | 0) | 0;
         break label$14;
        }
        $6_1 = $1_1 + 1 | 0;
        $10_1 = HEAP32[$2_1 >> 2] | 0;
        $2_1 = $2_1 + 4 | 0;
       }
       $9_1 = 0;
       $1_1 = 0;
       label$23 : {
        if (!($479(HEAPU8[$6_1 >> 0] | 0 | 0) | 0)) {
         break label$23
        }
        label$24 : while (1) {
         $1_1 = (Math_imul($1_1, 10) + (HEAPU8[$6_1 >> 0] | 0) | 0) + -48 | 0;
         $8_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
         $6_1 = $6_1 + 1 | 0;
         if ($479($8_1 | 0) | 0) {
          continue label$24
         }
         break label$24;
        };
       }
       label$25 : {
        label$26 : {
         $11_1 = HEAPU8[$6_1 >> 0] | 0;
         if (($11_1 | 0) == (109 | 0)) {
          break label$26
         }
         $8_1 = $6_1;
         break label$25;
        }
        $8_1 = $6_1 + 1 | 0;
        $12_1 = 0;
        $9_1 = ($10_1 | 0) != (0 | 0);
        $11_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
        $13_1 = 0;
       }
       $14_1 = ($11_1 & 255 | 0) + -65 | 0;
       if ($14_1 >>> 0 > 57 >>> 0) {
        break label$4
       }
       $6_1 = $8_1 + 1 | 0;
       $11_1 = 3;
       label$27 : {
        label$28 : {
         switch ($14_1 | 0) {
         case 39:
          $180_1 = $8_1 + 2 | 0;
          $8_1 = (HEAPU8[($8_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
          $6_1 = $8_1 ? $180_1 : $6_1;
          $11_1 = $8_1 ? -2 : -1;
          break label$27;
         case 43:
          $190_1 = $8_1 + 2 | 0;
          $8_1 = (HEAPU8[($8_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
          $6_1 = $8_1 ? $190_1 : $6_1;
          $11_1 = $8_1 ? 3 : 1;
          break label$27;
         case 51:
         case 57:
          $11_1 = 1;
          break label$27;
         case 11:
          $11_1 = 2;
          break label$27;
         case 41:
          break label$27;
         case 1:
         case 3:
         case 7:
         case 8:
         case 9:
         case 10:
         case 12:
         case 13:
         case 14:
         case 15:
         case 16:
         case 17:
         case 19:
         case 20:
         case 21:
         case 22:
         case 24:
         case 25:
         case 27:
         case 28:
         case 29:
         case 30:
         case 31:
         case 33:
         case 42:
         case 44:
         case 48:
         case 49:
         case 53:
         case 54:
         case 56:
          break label$4;
         default:
          break label$28;
         };
        }
        $11_1 = 0;
        $6_1 = $8_1;
       }
       $8_1 = HEAPU8[$6_1 >> 0] | 0;
       $14_1 = ($8_1 & 47 | 0 | 0) == (3 | 0);
       $15_1 = $14_1 ? 1 : $11_1;
       label$33 : {
        $16_1 = $14_1 ? $8_1 | 32 | 0 : $8_1;
        if (($16_1 | 0) == (91 | 0)) {
         break label$33
        }
        label$34 : {
         label$35 : {
          if (($16_1 | 0) == (110 | 0)) {
           break label$35
          }
          if (($16_1 | 0) != (99 | 0)) {
           break label$34
          }
          $1_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
          break label$33;
         }
         i64toi32_i32$0 = $18$hi;
         $494($10_1 | 0, $15_1 | 0, $18_1 | 0, i64toi32_i32$0 | 0);
         break label$6;
        }
        i64toi32_i32$0 = 0;
        $477($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
        label$36 : while (1) {
         label$37 : {
          label$38 : {
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$38
           }
           HEAP32[$7_1 >> 2] = $8_1 + 1 | 0;
           $8_1 = HEAPU8[$8_1 >> 0] | 0;
           break label$37;
          }
          $8_1 = $478($0_1 | 0) | 0;
         }
         if ($476($8_1 | 0) | 0) {
          continue label$36
         }
         break label$36;
        };
        label$39 : {
         label$40 : {
          if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
           break label$40
          }
          $8_1 = HEAP32[$7_1 >> 2] | 0;
          break label$39;
         }
         $8_1 = (HEAP32[$7_1 >> 2] | 0) + -1 | 0;
         HEAP32[$7_1 >> 2] = $8_1;
        }
        i64toi32_i32$4 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
        $252$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$5 = $252$hi;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$3 = $18_1;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $254$hi = i64toi32_i32$2;
        i64toi32_i32$4 = $8_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $259_1 = i64toi32_i32$4;
        $259$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $254$hi;
        i64toi32_i32$5 = i64toi32_i32$1;
        i64toi32_i32$4 = $259$hi;
        i64toi32_i32$3 = $259_1;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$1;
       }
       i64toi32_i32$5 = $1_1;
       i64toi32_i32$1 = $1_1 >> 31 | 0;
       $19_1 = $1_1;
       $19$hi = i64toi32_i32$1;
       $477($0_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0);
       label$41 : {
        label$42 : {
         $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         $8_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
         if ($11_1 >>> 0 >= $8_1 >>> 0) {
          break label$42
         }
         HEAP32[$7_1 >> 2] = $11_1 + 1 | 0;
         break label$41;
        }
        if (($478($0_1 | 0) | 0 | 0) < (0 | 0)) {
         break label$4
        }
        $8_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
       }
       label$43 : {
        if (!$8_1) {
         break label$43
        }
        HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + -1 | 0;
       }
       label$44 : {
        label$45 : {
         label$46 : {
          $8_1 = $16_1 + -88 | 0;
          if ($8_1 >>> 0 <= 32 >>> 0) {
           break label$46
          }
          $1_1 = $16_1 + -65 | 0;
          if ($1_1 >>> 0 > 6 >>> 0) {
           break label$44
          }
          if (!((1 << $1_1 | 0) & 113 | 0)) {
           break label$44
          }
          break label$45;
         }
         $11_1 = 16;
         label$47 : {
          label$48 : {
           label$49 : {
            switch ($8_1 | 0) {
            case 17:
             $11_1 = 0;
             break label$48;
            case 12:
            case 29:
             $11_1 = 10;
             break label$48;
            case 1:
            case 2:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 10:
            case 16:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 25:
            case 26:
            case 28:
            case 30:
            case 31:
             break label$44;
            case 9:
            case 13:
            case 14:
            case 15:
             break label$45;
            case 3:
            case 11:
            case 27:
             break label$47;
            case 23:
             break label$49;
            default:
             break label$48;
            };
           }
           $11_1 = 8;
          }
          i64toi32_i32$1 = -1;
          i64toi32_i32$1 = $481($0_1 | 0, $11_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$1 | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
          $19_1 = i64toi32_i32$1;
          $19$hi = i64toi32_i32$5;
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $303_1 = i64toi32_i32$5;
          $303$hi = i64toi32_i32$1;
          i64toi32_i32$5 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
          $309_1 = i64toi32_i32$5;
          $309$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$2 = 0;
          i64toi32_i32$5 = $309$hi;
          i64toi32_i32$3 = $309_1;
          i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
          i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
          i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
          i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
          $310$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $303$hi;
          i64toi32_i32$1 = $303_1;
          i64toi32_i32$2 = $310$hi;
          i64toi32_i32$3 = i64toi32_i32$4;
          if ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
           break label$3
          }
          label$52 : {
           if (!$10_1) {
            break label$52
           }
           if (($16_1 | 0) != (112 | 0)) {
            break label$52
           }
           i64toi32_i32$1 = $19$hi;
           HEAP32[$10_1 >> 2] = $19_1;
           break label$44;
          }
          i64toi32_i32$1 = $19$hi;
          $494($10_1 | 0, $15_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
          break label$44;
         }
         label$53 : {
          label$54 : {
           if (($16_1 | 16 | 0 | 0) != (115 | 0)) {
            break label$54
           }
           $1680($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
           HEAP8[($3_1 + 32 | 0) >> 0] = 0;
           if (($16_1 | 0) != (115 | 0)) {
            break label$53
           }
           HEAP8[($3_1 + 65 | 0) >> 0] = 0;
           HEAP8[($3_1 + 46 | 0) >> 0] = 0;
           $59_1 = 0;
           HEAP16[($3_1 + 42 | 0) >> 1] = $59_1;
           HEAP16[($3_1 + 44 | 0) >> 1] = $59_1 >>> 16 | 0;
           break label$53;
          }
          $11_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
          $8_1 = ($11_1 | 0) == (94 | 0);
          $1680($3_1 + 32 | 0 | 0, $8_1 | 0, 257 | 0) | 0;
          HEAP8[($3_1 + 32 | 0) >> 0] = 0;
          $14_1 = $8_1 ? $6_1 + 2 | 0 : $6_1 + 1 | 0;
          label$55 : {
           label$56 : {
            label$57 : {
             label$58 : {
              $6_1 = HEAPU8[($6_1 + ($8_1 ? 2 : 1) | 0) >> 0] | 0;
              if (($6_1 | 0) == (45 | 0)) {
               break label$58
              }
              if (($6_1 | 0) == (93 | 0)) {
               break label$57
              }
              $11_1 = ($11_1 | 0) != (94 | 0);
              $6_1 = $14_1;
              break label$55;
             }
             $11_1 = ($11_1 | 0) != (94 | 0);
             HEAP8[($3_1 + 78 | 0) >> 0] = $11_1;
             break label$56;
            }
            $11_1 = ($11_1 | 0) != (94 | 0);
            HEAP8[($3_1 + 126 | 0) >> 0] = $11_1;
           }
           $6_1 = $14_1 + 1 | 0;
          }
          label$59 : while (1) {
           label$60 : {
            label$61 : {
             $8_1 = HEAPU8[$6_1 >> 0] | 0;
             if (($8_1 | 0) == (45 | 0)) {
              break label$61
             }
             if (!$8_1) {
              break label$4
             }
             if (($8_1 | 0) != (93 | 0)) {
              break label$60
             }
             break label$53;
            }
            $8_1 = 45;
            $17_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
            if (!$17_1) {
             break label$60
            }
            if (($17_1 | 0) == (93 | 0)) {
             break label$60
            }
            $14_1 = $6_1 + 1 | 0;
            label$62 : {
             label$63 : {
              $6_1 = HEAPU8[($6_1 + -1 | 0) >> 0] | 0;
              if ($6_1 >>> 0 < $17_1 >>> 0) {
               break label$63
              }
              $8_1 = $17_1;
              break label$62;
             }
             label$64 : while (1) {
              $6_1 = $6_1 + 1 | 0;
              HEAP8[(($3_1 + 32 | 0) + $6_1 | 0) >> 0] = $11_1;
              $8_1 = HEAPU8[$14_1 >> 0] | 0;
              if ($6_1 >>> 0 < $8_1 >>> 0) {
               continue label$64
              }
              break label$64;
             };
            }
            $6_1 = $14_1;
           }
           HEAP8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $11_1;
           $6_1 = $6_1 + 1 | 0;
           continue label$59;
          };
         }
         $14_1 = ($16_1 | 0) == (99 | 0);
         $11_1 = $14_1 ? $1_1 + 1 | 0 : 31;
         label$65 : {
          label$66 : {
           label$67 : {
            if (($15_1 | 0) != (1 | 0)) {
             break label$67
            }
            $8_1 = $10_1;
            label$68 : {
             if (!$9_1) {
              break label$68
             }
             $8_1 = $1652($11_1 << 2 | 0 | 0) | 0;
             if (!$8_1) {
              break label$65
             }
            }
            i64toi32_i32$0 = $3_1;
            i64toi32_i32$1 = 0;
            HEAP32[(i64toi32_i32$0 + 296 | 0) >> 2] = 0;
            HEAP32[(i64toi32_i32$0 + 300 | 0) >> 2] = i64toi32_i32$1;
            $1_1 = 0;
            label$69 : while (1) {
             $13_1 = $8_1;
             label$70 : {
              label$71 : while (1) {
               label$72 : {
                label$73 : {
                 $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                  break label$73
                 }
                 HEAP32[$7_1 >> 2] = $8_1 + 1 | 0;
                 $8_1 = HEAPU8[$8_1 >> 0] | 0;
                 break label$72;
                }
                $8_1 = $478($0_1 | 0) | 0;
               }
               if (!(HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                break label$70
               }
               HEAP8[($3_1 + 27 | 0) >> 0] = $8_1;
               $8_1 = $483($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
               if (($8_1 | 0) == (-2 | 0)) {
                continue label$71
               }
               $12_1 = 0;
               if (($8_1 | 0) == (-1 | 0)) {
                break label$4
               }
               label$74 : {
                if (!$13_1) {
                 break label$74
                }
                HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                $1_1 = $1_1 + 1 | 0;
               }
               if (!$9_1) {
                continue label$71
               }
               if (($1_1 | 0) != ($11_1 | 0)) {
                continue label$71
               }
               break label$71;
              };
              $11_1 = $11_1 << 1 | 0 | 1 | 0;
              $8_1 = $1654($13_1 | 0, $11_1 << 2 | 0 | 0) | 0;
              if (!$8_1) {
               break label$4
              }
              continue label$69;
             }
             break label$69;
            };
            $12_1 = 0;
            if (!($485($3_1 + 296 | 0 | 0) | 0)) {
             break label$4
            }
            break label$66;
           }
           label$75 : {
            if (!$9_1) {
             break label$75
            }
            $1_1 = 0;
            $8_1 = $1652($11_1 | 0) | 0;
            if (!$8_1) {
             break label$65
            }
            label$76 : while (1) {
             $12_1 = $8_1;
             label$77 : while (1) {
              label$78 : {
               label$79 : {
                $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                 break label$79
                }
                HEAP32[$7_1 >> 2] = $8_1 + 1 | 0;
                $8_1 = HEAPU8[$8_1 >> 0] | 0;
                break label$78;
               }
               $8_1 = $478($0_1 | 0) | 0;
              }
              label$80 : {
               if (HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                break label$80
               }
               $13_1 = 0;
               break label$66;
              }
              HEAP8[($12_1 + $1_1 | 0) >> 0] = $8_1;
              $1_1 = $1_1 + 1 | 0;
              if (($1_1 | 0) != ($11_1 | 0)) {
               continue label$77
              }
              break label$77;
             };
             $13_1 = 0;
             $11_1 = $11_1 << 1 | 0 | 1 | 0;
             $8_1 = $1654($12_1 | 0, $11_1 | 0) | 0;
             if (!$8_1) {
              break label$4
             }
             continue label$76;
            };
           }
           $1_1 = 0;
           label$81 : {
            if (!$10_1) {
             break label$81
            }
            label$82 : while (1) {
             label$83 : {
              label$84 : {
               $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                break label$84
               }
               HEAP32[$7_1 >> 2] = $8_1 + 1 | 0;
               $8_1 = HEAPU8[$8_1 >> 0] | 0;
               break label$83;
              }
              $8_1 = $478($0_1 | 0) | 0;
             }
             label$85 : {
              if (HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
               break label$85
              }
              $13_1 = 0;
              $12_1 = $10_1;
              break label$66;
             }
             HEAP8[($10_1 + $1_1 | 0) >> 0] = $8_1;
             $1_1 = $1_1 + 1 | 0;
             continue label$82;
            };
           }
           label$86 : while (1) {
            label$87 : {
             label$88 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$88
              }
              HEAP32[$7_1 >> 2] = $1_1 + 1 | 0;
              $1_1 = HEAPU8[$1_1 >> 0] | 0;
              break label$87;
             }
             $1_1 = $478($0_1 | 0) | 0;
            }
            if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
             continue label$86
            }
            break label$86;
           };
           $12_1 = 0;
           $13_1 = 0;
           $1_1 = 0;
          }
          label$89 : {
           label$90 : {
            if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
             break label$90
            }
            $8_1 = HEAP32[$7_1 >> 2] | 0;
            break label$89;
           }
           $8_1 = (HEAP32[$7_1 >> 2] | 0) + -1 | 0;
           HEAP32[$7_1 >> 2] = $8_1;
          }
          i64toi32_i32$3 = $0_1;
          i64toi32_i32$1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $593_1 = i64toi32_i32$1;
          $593$hi = i64toi32_i32$0;
          i64toi32_i32$1 = $8_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
          $598_1 = i64toi32_i32$1;
          $598$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $593$hi;
          i64toi32_i32$3 = $593_1;
          i64toi32_i32$1 = $598$hi;
          i64toi32_i32$2 = $598_1;
          i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
          i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $20_1 = i64toi32_i32$5;
          $20$hi = i64toi32_i32$4;
          if (!(i64toi32_i32$5 | i64toi32_i32$4 | 0)) {
           break label$3
          }
          label$91 : {
           i64toi32_i32$4 = $20$hi;
           i64toi32_i32$4 = $19$hi;
           i64toi32_i32$4 = $20$hi;
           i64toi32_i32$0 = $20_1;
           i64toi32_i32$3 = $19$hi;
           i64toi32_i32$2 = $19_1;
           if ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0) {
            break label$91
           }
           if ($14_1) {
            break label$3
           }
          }
          label$92 : {
           if (!$9_1) {
            break label$92
           }
           HEAP32[$10_1 >> 2] = ($15_1 | 0) == (1 | 0) ? $13_1 : $12_1;
          }
          if ($14_1) {
           break label$44
          }
          label$93 : {
           if (!$13_1) {
            break label$93
           }
           HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
          }
          label$94 : {
           if ($12_1) {
            break label$94
           }
           $12_1 = 0;
           break label$44;
          }
          HEAP8[($12_1 + $1_1 | 0) >> 0] = 0;
          break label$44;
         }
         $12_1 = 0;
         $13_1 = 0;
         break label$4;
        }
        $488($3_1 | 0, $0_1 | 0, $15_1 | 0, 0 | 0);
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
        $629_1 = i64toi32_i32$0;
        $629$hi = i64toi32_i32$4;
        i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $635_1 = i64toi32_i32$0;
        $635$hi = i64toi32_i32$4;
        i64toi32_i32$4 = 0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = $635$hi;
        i64toi32_i32$3 = $635_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        $636$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $629$hi;
        i64toi32_i32$4 = $629_1;
        i64toi32_i32$2 = $636$hi;
        i64toi32_i32$3 = i64toi32_i32$1;
        if ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) | 0) {
         break label$3
        }
        if (!$10_1) {
         break label$44
        }
        if ($15_1 >>> 0 > 2 >>> 0) {
         break label$44
        }
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$4 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        $19_1 = i64toi32_i32$4;
        $19$hi = i64toi32_i32$5;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$4 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $20_1 = i64toi32_i32$5;
        $20$hi = i64toi32_i32$4;
        label$95 : {
         switch ($15_1 | 0) {
         default:
          i64toi32_i32$4 = $20$hi;
          i64toi32_i32$4 = $19$hi;
          i64toi32_i32$4 = $20$hi;
          i64toi32_i32$5 = $19$hi;
          HEAPF32[$10_1 >> 2] = Math_fround($1675($20_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$5 | 0));
          break label$44;
         case 1:
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$5 = $19$hi;
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$4 = $19$hi;
          HEAPF64[$10_1 >> 3] = +$1674($20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$4 | 0);
          break label$44;
         case 2:
          break label$95;
         };
        }
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$5 = $10_1;
        HEAP32[i64toi32_i32$5 >> 2] = $20_1;
        HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $19_1;
        HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$4;
       }
       i64toi32_i32$3 = $0_1;
       i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
       $660$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$5 = $660$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$4 = $18$hi;
       i64toi32_i32$2 = $18_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $662$hi = i64toi32_i32$1;
       i64toi32_i32$3 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$3 >> 31 | 0;
       $668_1 = i64toi32_i32$3;
       $668$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $662$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$3 = $668$hi;
       i64toi32_i32$2 = $668_1;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $18_1 = i64toi32_i32$4;
       $18$hi = i64toi32_i32$0;
       $4_1 = $4_1 + (($10_1 | 0) != (0 | 0)) | 0;
      }
      $1_1 = $6_1 + 1 | 0;
      $6_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
      if ($6_1) {
       continue label$5
      }
      break label$2;
     };
    }
    $4_1 = $4_1 ? $4_1 : -1;
   }
   if (!$9_1) {
    break label$2
   }
   $1653($12_1 | 0);
   $1653($13_1 | 0);
  }
  label$98 : {
   if (!$5_1) {
    break label$98
   }
   $401($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $4_1 | 0;
 }
 
 function $493($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $0_1 + (($1_1 << 2 | 0) - ((($1_1 | 0) != (0 | 0)) << 2 | 0) | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $494($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $1_1 + 2 | 0;
   if ($1_1 >>> 0 > 5 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 | 0) {
    default:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 4:
     break label$1;
    case 5:
     break label$2;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $495($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$2_1) {
       break label$4
      }
      if (!($0_1 & 3 | 0)) {
       break label$4
      }
      $4_1 = $1_1 & 255 | 0;
      label$5 : while (1) {
       if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
        break label$3
       }
       $0_1 = $0_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = ($2_1 | 0) != (0 | 0);
       if (!$2_1) {
        break label$4
       }
       if ($0_1 & 3 | 0) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$3_1) {
      break label$2
     }
    }
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$1
    }
    label$6 : {
     label$7 : {
      if ($2_1 >>> 0 < 4 >>> 0) {
       break label$7
      }
      $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
      label$8 : while (1) {
       $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
       if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
        break label$6
       }
       $0_1 = $0_1 + 4 | 0;
       $2_1 = $2_1 + -4 | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$8
       }
       break label$8;
      };
     }
     if (!$2_1) {
      break label$2
     }
    }
    $3_1 = $1_1 & 255 | 0;
    label$9 : while (1) {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($3_1 | 0)) {
      break label$1
     }
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$9
     }
     break label$9;
    };
   }
   return 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $496($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $495($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $1679($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $497($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $3_1 = $1680($3_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 82;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $492($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $498($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $496($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $499($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $500($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($238($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $501() {
  
 }
 
 function $502($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $501();
  HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $0_1 = $393(fimport$15(91 | 0, $2_1 | 0) | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $503($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 272 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAPU8[$1_1 >> 0] | 0) {
    break label$1
   }
   label$2 : {
    $1_1 = fimport$13(134226816 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = fimport$13(Math_imul($0_1, 12) + 134226832 | 0 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$4 : {
    $1_1 = fimport$13(134226904 | 0) | 0;
    if (!$1_1) {
     break label$4
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   $1_1 = 134226909;
  }
  $3_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : while (1) {
     $4_1 = HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0;
     if (!$4_1) {
      break label$6
     }
     if (($4_1 | 0) == (47 | 0)) {
      break label$6
     }
     $4_1 = 15;
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != (15 | 0)) {
      continue label$7
     }
     break label$5;
    };
   }
   $4_1 = $3_1;
  }
  $5_1 = 134226909;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       if (($3_1 | 0) == (46 | 0)) {
        break label$12
       }
       if (HEAPU8[($1_1 + $4_1 | 0) >> 0] | 0) {
        break label$12
       }
       $5_1 = $1_1;
       if (($3_1 | 0) != (67 | 0)) {
        break label$11
       }
      }
      if (!(HEAPU8[($5_1 + 1 | 0) >> 0] | 0)) {
       break label$10
      }
     }
     if (!($499($5_1 | 0, 134226909 | 0) | 0)) {
      break label$10
     }
     if ($499($5_1 | 0, 134226917 | 0) | 0) {
      break label$9
     }
    }
    label$13 : {
     if ($0_1) {
      break label$13
     }
     $3_1 = 134226740;
     if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) == (46 | 0)) {
      break label$8
     }
    }
    $3_1 = 0;
    break label$8;
   }
   label$14 : {
    $3_1 = HEAP32[(0 + 134222052 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$14
    }
    label$15 : while (1) {
     if (!($499($5_1 | 0, $3_1 + 8 | 0 | 0) | 0)) {
      break label$8
     }
     $3_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
     if ($3_1) {
      continue label$15
     }
     break label$15;
    };
   }
   fimport$10(134222044 | 0);
   label$16 : {
    $3_1 = HEAP32[(0 + 134222052 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$16
    }
    label$17 : while (1) {
     label$18 : {
      if ($499($5_1 | 0, $3_1 + 8 | 0 | 0) | 0) {
       break label$18
      }
      fimport$11(134222044 | 0);
      break label$8;
     }
     $3_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
     if ($3_1) {
      continue label$17
     }
     break label$17;
    };
   }
   $6_1 = 0;
   label$19 : {
    label$20 : {
     label$21 : {
      if (HEAP32[(0 + 134221984 | 0) >> 2] | 0) {
       break label$21
      }
      $3_1 = fimport$13(134226923 | 0) | 0;
      if (!$3_1) {
       break label$21
      }
      if (!(HEAPU8[$3_1 >> 0] | 0)) {
       break label$21
      }
      $7_1 = $4_1 + 1 | 0;
      $8_1 = 254 - $4_1 | 0;
      label$22 : while (1) {
       label$23 : {
        $1_1 = $500($3_1 | 0, 58 | 0) | 0;
        $9_1 = HEAPU8[$1_1 >> 0] | 0;
        $10_1 = ($1_1 - $3_1 | 0) - (($9_1 | 0) != (0 | 0)) | 0;
        if ($10_1 >>> 0 >= $8_1 >>> 0) {
         break label$23
        }
        $1679($2_1 + 16 | 0 | 0, $3_1 | 0, $10_1 | 0) | 0;
        $3_1 = ($2_1 + 16 | 0) + $10_1 | 0;
        HEAP8[$3_1 >> 0] = 47;
        $1679($3_1 + 1 | 0 | 0, $5_1 | 0, $4_1 | 0) | 0;
        HEAP8[(($2_1 + 16 | 0) + ($7_1 + $10_1 | 0) | 0) >> 0] = 0;
        label$24 : {
         $3_1 = fimport$14($2_1 + 16 | 0 | 0, $2_1 + 12 | 0 | 0) | 0;
         if (!$3_1) {
          break label$24
         }
         $1_1 = $1652(28 | 0) | 0;
         if ($1_1) {
          break label$20
         }
         $502($3_1 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) | 0;
         break label$21;
        }
        $9_1 = HEAPU8[$1_1 >> 0] | 0;
       }
       $3_1 = $1_1 + (($9_1 & 255 | 0 | 0) != (0 | 0)) | 0;
       if (HEAPU8[$3_1 >> 0] | 0) {
        continue label$22
       }
       break label$22;
      };
     }
     $3_1 = $1652(28 | 0) | 0;
     if (!$3_1) {
      break label$19
     }
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134226744 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = HEAP32[(i64toi32_i32$2 + 134226740 | 0) >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     $1_1 = $3_1 + 8 | 0;
     $1679($1_1 | 0, $5_1 | 0, $4_1 | 0) | 0;
     HEAP8[($1_1 + $4_1 | 0) >> 0] = 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = HEAP32[(0 + 134222052 | 0) >> 2] | 0;
     HEAP32[(0 + 134222052 | 0) >> 2] = $3_1;
     $6_1 = $3_1;
     break label$19;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    $3_1 = $1_1 + 8 | 0;
    $1679($3_1 | 0, $5_1 | 0, $4_1 | 0) | 0;
    HEAP8[($3_1 + $4_1 | 0) >> 0] = 0;
    HEAP32[($1_1 + 24 | 0) >> 2] = HEAP32[(0 + 134222052 | 0) >> 2] | 0;
    HEAP32[(0 + 134222052 | 0) >> 2] = $1_1;
    $6_1 = $1_1;
   }
   fimport$11(134222044 | 0);
   $3_1 = $0_1 | $6_1 | 0 ? $6_1 : 134226740;
  }
  global$0 = $2_1 + 272 | 0;
  return $3_1 | 0;
 }
 
 function $504($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) != (134226792 | 0) & (($0_1 | 0) != (0 | 0) & ($0_1 | 0) != (134226768 | 0) | 0) | 0 | 0;
 }
 
 function $505($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($504($2_1 | 0) | 0)) {
      break label$3
     }
     $4_1 = 0;
     label$4 : while (1) {
      label$5 : {
       if (!((1 << $4_1 | 0) & $0_1 | 0)) {
        break label$5
       }
       HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] = $503($4_1 | 0, $1_1 | 0) | 0;
      }
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) != (6 | 0)) {
       continue label$4
      }
      break label$2;
     };
    }
    $5_1 = 0;
    $4_1 = 0;
    label$6 : while (1) {
     $6_1 = (1 << $4_1 | 0) & $0_1 | 0;
     label$7 : {
      label$8 : {
       if (!$2_1) {
        break label$8
       }
       if ($6_1) {
        break label$8
       }
       $6_1 = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
       break label$7;
      }
      $6_1 = $503($4_1 | 0, ($6_1 ? $1_1 : 134226936) | 0) | 0;
     }
     HEAP32[(($3_1 + 8 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $6_1;
     $5_1 = $5_1 + (($6_1 | 0) != (0 | 0)) | 0;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != (6 | 0)) {
      continue label$6
     }
     break label$6;
    };
    if ($5_1 >>> 0 > 1 >>> 0) {
     break label$2
    }
    $4_1 = 134226768;
    label$9 : {
     switch ($5_1 | 0) {
     case 1:
      break label$9;
     default:
      break label$1;
     };
    }
    if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (134226740 | 0)) {
     break label$2
    }
    $4_1 = 134226792;
    break label$1;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $506($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($507() | 0) + 188 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($392() | 0) >> 2] = 84;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($392() | 0) >> 2] = 84;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $507() {
  return $482() | 0 | 0;
 }
 
 function $508($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $506($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $509($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $10_1 = 0, $3$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $10_1 & 2047 | 0;
   if (($2_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $2_1 = 0;
      break label$3;
     }
     $0_1 = +$509(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $2_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $2_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $510($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $1680($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($511(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $2_1 = $400($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$6
     }
     $1_1 = $511($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$5;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $511($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
   $401($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $511($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $19_1 = 0, i64toi32_i32$5 = 0, $12_1 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $17_1 = 0, $11_1 = 0, $18_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $10_1 = 0, $21_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $8_1 = 0, $276_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      if (($11_1 | 0) < (0 | 0)) {
       break label$4
      }
      label$5 : {
       if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
        break label$5
       }
       HEAP32[($392() | 0) >> 2] = 75;
       $11_1 = -1;
       break label$4;
      }
      $11_1 = $1_1 + $11_1 | 0;
     }
     $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
     $1_1 = $12_1;
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               label$16 : {
                label$17 : {
                 label$18 : {
                  label$19 : {
                   $13_1 = HEAPU8[$1_1 >> 0] | 0;
                   if (!$13_1) {
                    break label$19
                   }
                   label$20 : {
                    label$21 : while (1) {
                     label$22 : {
                      label$23 : {
                       label$24 : {
                        $13_1 = $13_1 & 255 | 0;
                        if ($13_1) {
                         break label$24
                        }
                        $13_1 = $1_1;
                        break label$23;
                       }
                       if (($13_1 | 0) != (37 | 0)) {
                        break label$22
                       }
                       $13_1 = $1_1;
                       label$25 : while (1) {
                        if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
                         break label$23
                        }
                        $14_1 = $1_1 + 2 | 0;
                        HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                        $13_1 = $13_1 + 1 | 0;
                        $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
                        $1_1 = $14_1;
                        if (($15_1 | 0) == (37 | 0)) {
                         continue label$25
                        }
                        break label$25;
                       };
                      }
                      $1_1 = $13_1 - $12_1 | 0;
                      label$26 : {
                       if (!$0_1) {
                        break label$26
                       }
                       $512($0_1 | 0, $12_1 | 0, $1_1 | 0);
                      }
                      if ($1_1) {
                       continue label$3
                      }
                      $14_1 = $479(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
                      $16_1 = -1;
                      $13_1 = 1;
                      $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                      label$27 : {
                       if (!$14_1) {
                        break label$27
                       }
                       if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                        break label$27
                       }
                       $16_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                       $10_1 = 1;
                       $13_1 = 3;
                      }
                      $1_1 = $1_1 + $13_1 | 0;
                      HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                      $17_1 = 0;
                      label$28 : {
                       label$29 : {
                        $15_1 = HEAP8[$1_1 >> 0] | 0;
                        $14_1 = $15_1 + -32 | 0;
                        if ($14_1 >>> 0 <= 31 >>> 0) {
                         break label$29
                        }
                        $13_1 = $1_1;
                        break label$28;
                       }
                       $17_1 = 0;
                       $13_1 = $1_1;
                       $14_1 = 1 << $14_1 | 0;
                       if (!($14_1 & 75913 | 0)) {
                        break label$28
                       }
                       label$30 : while (1) {
                        $13_1 = $1_1 + 1 | 0;
                        HEAP32[($7_1 + 76 | 0) >> 2] = $13_1;
                        $17_1 = $14_1 | $17_1 | 0;
                        $15_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
                        $14_1 = $15_1 + -32 | 0;
                        if ($14_1 >>> 0 >= 32 >>> 0) {
                         break label$28
                        }
                        $1_1 = $13_1;
                        $14_1 = 1 << $14_1 | 0;
                        if ($14_1 & 75913 | 0) {
                         continue label$30
                        }
                        break label$30;
                       };
                      }
                      label$31 : {
                       label$32 : {
                        if (($15_1 | 0) != (42 | 0)) {
                         break label$32
                        }
                        label$33 : {
                         label$34 : {
                          if (!($479(HEAP8[($13_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                           break label$34
                          }
                          $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                          if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                           break label$34
                          }
                          HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                          $1_1 = $13_1 + 3 | 0;
                          $18_1 = HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                          $10_1 = 1;
                          break label$33;
                         }
                         if ($10_1) {
                          break label$2
                         }
                         $10_1 = 0;
                         $18_1 = 0;
                         label$35 : {
                          if (!$0_1) {
                           break label$35
                          }
                          $1_1 = HEAP32[$2_1 >> 2] | 0;
                          HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                          $18_1 = HEAP32[$1_1 >> 2] | 0;
                         }
                         $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
                        }
                        HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                        if (($18_1 | 0) > (-1 | 0)) {
                         break label$31
                        }
                        $18_1 = 0 - $18_1 | 0;
                        $17_1 = $17_1 | 8192 | 0;
                        break label$31;
                       }
                       $18_1 = $513($7_1 + 76 | 0 | 0) | 0;
                       if (($18_1 | 0) < (0 | 0)) {
                        break label$2
                       }
                       $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                      }
                      $19_1 = -1;
                      label$36 : {
                       if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
                        break label$36
                       }
                       label$37 : {
                        if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                         break label$37
                        }
                        label$38 : {
                         if (!($479(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
                          break label$38
                         }
                         $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                         if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                          break label$38
                         }
                         HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
                         $19_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                         $1_1 = $1_1 + 4 | 0;
                         HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                         break label$36;
                        }
                        if ($10_1) {
                         break label$2
                        }
                        label$39 : {
                         label$40 : {
                          if ($0_1) {
                           break label$40
                          }
                          $19_1 = 0;
                          break label$39;
                         }
                         $1_1 = HEAP32[$2_1 >> 2] | 0;
                         HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
                         $19_1 = HEAP32[$1_1 >> 2] | 0;
                        }
                        $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
                        HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
                        break label$36;
                       }
                       HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
                       $19_1 = $513($7_1 + 76 | 0 | 0) | 0;
                       $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                      }
                      $13_1 = 0;
                      label$41 : while (1) {
                       $14_1 = $13_1;
                       $20_1 = -1;
                       if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
                        break label$1
                       }
                       $15_1 = $1_1 + 1 | 0;
                       HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
                       $13_1 = HEAP8[$1_1 >> 0] | 0;
                       $1_1 = $15_1;
                       $13_1 = HEAPU8[(($13_1 + Math_imul($14_1, 58) | 0) + 134226895 | 0) >> 0] | 0;
                       if (($13_1 + -1 | 0) >>> 0 < 8 >>> 0) {
                        continue label$41
                       }
                       break label$41;
                      };
                      if (!$13_1) {
                       break label$1
                      }
                      label$42 : {
                       label$43 : {
                        label$44 : {
                         label$45 : {
                          if (($13_1 | 0) != (19 | 0)) {
                           break label$45
                          }
                          $20_1 = -1;
                          if (($16_1 | 0) <= (-1 | 0)) {
                           break label$44
                          }
                          break label$1;
                         }
                         if (($16_1 | 0) < (0 | 0)) {
                          break label$43
                         }
                         HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $13_1;
                         i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
                         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                         $276_1 = i64toi32_i32$0;
                         i64toi32_i32$0 = $7_1;
                         HEAP32[($7_1 + 64 | 0) >> 2] = $276_1;
                         HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
                        }
                        $1_1 = 0;
                        if (!$0_1) {
                         continue label$3
                        }
                        break label$42;
                       }
                       if (!$0_1) {
                        break label$6
                       }
                       $514($7_1 + 64 | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
                       $15_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
                      }
                      $21_1 = $17_1 & -65537 | 0;
                      $13_1 = $17_1 & 8192 | 0 ? $21_1 : $17_1;
                      $20_1 = 0;
                      $16_1 = 134226937;
                      $17_1 = $9_1;
                      $1_1 = HEAP8[($15_1 + -1 | 0) >> 0] | 0;
                      $1_1 = $14_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                      $15_1 = $1_1 + -88 | 0;
                      if ($15_1 >>> 0 <= 32 >>> 0) {
                       break label$20
                      }
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          label$50 : {
                           $14_1 = $1_1 + -65 | 0;
                           if ($14_1 >>> 0 <= 6 >>> 0) {
                            break label$50
                           }
                           if (($1_1 | 0) != (83 | 0)) {
                            break label$7
                           }
                           if (!$19_1) {
                            break label$49
                           }
                           $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                           break label$47;
                          }
                          switch ($14_1 | 0) {
                          case 2:
                           break label$48;
                          case 1:
                          case 3:
                           break label$7;
                          default:
                           break label$18;
                          };
                         }
                         $1_1 = 0;
                         $515($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                         break label$46;
                        }
                        HEAP32[($7_1 + 12 | 0) >> 2] = 0;
                        i64toi32_i32$2 = $7_1;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                        HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$1;
                        HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
                        $19_1 = -1;
                        $14_1 = $7_1 + 8 | 0;
                       }
                       $1_1 = 0;
                       label$51 : {
                        label$52 : while (1) {
                         $15_1 = HEAP32[$14_1 >> 2] | 0;
                         if (!$15_1) {
                          break label$51
                         }
                         label$53 : {
                          $15_1 = $508($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                          $12_1 = ($15_1 | 0) < (0 | 0);
                          if ($12_1) {
                           break label$53
                          }
                          if ($15_1 >>> 0 > ($19_1 - $1_1 | 0) >>> 0) {
                           break label$53
                          }
                          $14_1 = $14_1 + 4 | 0;
                          $1_1 = $15_1 + $1_1 | 0;
                          if ($19_1 >>> 0 > $1_1 >>> 0) {
                           continue label$52
                          }
                          break label$51;
                         }
                         break label$52;
                        };
                        $20_1 = -1;
                        if ($12_1) {
                         break label$1
                        }
                       }
                       $515($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
                       label$54 : {
                        if ($1_1) {
                         break label$54
                        }
                        $1_1 = 0;
                        break label$46;
                       }
                       $15_1 = 0;
                       $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                       label$55 : while (1) {
                        $12_1 = HEAP32[$14_1 >> 2] | 0;
                        if (!$12_1) {
                         break label$46
                        }
                        $12_1 = $508($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
                        $15_1 = $12_1 + $15_1 | 0;
                        if (($15_1 | 0) > ($1_1 | 0)) {
                         break label$46
                        }
                        $512($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
                        $14_1 = $14_1 + 4 | 0;
                        if ($15_1 >>> 0 < $1_1 >>> 0) {
                         continue label$55
                        }
                        break label$55;
                       };
                      }
                      $515($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
                      $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
                      continue label$3;
                     }
                     $14_1 = $1_1 + 1 | 0;
                     HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
                     $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                     $1_1 = $14_1;
                     continue label$21;
                    };
                   }
                   switch ($15_1 | 0) {
                   case 29:
                    break label$10;
                   case 22:
                    break label$11;
                   case 24:
                    break label$13;
                   case 23:
                    break label$14;
                   case 12:
                   case 17:
                    break label$15;
                   case 11:
                    break label$16;
                   case 27:
                    break label$17;
                   case 9:
                   case 13:
                   case 14:
                   case 15:
                    break label$18;
                   case 1:
                   case 2:
                   case 3:
                   case 4:
                   case 5:
                   case 6:
                   case 7:
                   case 8:
                   case 10:
                   case 16:
                   case 18:
                   case 19:
                   case 20:
                   case 21:
                   case 25:
                   case 26:
                   case 28:
                   case 30:
                   case 31:
                    break label$7;
                   default:
                    break label$12;
                   };
                  }
                  $20_1 = $11_1;
                  if ($0_1) {
                   break label$1
                  }
                  if (!$10_1) {
                   break label$6
                  }
                  $1_1 = 1;
                  label$56 : {
                   label$57 : while (1) {
                    $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
                    if (!$13_1) {
                     break label$56
                    }
                    $514($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
                    $20_1 = 1;
                    $1_1 = $1_1 + 1 | 0;
                    if (($1_1 | 0) != (10 | 0)) {
                     continue label$57
                    }
                    break label$1;
                   };
                  }
                  $20_1 = 1;
                  if ($1_1 >>> 0 > 9 >>> 0) {
                   break label$1
                  }
                  $20_1 = -1;
                  if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
                   break label$1
                  }
                  label$58 : {
                   label$59 : while (1) {
                    $1_1 = $1_1 + 1 | 0;
                    if (($1_1 | 0) == (10 | 0)) {
                     break label$58
                    }
                    if (!(HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0)) {
                     continue label$59
                    }
                    break label$59;
                   };
                  }
                  $20_1 = $1_1 >>> 0 < 10 >>> 0 ? -1 : 1;
                  break label$1;
                 }
                 $1_1 = FUNCTION_TABLE[$5_1]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $18_1, $19_1, $13_1, $1_1) | 0;
                 continue label$3;
                }
                $20_1 = 0;
                $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                $12_1 = $1_1 ? $1_1 : 134226947;
                $1_1 = $495($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
                $17_1 = $1_1 ? $1_1 : $12_1 + $19_1 | 0;
                $13_1 = $21_1;
                $19_1 = $1_1 ? $1_1 - $12_1 | 0 : $19_1;
                break label$7;
               }
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$0;
               $19_1 = 1;
               $12_1 = $8_1;
               $17_1 = $9_1;
               $13_1 = $21_1;
               break label$7;
              }
              label$60 : {
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               $22_1 = i64toi32_i32$1;
               $22$hi = i64toi32_i32$0;
               i64toi32_i32$2 = i64toi32_i32$1;
               i64toi32_i32$1 = -1;
               i64toi32_i32$3 = -1;
               if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                $30_1 = 1
               } else {
                if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                 if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                  $31_1 = 0
                 } else {
                  $31_1 = 1
                 }
                 $32_1 = $31_1;
                } else {
                 $32_1 = 0
                }
                $30_1 = $32_1;
               }
               if ($30_1) {
                break label$60
               }
               i64toi32_i32$2 = $22$hi;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 0;
               i64toi32_i32$0 = $22$hi;
               i64toi32_i32$1 = $22_1;
               i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
               i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
               $22_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
               $22$hi = i64toi32_i32$5;
               i64toi32_i32$3 = $7_1;
               HEAP32[($7_1 + 64 | 0) >> 2] = $22_1;
               HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
               $20_1 = 1;
               $16_1 = 134226937;
               break label$9;
              }
              label$61 : {
               if (!($13_1 & 2048 | 0)) {
                break label$61
               }
               $20_1 = 1;
               $16_1 = 134226938;
               break label$9;
              }
              $20_1 = $13_1 & 1 | 0;
              $16_1 = $20_1 ? 134226939 : 134226937;
              break label$9;
             }
             i64toi32_i32$2 = $7_1;
             i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
             i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
             $12_1 = $516(i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, $9_1 | 0) | 0;
             $20_1 = 0;
             $16_1 = 134226937;
             if (!($13_1 & 8 | 0)) {
              break label$8
             }
             $1_1 = $9_1 - $12_1 | 0;
             $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1 + 1 | 0;
             break label$8;
            }
            $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
            $13_1 = $13_1 | 8 | 0;
            $1_1 = 120;
           }
           i64toi32_i32$2 = $7_1;
           i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           $12_1 = $517(i64toi32_i32$3 | 0, i64toi32_i32$5 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
           $20_1 = 0;
           $16_1 = 134226937;
           if (!($13_1 & 8 | 0)) {
            break label$8
           }
           i64toi32_i32$2 = $7_1;
           i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           if (!(i64toi32_i32$5 | i64toi32_i32$3 | 0)) {
            break label$8
           }
           $16_1 = ($1_1 >>> 4 | 0) + 134226937 | 0;
           $20_1 = 2;
           break label$8;
          }
          $1_1 = 0;
          $13_1 = $14_1 & 255 | 0;
          if ($13_1 >>> 0 > 7 >>> 0) {
           continue label$3
          }
          label$62 : {
           switch ($13_1 | 0) {
           default:
            HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
            continue label$3;
           case 1:
            HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
            continue label$3;
           case 2:
            i64toi32_i32$5 = $11_1;
            i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
            i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
            HEAP32[i64toi32_i32$5 >> 2] = $11_1;
            HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
            continue label$3;
           case 3:
            HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
            continue label$3;
           case 4:
            HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
            continue label$3;
           case 6:
            HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
            continue label$3;
           case 5:
            continue label$3;
           case 7:
            break label$62;
           };
          }
          i64toi32_i32$5 = $11_1;
          i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
          i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
          HEAP32[i64toi32_i32$5 >> 2] = $11_1;
          HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
          continue label$3;
         }
         $20_1 = 0;
         $16_1 = 134226937;
         i64toi32_i32$2 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
         $22_1 = i64toi32_i32$3;
         $22$hi = i64toi32_i32$5;
        }
        i64toi32_i32$5 = $22$hi;
        $12_1 = $518($22_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
       }
       $13_1 = ($19_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
       i64toi32_i32$2 = $7_1;
       i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
       $22_1 = i64toi32_i32$5;
       $22$hi = i64toi32_i32$3;
       label$69 : {
        label$70 : {
         if ($19_1) {
          break label$70
         }
         i64toi32_i32$3 = $22$hi;
         if (!!($22_1 | i64toi32_i32$3 | 0)) {
          break label$70
         }
         $19_1 = 0;
         $12_1 = $9_1;
         break label$69;
        }
        i64toi32_i32$3 = $22$hi;
        $1_1 = ($9_1 - $12_1 | 0) + !($22_1 | i64toi32_i32$3 | 0) | 0;
        $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
       }
       $17_1 = $9_1;
      }
      $15_1 = $17_1 - $12_1 | 0;
      $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
      $14_1 = $20_1 + $17_1 | 0;
      $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
      $515($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
      $512($0_1 | 0, $16_1 | 0, $20_1 | 0);
      $515($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
      $515($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
      $512($0_1 | 0, $12_1 | 0, $15_1 | 0);
      $515($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
      continue label$3;
     }
     break label$3;
    };
    $20_1 = 0;
    break label$1;
   }
   $20_1 = -1;
  }
  global$0 = $7_1 + 80 | 0;
  return $20_1 | 0;
 }
 
 function $512($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $409($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $513($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!($479(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($3_1 + Math_imul($1_1, 10) | 0) + -48 | 0;
    if ($479(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $514($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $26_1 = 0, $34_1 = 0, $44_1 = 0, $52_1 = 0, $60_1 = 0, $68_1 = 0, $76_1 = 0, $86_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   $1_1 = $1_1 + -9 | 0;
   if ($1_1 >>> 0 > 9 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 | 0) {
    default:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $26_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $26_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $34_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $34_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $44_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $44_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $52_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $52_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $60_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $60_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $68_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $68_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $76_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $76_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $86_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $86_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 9:
     break label$2;
    };
   }
   FUNCTION_TABLE[$3_1]($0_1, $2_1);
  }
 }
 
 function $515($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   $4_1 = $2_1 - $3_1 | 0;
   $6_1 = $4_1 >>> 0 < 256 >>> 0;
   $1680($5_1 | 0, $1_1 | 0, ($6_1 ? $4_1 : 256) | 0) | 0;
   label$2 : {
    if ($6_1) {
     break label$2
    }
    $2_1 = $2_1 - $3_1 | 0;
    label$3 : while (1) {
     $512($0_1 | 0, $5_1 | 0, 256 | 0);
     $4_1 = $4_1 + -256 | 0;
     if ($4_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
    $4_1 = $2_1 & 255 | 0;
   }
   $512($0_1 | 0, $5_1 | 0, $4_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $516($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $8_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $517($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 134227424 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $518($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $5$hi = 0, $3_1 = 0, $16_1 = 0, $16$hi = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $5_1 = $0_1;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $2_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $5$hi;
    $0_1 = $5_1;
    $0$hi = i64toi32_i32$2;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $5$hi;
   $2_1 = $5_1;
   if (!$2_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $3_1 = ($2_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $2_1 - Math_imul($3_1, 10) | 0 | 48 | 0;
    $4_1 = $2_1 >>> 0 > 9 >>> 0;
    $2_1 = $3_1;
    if ($4_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $519($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $510($0_1 | 0, $1_1 | 0, $2_1 | 0, 83 | 0, 84 | 0) | 0 | 0;
 }
 
 function $520($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $16_1 = 0, $13_1 = 0, $18_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $17_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $15_1 = 0, i64toi32_i32$5 = 0, $19_1 = 0, $24_1 = 0.0, $11_1 = 0, $20_1 = 0, $7_1 = 0, $22_1 = 0, $22$hi = 0, $8_1 = 0, $12_1 = 0, $21_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $23$hi = 0, $45_1 = 0, $128_1 = 0, $23_1 = 0, $319_1 = 0, $321$hi = 0, $323$hi = 0, $325_1 = 0, $325$hi = 0, $327$hi = 0, $331_1 = 0, $331$hi = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $522(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $22_1 = i64toi32_i32$0;
    $22$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $42_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $43_1 = 0
      } else {
       $43_1 = 1
      }
      $44_1 = $43_1;
     } else {
      $44_1 = 0
     }
     $42_1 = $44_1;
    }
    if ($42_1) {
     break label$2
    }
    $1_1 = -$1_1;
    i64toi32_i32$2 = $522(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $22_1 = i64toi32_i32$2;
    $22$hi = i64toi32_i32$1;
    $7_1 = 1;
    $8_1 = 134227440;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $7_1 = 1;
    $8_1 = 134227443;
    break label$1;
   }
   $7_1 = $4_1 & 1 | 0;
   $8_1 = $7_1 ? 134227446 : 134227441;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$3 = $22_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $9_1 = $7_1 + 3 | 0;
    $515($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 & -65537 | 0 | 0);
    $512($0_1 | 0, $8_1 | 0, $7_1 | 0);
    $10_1 = ($5_1 >>> 5 | 0) & 1 | 0;
    $512($0_1 | 0, ($1_1 != $1_1 ? ($10_1 ? 134227467 : 134227471) : $10_1 ? 134227459 : 134227463) | 0, 3 | 0);
    $515($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   label$6 : {
    $1_1 = +$509(+$1_1, $6_1 + 44 | 0 | 0);
    $1_1 = $1_1 + $1_1;
    if ($1_1 == 0.0) {
     break label$6
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + -1 | 0;
   }
   $11_1 = $6_1 + 16 | 0;
   label$7 : {
    $12_1 = $5_1 | 32 | 0;
    if (($12_1 | 0) != (97 | 0)) {
     break label$7
    }
    $13_1 = $5_1 & 32 | 0;
    $14_1 = $13_1 ? $8_1 + 9 | 0 : $8_1;
    label$8 : {
     if ($3_1 >>> 0 > 11 >>> 0) {
      break label$8
     }
     $10_1 = 12 - $3_1 | 0;
     if (!$10_1) {
      break label$8
     }
     $24_1 = 8.0;
     label$9 : while (1) {
      $24_1 = $24_1 * 16.0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$9
      }
      break label$9;
     };
     label$10 : {
      if ((HEAPU8[$14_1 >> 0] | 0 | 0) != (45 | 0)) {
       break label$10
      }
      $1_1 = -($24_1 + (-$1_1 - $24_1));
      break label$8;
     }
     $1_1 = $1_1 + $24_1 - $24_1;
    }
    label$11 : {
     $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
     $128_1 = $10_1;
     $10_1 = $10_1 >> 31 | 0;
     i64toi32_i32$1 = 0;
     $10_1 = $518(($128_1 + $10_1 | 0) ^ $10_1 | 0 | 0, i64toi32_i32$1 | 0, $11_1 | 0) | 0;
     if (($10_1 | 0) != ($11_1 | 0)) {
      break label$11
     }
     HEAP8[($6_1 + 15 | 0) >> 0] = 48;
     $10_1 = $6_1 + 15 | 0;
    }
    $15_1 = $7_1 | 2 | 0;
    $16_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $17_1 = $10_1 + -2 | 0;
    HEAP8[$17_1 >> 0] = $5_1 + 15 | 0;
    HEAP8[($10_1 + -1 | 0) >> 0] = ($16_1 | 0) < (0 | 0) ? 45 : 43;
    $18_1 = $4_1 & 8 | 0;
    $16_1 = $6_1 + 16 | 0;
    label$12 : while (1) {
     $10_1 = $16_1;
     label$13 : {
      label$14 : {
       if (!(Math_abs($1_1) < 2147483648.0)) {
        break label$14
       }
       $16_1 = ~~$1_1;
       break label$13;
      }
      $16_1 = -2147483648;
     }
     HEAP8[$10_1 >> 0] = HEAPU8[($16_1 + 134227424 | 0) >> 0] | 0 | $13_1 | 0;
     $1_1 = ($1_1 - +($16_1 | 0)) * 16.0;
     label$15 : {
      $16_1 = $10_1 + 1 | 0;
      if (($16_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
       break label$15
      }
      label$16 : {
       if ($18_1) {
        break label$16
       }
       if (($3_1 | 0) > (0 | 0)) {
        break label$16
       }
       if ($1_1 == 0.0) {
        break label$15
       }
      }
      HEAP8[($10_1 + 1 | 0) >> 0] = 46;
      $16_1 = $10_1 + 2 | 0;
     }
     if ($1_1 != 0.0) {
      continue label$12
     }
     break label$12;
    };
    label$17 : {
     label$18 : {
      if (!$3_1) {
       break label$18
      }
      if ((($16_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
       break label$18
      }
      $10_1 = (($3_1 + $11_1 | 0) - $17_1 | 0) + 2 | 0;
      break label$17;
     }
     $10_1 = (($11_1 - ($6_1 + 16 | 0) | 0) - $17_1 | 0) + $16_1 | 0;
    }
    $9_1 = $10_1 + $15_1 | 0;
    $515($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 | 0);
    $512($0_1 | 0, $14_1 | 0, $15_1 | 0);
    $515($0_1 | 0, 48 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 65536 | 0 | 0);
    $16_1 = $16_1 - ($6_1 + 16 | 0) | 0;
    $512($0_1 | 0, $6_1 + 16 | 0 | 0, $16_1 | 0);
    $13_1 = $11_1 - $17_1 | 0;
    $515($0_1 | 0, 48 | 0, $10_1 - ($16_1 + $13_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
    $512($0_1 | 0, $17_1 | 0, $13_1 | 0);
    $515($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $10_1 = ($3_1 | 0) < (0 | 0);
   label$19 : {
    label$20 : {
     if ($1_1 != 0.0) {
      break label$20
     }
     $18_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
     break label$19;
    }
    $18_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + -28 | 0;
    HEAP32[($6_1 + 44 | 0) >> 2] = $18_1;
    $1_1 = $1_1 * 268435456.0;
   }
   $14_1 = $10_1 ? 6 : $3_1;
   $19_1 = ($18_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
   $13_1 = $19_1;
   label$21 : while (1) {
    label$22 : {
     label$23 : {
      if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
       break label$23
      }
      $10_1 = ~~$1_1 >>> 0;
      break label$22;
     }
     $10_1 = 0;
    }
    HEAP32[$13_1 >> 2] = $10_1;
    $13_1 = $13_1 + 4 | 0;
    $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
    if ($1_1 != 0.0) {
     continue label$21
    }
    break label$21;
   };
   label$24 : {
    label$25 : {
     if (($18_1 | 0) >= (1 | 0)) {
      break label$25
     }
     $10_1 = $13_1;
     $16_1 = $19_1;
     break label$24;
    }
    $16_1 = $19_1;
    label$26 : while (1) {
     $18_1 = ($18_1 | 0) < (29 | 0) ? $18_1 : 29;
     label$27 : {
      $10_1 = $13_1 + -4 | 0;
      if ($10_1 >>> 0 < $16_1 >>> 0) {
       break label$27
      }
      i64toi32_i32$1 = 0;
      $23_1 = $18_1;
      $23$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $22_1 = 0;
      $22$hi = i64toi32_i32$1;
      label$28 : while (1) {
       $319_1 = $10_1;
       i64toi32_i32$0 = $10_1;
       i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
       i64toi32_i32$2 = 0;
       $321$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $23$hi;
       i64toi32_i32$2 = $321$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$1 = $23$hi;
       i64toi32_i32$3 = $23_1;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $45_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
        $45_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       }
       $323$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $22$hi;
       i64toi32_i32$2 = $22_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       $325_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
       $325$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $323$hi;
       i64toi32_i32$1 = $45_1;
       i64toi32_i32$2 = $325$hi;
       i64toi32_i32$3 = $325_1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $22_1 = i64toi32_i32$4;
       $22$hi = i64toi32_i32$5;
       $327$hi = i64toi32_i32$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $22_1 = i64toi32_i32$1;
       $22$hi = i64toi32_i32$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$1 = __wasm_i64_mul($22_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $331_1 = i64toi32_i32$1;
       $331$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $327$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$1 = $331$hi;
       i64toi32_i32$3 = $331_1;
       i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
       i64toi32_i32$4 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       HEAP32[$319_1 >> 2] = i64toi32_i32$2;
       $10_1 = $10_1 + -4 | 0;
       if ($10_1 >>> 0 >= $16_1 >>> 0) {
        continue label$28
       }
       break label$28;
      };
      i64toi32_i32$4 = $22$hi;
      $10_1 = $22_1;
      if (!$10_1) {
       break label$27
      }
      $16_1 = $16_1 + -4 | 0;
      HEAP32[$16_1 >> 2] = $10_1;
     }
     label$29 : {
      label$30 : while (1) {
       $10_1 = $13_1;
       if ($10_1 >>> 0 <= $16_1 >>> 0) {
        break label$29
       }
       $13_1 = $10_1 + -4 | 0;
       if (!(HEAP32[$13_1 >> 2] | 0)) {
        continue label$30
       }
       break label$30;
      };
     }
     $18_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $18_1 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $18_1;
     $13_1 = $10_1;
     if (($18_1 | 0) > (0 | 0)) {
      continue label$26
     }
     break label$26;
    };
   }
   label$31 : {
    if (($18_1 | 0) > (-1 | 0)) {
     break label$31
    }
    $20_1 = (($14_1 + 25 | 0 | 0) / (9 | 0) | 0) + 1 | 0;
    $21_1 = ($12_1 | 0) == (102 | 0);
    label$32 : while (1) {
     $13_1 = 0 - $18_1 | 0;
     $9_1 = ($13_1 | 0) < (9 | 0) ? $13_1 : 9;
     label$33 : {
      label$34 : {
       if ($16_1 >>> 0 < $10_1 >>> 0) {
        break label$34
       }
       $16_1 = HEAP32[$16_1 >> 2] | 0 ? $16_1 : $16_1 + 4 | 0;
       break label$33;
      }
      $17_1 = 1e9 >>> $9_1 | 0;
      $15_1 = (-1 << $9_1 | 0) ^ -1 | 0;
      $18_1 = 0;
      $13_1 = $16_1;
      label$35 : while (1) {
       $3_1 = HEAP32[$13_1 >> 2] | 0;
       HEAP32[$13_1 >> 2] = ($3_1 >>> $9_1 | 0) + $18_1 | 0;
       $18_1 = Math_imul($3_1 & $15_1 | 0, $17_1);
       $13_1 = $13_1 + 4 | 0;
       if ($13_1 >>> 0 < $10_1 >>> 0) {
        continue label$35
       }
       break label$35;
      };
      $16_1 = HEAP32[$16_1 >> 2] | 0 ? $16_1 : $16_1 + 4 | 0;
      if (!$18_1) {
       break label$33
      }
      HEAP32[$10_1 >> 2] = $18_1;
      $10_1 = $10_1 + 4 | 0;
     }
     $18_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $9_1 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $18_1;
     $13_1 = $21_1 ? $19_1 : $16_1;
     $10_1 = (($10_1 - $13_1 | 0) >> 2 | 0 | 0) > ($20_1 | 0) ? $13_1 + ($20_1 << 2 | 0) | 0 : $10_1;
     if (($18_1 | 0) < (0 | 0)) {
      continue label$32
     }
     break label$32;
    };
   }
   $13_1 = 0;
   label$36 : {
    if ($16_1 >>> 0 >= $10_1 >>> 0) {
     break label$36
    }
    $13_1 = Math_imul(($19_1 - $16_1 | 0) >> 2 | 0, 9);
    $18_1 = 10;
    $3_1 = HEAP32[$16_1 >> 2] | 0;
    if ($3_1 >>> 0 < 10 >>> 0) {
     break label$36
    }
    label$37 : while (1) {
     $13_1 = $13_1 + 1 | 0;
     $18_1 = Math_imul($18_1, 10);
     if ($3_1 >>> 0 >= $18_1 >>> 0) {
      continue label$37
     }
     break label$37;
    };
   }
   label$38 : {
    $18_1 = ($14_1 - (($12_1 | 0) == (102 | 0) ? 0 : $13_1) | 0) - (($14_1 | 0) != (0 | 0) & ($12_1 | 0) == (103 | 0) | 0) | 0;
    if (($18_1 | 0) >= (Math_imul(($10_1 - $19_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
     break label$38
    }
    $3_1 = $18_1 + 9216 | 0;
    $17_1 = ($3_1 | 0) / (9 | 0) | 0;
    $9_1 = (($17_1 << 2 | 0) + $19_1 | 0) + -4092 | 0;
    $18_1 = 10;
    label$39 : {
     $3_1 = ($3_1 - Math_imul($17_1, 9) | 0) + 1 | 0;
     if (($3_1 | 0) > (8 | 0)) {
      break label$39
     }
     label$40 : while (1) {
      $18_1 = Math_imul($18_1, 10);
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != (9 | 0)) {
       continue label$40
      }
      break label$40;
     };
    }
    $17_1 = HEAP32[$9_1 >> 2] | 0;
    $15_1 = ($17_1 >>> 0) / ($18_1 >>> 0) | 0;
    $3_1 = $17_1 - Math_imul($15_1, $18_1) | 0;
    label$41 : {
     label$42 : {
      $20_1 = $9_1 + 4 | 0;
      if (($20_1 | 0) != ($10_1 | 0)) {
       break label$42
      }
      if (!$3_1) {
       break label$41
      }
     }
     $15_1 = $15_1 & 1 | 0;
     $24_1 = .5;
     label$43 : {
      $21_1 = $18_1 >>> 1 | 0;
      if ($3_1 >>> 0 < $21_1 >>> 0) {
       break label$43
      }
      $24_1 = ($20_1 | 0) == ($10_1 | 0) ? (($3_1 | 0) == ($21_1 | 0) ? 1.0 : 1.5) : 1.5;
     }
     $1_1 = $15_1 ? 9007199254740994.0 : 9007199254740992.0;
     label$44 : {
      if (!$7_1) {
       break label$44
      }
      if ((HEAPU8[$8_1 >> 0] | 0 | 0) != (45 | 0)) {
       break label$44
      }
      $24_1 = -$24_1;
      $1_1 = -$1_1;
     }
     $3_1 = $17_1 - $3_1 | 0;
     HEAP32[$9_1 >> 2] = $3_1;
     if ($1_1 + $24_1 == $1_1) {
      break label$41
     }
     $13_1 = $3_1 + $18_1 | 0;
     HEAP32[$9_1 >> 2] = $13_1;
     label$45 : {
      if ($13_1 >>> 0 < 1e9 >>> 0) {
       break label$45
      }
      label$46 : while (1) {
       HEAP32[$9_1 >> 2] = 0;
       label$47 : {
        $9_1 = $9_1 + -4 | 0;
        if ($9_1 >>> 0 >= $16_1 >>> 0) {
         break label$47
        }
        $16_1 = $16_1 + -4 | 0;
        HEAP32[$16_1 >> 2] = 0;
       }
       $13_1 = (HEAP32[$9_1 >> 2] | 0) + 1 | 0;
       HEAP32[$9_1 >> 2] = $13_1;
       if ($13_1 >>> 0 > 999999999 >>> 0) {
        continue label$46
       }
       break label$46;
      };
     }
     $13_1 = Math_imul(($19_1 - $16_1 | 0) >> 2 | 0, 9);
     $18_1 = 10;
     $3_1 = HEAP32[$16_1 >> 2] | 0;
     if ($3_1 >>> 0 < 10 >>> 0) {
      break label$41
     }
     label$48 : while (1) {
      $13_1 = $13_1 + 1 | 0;
      $18_1 = Math_imul($18_1, 10);
      if ($3_1 >>> 0 >= $18_1 >>> 0) {
       continue label$48
      }
      break label$48;
     };
    }
    $18_1 = $9_1 + 4 | 0;
    $10_1 = $10_1 >>> 0 > $18_1 >>> 0 ? $18_1 : $10_1;
   }
   label$49 : {
    label$50 : while (1) {
     label$51 : {
      $18_1 = $10_1;
      if ($10_1 >>> 0 > $16_1 >>> 0) {
       break label$51
      }
      $15_1 = 0;
      break label$49;
     }
     $10_1 = $18_1 + -4 | 0;
     if (!(HEAP32[$10_1 >> 2] | 0)) {
      continue label$50
     }
     break label$50;
    };
    $15_1 = 1;
   }
   label$52 : {
    if (($12_1 | 0) != (103 | 0)) {
     break label$52
    }
    $10_1 = $14_1 ? $14_1 : 1;
    $3_1 = ($10_1 | 0) > ($13_1 | 0) & ($13_1 | 0) > (-5 | 0) | 0;
    $14_1 = ($3_1 ? $13_1 ^ -1 | 0 : -1) + $10_1 | 0;
    $5_1 = ($3_1 ? -1 : -2) + $5_1 | 0;
    if ($4_1 & 8 | 0) {
     break label$52
    }
    $10_1 = 9;
    label$53 : {
     if (!$15_1) {
      break label$53
     }
     $10_1 = 9;
     $9_1 = HEAP32[($18_1 + -4 | 0) >> 2] | 0;
     if (!$9_1) {
      break label$53
     }
     $3_1 = 10;
     $10_1 = 0;
     if (($9_1 >>> 0) % (10 >>> 0) | 0) {
      break label$53
     }
     label$54 : while (1) {
      $10_1 = $10_1 + 1 | 0;
      $3_1 = Math_imul($3_1, 10);
      if (!(($9_1 >>> 0) % ($3_1 >>> 0) | 0)) {
       continue label$54
      }
      break label$54;
     };
    }
    $3_1 = Math_imul(($18_1 - $19_1 | 0) >> 2 | 0, 9) + -9 | 0;
    label$55 : {
     if (($5_1 | 32 | 0 | 0) != (102 | 0)) {
      break label$55
     }
     $10_1 = $3_1 - $10_1 | 0;
     $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
     $14_1 = ($14_1 | 0) < ($10_1 | 0) ? $14_1 : $10_1;
     break label$52;
    }
    $10_1 = ($3_1 + $13_1 | 0) - $10_1 | 0;
    $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
    $14_1 = ($14_1 | 0) < ($10_1 | 0) ? $14_1 : $10_1;
   }
   $3_1 = $14_1 ? 1 : ($4_1 >>> 3 | 0) & 1 | 0;
   label$56 : {
    label$57 : {
     $17_1 = $5_1 | 32 | 0;
     if (($17_1 | 0) != (102 | 0)) {
      break label$57
     }
     $10_1 = ($13_1 | 0) > (0 | 0) ? $13_1 : 0;
     break label$56;
    }
    label$58 : {
     $10_1 = $13_1 >> 31 | 0;
     i64toi32_i32$4 = 0;
     $10_1 = $518(($13_1 + $10_1 | 0) ^ $10_1 | 0 | 0, i64toi32_i32$4 | 0, $11_1 | 0) | 0;
     if (($11_1 - $10_1 | 0 | 0) > (1 | 0)) {
      break label$58
     }
     label$59 : while (1) {
      $10_1 = $10_1 + -1 | 0;
      HEAP8[$10_1 >> 0] = 48;
      if (($11_1 - $10_1 | 0 | 0) < (2 | 0)) {
       continue label$59
      }
      break label$59;
     };
    }
    $20_1 = $10_1 + -2 | 0;
    HEAP8[$20_1 >> 0] = $5_1;
    HEAP8[($10_1 + -1 | 0) >> 0] = ($13_1 | 0) < (0 | 0) ? 45 : 43;
    $10_1 = $11_1 - $20_1 | 0;
   }
   $9_1 = ((($7_1 + $14_1 | 0) + $3_1 | 0) + $10_1 | 0) + 1 | 0;
   $515($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 | 0);
   $512($0_1 | 0, $8_1 | 0, $7_1 | 0);
   $515($0_1 | 0, 48 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 65536 | 0 | 0);
   label$60 : {
    label$61 : {
     if (($17_1 | 0) != (102 | 0)) {
      break label$61
     }
     $17_1 = $6_1 + 16 | 0 | 8 | 0;
     $13_1 = $6_1 + 16 | 0 | 9 | 0;
     $3_1 = $16_1 >>> 0 > $19_1 >>> 0 ? $19_1 : $16_1;
     $16_1 = $3_1;
     label$62 : while (1) {
      i64toi32_i32$5 = $16_1;
      i64toi32_i32$4 = HEAP32[$16_1 >> 2] | 0;
      i64toi32_i32$0 = 0;
      $10_1 = $518(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $13_1 | 0) | 0;
      label$63 : {
       label$64 : {
        if (($16_1 | 0) == ($3_1 | 0)) {
         break label$64
        }
        if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
         break label$63
        }
        label$65 : while (1) {
         $10_1 = $10_1 + -1 | 0;
         HEAP8[$10_1 >> 0] = 48;
         if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
          continue label$65
         }
         break label$63;
        };
       }
       if (($10_1 | 0) != ($13_1 | 0)) {
        break label$63
       }
       HEAP8[($6_1 + 24 | 0) >> 0] = 48;
       $10_1 = $17_1;
      }
      $512($0_1 | 0, $10_1 | 0, $13_1 - $10_1 | 0 | 0);
      $16_1 = $16_1 + 4 | 0;
      if ($16_1 >>> 0 <= $19_1 >>> 0) {
       continue label$62
      }
      break label$62;
     };
     label$66 : {
      if (!($4_1 & 8 | 0 | $14_1 | 0)) {
       break label$66
      }
      $512($0_1 | 0, 134227475 | 0, 1 | 0);
     }
     label$67 : {
      if ($16_1 >>> 0 >= $18_1 >>> 0) {
       break label$67
      }
      if (($14_1 | 0) < (1 | 0)) {
       break label$67
      }
      label$68 : while (1) {
       label$69 : {
        i64toi32_i32$5 = $16_1;
        i64toi32_i32$0 = HEAP32[$16_1 >> 2] | 0;
        i64toi32_i32$4 = 0;
        $10_1 = $518(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $13_1 | 0) | 0;
        if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
         break label$69
        }
        label$70 : while (1) {
         $10_1 = $10_1 + -1 | 0;
         HEAP8[$10_1 >> 0] = 48;
         if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
          continue label$70
         }
         break label$70;
        };
       }
       $512($0_1 | 0, $10_1 | 0, (($14_1 | 0) < (9 | 0) ? $14_1 : 9) | 0);
       $14_1 = $14_1 + -9 | 0;
       $16_1 = $16_1 + 4 | 0;
       if ($16_1 >>> 0 >= $18_1 >>> 0) {
        break label$67
       }
       if (($14_1 | 0) > (0 | 0)) {
        continue label$68
       }
       break label$68;
      };
     }
     $515($0_1 | 0, 48 | 0, $14_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
     break label$60;
    }
    label$71 : {
     if (($14_1 | 0) < (0 | 0)) {
      break label$71
     }
     $17_1 = $15_1 ? $18_1 : $16_1 + 4 | 0;
     $15_1 = $4_1 & 8 | 0;
     $19_1 = $6_1 + 16 | 0 | 8 | 0;
     $18_1 = $6_1 + 16 | 0 | 9 | 0;
     $13_1 = $16_1;
     label$72 : while (1) {
      label$73 : {
       i64toi32_i32$5 = $13_1;
       i64toi32_i32$4 = HEAP32[$13_1 >> 2] | 0;
       i64toi32_i32$0 = 0;
       $10_1 = $518(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $18_1 | 0) | 0;
       if (($10_1 | 0) != ($18_1 | 0)) {
        break label$73
       }
       HEAP8[($6_1 + 24 | 0) >> 0] = 48;
       $10_1 = $19_1;
      }
      label$74 : {
       label$75 : {
        if (($13_1 | 0) == ($16_1 | 0)) {
         break label$75
        }
        if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
         break label$74
        }
        label$76 : while (1) {
         $10_1 = $10_1 + -1 | 0;
         HEAP8[$10_1 >> 0] = 48;
         if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
          continue label$76
         }
         break label$74;
        };
       }
       $512($0_1 | 0, $10_1 | 0, 1 | 0);
       $10_1 = $10_1 + 1 | 0;
       label$77 : {
        if ($15_1) {
         break label$77
        }
        if (($14_1 | 0) < (1 | 0)) {
         break label$74
        }
       }
       $512($0_1 | 0, 134227475 | 0, 1 | 0);
      }
      $3_1 = $18_1 - $10_1 | 0;
      $512($0_1 | 0, $10_1 | 0, (($14_1 | 0) > ($3_1 | 0) ? $3_1 : $14_1) | 0);
      $14_1 = $14_1 - $3_1 | 0;
      $13_1 = $13_1 + 4 | 0;
      if ($13_1 >>> 0 >= $17_1 >>> 0) {
       break label$71
      }
      if (($14_1 | 0) > (-1 | 0)) {
       continue label$72
      }
      break label$72;
     };
    }
    $515($0_1 | 0, 48 | 0, $14_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
    $512($0_1 | 0, $20_1 | 0, $11_1 - $20_1 | 0 | 0);
   }
   $515($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  global$0 = $6_1 + 560 | 0;
  return (($9_1 | 0) < ($2_1 | 0) ? $2_1 : $9_1) | 0;
 }
 
 function $521($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  HEAPF64[$0_1 >> 3] = +$1674($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $522($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $523($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $1679($4_1 + 8 | 0 | 0, 134227480 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$3
     }
     if ($1_1) {
      break label$2
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $519($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   HEAP32[($392() | 0) >> 2] = 75;
   $0_1 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $524($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = $3_1;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $1679($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $525($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  $4_1 = -1;
  label$1 : {
   $2_1 = $523(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $2_1 + 1 | 0;
   $2_1 = $1652($5_1 | 0) | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   if (!$2_1) {
    break label$1
   }
   $4_1 = $523($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $526($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  label$1 : {
   if ($479($0_1 | 0) | 0) {
    break label$1
   }
   $1_1 = (($0_1 | 32 | 0) + -97 | 0) >>> 0 < 6 >>> 0;
  }
  return $1_1 | 0;
 }
 
 function $527($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $526($0_1 | 0) | 0 | 0;
 }
 
 function $528($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $497($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $529($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $523($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $530($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return -1 | 0;
 }
 
 function $531($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $3_1 | 0;
 }
 
 function $532($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $533($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($504($0_1 | 0) | 0)) {
    break label$1
   }
   $1653($0_1 | 0);
  }
 }
 
 function $534($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 4 | 0;
   if (HEAP32[$2_1 >> 2] | 0) {
    continue label$1
   }
   break label$1;
  };
  return ($2_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $535() {
  return 134227624 | 0;
 }
 
 function $536() {
  return 134228400 | 0;
 }
 
 function $537() {
  return 134229952 | 0;
 }
 
 function $538($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!$0_1) {
        break label$5
       }
       if ($2_1 >>> 0 >= 4 >>> 0) {
        break label$4
       }
       $5_1 = $2_1;
       break label$3;
      }
      $6_1 = 0;
      label$6 : {
       $0_1 = HEAP32[$1_1 >> 2] | 0;
       $5_1 = HEAP32[$0_1 >> 2] | 0;
       if ($5_1) {
        break label$6
       }
       $7_1 = 0;
       break label$1;
      }
      label$7 : while (1) {
       $8_1 = 1;
       label$8 : {
        if ($5_1 >>> 0 < 128 >>> 0) {
         break label$8
        }
        $7_1 = -1;
        $8_1 = $506($4_1 + 12 | 0 | 0, $5_1 | 0, 0 | 0) | 0;
        if (($8_1 | 0) == (-1 | 0)) {
         break label$1
        }
       }
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $0_1 = $0_1 + 4 | 0;
       $6_1 = $8_1 + $6_1 | 0;
       $7_1 = $6_1;
       if ($5_1) {
        continue label$7
       }
       break label$1;
      };
     }
     $8_1 = HEAP32[$1_1 >> 2] | 0;
     $5_1 = $2_1;
     label$9 : while (1) {
      label$10 : {
       label$11 : {
        $6_1 = HEAP32[$8_1 >> 2] | 0;
        if (($6_1 + -1 | 0) >>> 0 < 127 >>> 0) {
         break label$11
        }
        label$12 : {
         if ($6_1) {
          break label$12
         }
         HEAP8[$0_1 >> 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $7_1 = -1;
        $6_1 = $506($0_1 | 0, $6_1 | 0, 0 | 0) | 0;
        if (($6_1 | 0) == (-1 | 0)) {
         break label$1
        }
        $5_1 = $5_1 - $6_1 | 0;
        $0_1 = $0_1 + $6_1 | 0;
        break label$10;
       }
       HEAP8[$0_1 >> 0] = $6_1;
       $5_1 = $5_1 + -1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $8_1 = HEAP32[$1_1 >> 2] | 0;
      }
      $8_1 = $8_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $8_1;
      if ($5_1 >>> 0 > 3 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    label$13 : {
     if (!$5_1) {
      break label$13
     }
     $8_1 = HEAP32[$1_1 >> 2] | 0;
     label$14 : while (1) {
      label$15 : {
       label$16 : {
        $6_1 = HEAP32[$8_1 >> 2] | 0;
        if (($6_1 + -1 | 0) >>> 0 < 127 >>> 0) {
         break label$16
        }
        label$17 : {
         if ($6_1) {
          break label$17
         }
         HEAP8[$0_1 >> 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $7_1 = -1;
        $6_1 = $506($4_1 + 12 | 0 | 0, $6_1 | 0, 0 | 0) | 0;
        if (($6_1 | 0) == (-1 | 0)) {
         break label$1
        }
        if ($5_1 >>> 0 < $6_1 >>> 0) {
         break label$2
        }
        $506($0_1 | 0, HEAP32[$8_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $5_1 = $5_1 - $6_1 | 0;
        $0_1 = $0_1 + $6_1 | 0;
        break label$15;
       }
       HEAP8[$0_1 >> 0] = $6_1;
       $5_1 = $5_1 + -1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $8_1 = HEAP32[$1_1 >> 2] | 0;
      }
      $8_1 = $8_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $8_1;
      if ($5_1) {
       continue label$14
      }
      break label$14;
     };
    }
    $7_1 = $2_1;
    break label$1;
   }
   $7_1 = $2_1 - $5_1 | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $539($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $7_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $8_1 = 0;
  label$1 : {
   $3_1 = $0_1 ? $3_1 : 256;
   if (!$3_1) {
    break label$1
   }
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $9_1 = $3_1 >>> 0 <= $2_1 >>> 0;
     if (!$9_1) {
      break label$3
     }
     $8_1 = 0;
     break label$2;
    }
    $8_1 = 0;
    if ($2_1 >>> 0 > 32 >>> 0) {
     break label$2
    }
    $8_1 = 0;
    break label$1;
   }
   label$4 : while (1) {
    $9_1 = $9_1 & 1 | 0 ? $3_1 : $2_1;
    $2_1 = $2_1 - $9_1 | 0;
    label$5 : {
     $9_1 = $538($7_1 | 0, $5_1 + 12 | 0 | 0, $9_1 | 0, 0 | 0) | 0;
     if (($9_1 | 0) != (-1 | 0)) {
      break label$5
     }
     $3_1 = 0;
     $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     $8_1 = -1;
     break label$1;
    }
    $10_1 = ($7_1 | 0) == ($5_1 + 16 | 0 | 0);
    $7_1 = $10_1 ? $7_1 : $7_1 + $9_1 | 0;
    $8_1 = $9_1 + $8_1 | 0;
    $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $3_1 = $3_1 - ($10_1 ? 0 : $9_1) | 0;
    if (!$3_1) {
     break label$1
    }
    if (!$6_1) {
     break label$1
    }
    $9_1 = $2_1 >>> 0 >= $3_1 >>> 0;
    if ($9_1) {
     continue label$4
    }
    if ($2_1 >>> 0 >= 33 >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$6 : {
   label$7 : {
    if (!$6_1) {
     break label$7
    }
    if (!$3_1) {
     break label$7
    }
    if (!$2_1) {
     break label$7
    }
    label$8 : while (1) {
     label$9 : {
      $9_1 = $506($7_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
      if (($9_1 + 1 | 0) >>> 0 > 1 >>> 0) {
       break label$9
      }
      $10_1 = -1;
      if ($9_1) {
       break label$6
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = 0;
      break label$7;
     }
     $6_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
     $8_1 = $9_1 + $8_1 | 0;
     $3_1 = $3_1 - $9_1 | 0;
     if (!$3_1) {
      break label$7
     }
     $7_1 = $7_1 + $9_1 | 0;
     $10_1 = $8_1;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$8
     }
     break label$6;
    };
   }
   $10_1 = $8_1;
  }
  label$10 : {
   if (!$0_1) {
    break label$10
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 272 | 0;
  return $10_1 | 0;
 }
 
 function $540($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if (!$3_1) {
               break label$12
              }
              $5_1 = HEAP32[$3_1 >> 2] | 0;
              if (!$5_1) {
               break label$12
              }
              label$13 : {
               if ($0_1) {
                break label$13
               }
               $3_1 = $2_1;
               break label$11;
              }
              HEAP32[$3_1 >> 2] = 0;
              $3_1 = $2_1;
              break label$9;
             }
             label$14 : {
              label$15 : {
               if (HEAP32[(HEAP32[(($541() | 0) + 188 | 0) >> 2] | 0) >> 2] | 0) {
                break label$15
               }
               if (!$0_1) {
                break label$14
               }
               if (!$2_1) {
                break label$1
               }
               $5_1 = $2_1;
               label$16 : {
                label$17 : while (1) {
                 $3_1 = HEAP8[$4_1 >> 0] | 0;
                 if (!$3_1) {
                  break label$16
                 }
                 HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
                 $0_1 = $0_1 + 4 | 0;
                 $4_1 = $4_1 + 1 | 0;
                 $5_1 = $5_1 + -1 | 0;
                 if ($5_1) {
                  continue label$17
                 }
                 break label$1;
                };
               }
               HEAP32[$0_1 >> 2] = 0;
               HEAP32[$1_1 >> 2] = 0;
               return $2_1 - $5_1 | 0 | 0;
              }
              $3_1 = $2_1;
              if (!$0_1) {
               break label$10
              }
              $3_1 = $2_1;
              $6_1 = 0;
              break label$8;
             }
             return $238($4_1 | 0) | 0 | 0;
            }
            $6_1 = 0;
            break label$7;
           }
           $6_1 = 1;
           break label$7;
          }
          $6_1 = 1;
         }
         label$18 : while (1) {
          label$19 : {
           switch ($6_1 | 0) {
           case 0:
            if (!$3_1) {
             break label$1
            }
            label$21 : {
             label$22 : while (1) {
              label$23 : {
               label$24 : {
                label$25 : {
                 $6_1 = HEAPU8[$4_1 >> 0] | 0;
                 $7_1 = $6_1 + -1 | 0;
                 if ($7_1 >>> 0 <= 126 >>> 0) {
                  break label$25
                 }
                 $5_1 = $6_1;
                 break label$24;
                }
                if ($4_1 & 3 | 0) {
                 break label$23
                }
                if ($3_1 >>> 0 < 5 >>> 0) {
                 break label$23
                }
                label$26 : {
                 label$27 : while (1) {
                  $5_1 = HEAP32[$4_1 >> 2] | 0;
                  if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
                   break label$26
                  }
                  HEAP32[$0_1 >> 2] = $5_1 & 255 | 0;
                  HEAP32[($0_1 + 4 | 0) >> 2] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
                  HEAP32[($0_1 + 8 | 0) >> 2] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
                  HEAP32[($0_1 + 12 | 0) >> 2] = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
                  $0_1 = $0_1 + 16 | 0;
                  $4_1 = $4_1 + 4 | 0;
                  $3_1 = $3_1 + -4 | 0;
                  if ($3_1 >>> 0 > 4 >>> 0) {
                   continue label$27
                  }
                  break label$27;
                 };
                 $5_1 = HEAPU8[$4_1 >> 0] | 0;
                }
                $6_1 = $5_1 & 255 | 0;
                $7_1 = $6_1 + -1 | 0;
               }
               if ($7_1 >>> 0 > 126 >>> 0) {
                break label$21
               }
              }
              HEAP32[$0_1 >> 2] = $6_1;
              $0_1 = $0_1 + 4 | 0;
              $4_1 = $4_1 + 1 | 0;
              $3_1 = $3_1 + -1 | 0;
              if (!$3_1) {
               break label$1
              }
              continue label$22;
             };
            }
            $6_1 = $6_1 + -194 | 0;
            if ($6_1 >>> 0 > 50 >>> 0) {
             break label$5
            }
            $4_1 = $4_1 + 1 | 0;
            $5_1 = HEAP32[(($6_1 << 2 | 0) + 134226416 | 0) >> 2] | 0;
            $6_1 = 1;
            continue label$18;
           default:
            break label$19;
           };
          }
          $7_1 = HEAPU8[$4_1 >> 0] | 0;
          $6_1 = $7_1 >>> 3 | 0;
          if (($6_1 + -16 | 0 | ($6_1 + ($5_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
           break label$6
          }
          $8_1 = $4_1 + 1 | 0;
          label$28 : {
           label$29 : {
            label$30 : {
             label$31 : {
              $6_1 = $7_1 + -128 | 0 | ($5_1 << 6 | 0) | 0;
              if (($6_1 | 0) <= (-1 | 0)) {
               break label$31
              }
              $4_1 = $8_1;
              break label$30;
             }
             $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
             if ($7_1 >>> 0 > 63 >>> 0) {
              break label$29
             }
             $8_1 = $4_1 + 2 | 0;
             label$32 : {
              $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
              if (($6_1 | 0) <= (-1 | 0)) {
               break label$32
              }
              $4_1 = $8_1;
              break label$30;
             }
             $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
             if ($7_1 >>> 0 > 63 >>> 0) {
              break label$29
             }
             $4_1 = $4_1 + 3 | 0;
             $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
            }
            HEAP32[$0_1 >> 2] = $6_1;
            $3_1 = $3_1 + -1 | 0;
            $0_1 = $0_1 + 4 | 0;
            break label$28;
           }
           HEAP32[($392() | 0) >> 2] = 84;
           $4_1 = $4_1 + -1 | 0;
           break label$3;
          }
          $6_1 = 0;
          continue label$18;
         };
        }
        label$33 : while (1) {
         label$34 : {
          switch ($6_1 | 0) {
          case 0:
           $6_1 = (HEAPU8[$4_1 >> 0] | 0) >>> 3 | 0;
           if (($6_1 + -16 | 0 | (($5_1 >> 26 | 0) + $6_1 | 0) | 0) >>> 0 > 7 >>> 0) {
            break label$6
           }
           $6_1 = $4_1 + 1 | 0;
           label$36 : {
            label$37 : {
             if ($5_1 & 33554432 | 0) {
              break label$37
             }
             $4_1 = $6_1;
             break label$36;
            }
            if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
             break label$6
            }
            $6_1 = $4_1 + 2 | 0;
            label$38 : {
             if ($5_1 & 524288 | 0) {
              break label$38
             }
             $4_1 = $6_1;
             break label$36;
            }
            if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
             break label$6
            }
            $4_1 = $4_1 + 3 | 0;
           }
           $3_1 = $3_1 + -1 | 0;
           $6_1 = 1;
           continue label$33;
          default:
           break label$34;
          };
         }
         label$39 : while (1) {
          label$40 : {
           $5_1 = HEAPU8[$4_1 >> 0] | 0;
           if (($5_1 + -1 | 0) >>> 0 > 126 >>> 0) {
            break label$40
           }
           if ($4_1 & 3 | 0) {
            break label$40
           }
           $5_1 = HEAP32[$4_1 >> 2] | 0;
           if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
            break label$40
           }
           label$41 : while (1) {
            $3_1 = $3_1 + -4 | 0;
            $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
            $6_1 = $4_1 + 4 | 0;
            $4_1 = $6_1;
            if (!(($5_1 | ($5_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
             continue label$41
            }
            break label$41;
           };
           $4_1 = $6_1;
          }
          label$42 : {
           $6_1 = $5_1 & 255 | 0;
           if (($6_1 + -1 | 0) >>> 0 > 126 >>> 0) {
            break label$42
           }
           $3_1 = $3_1 + -1 | 0;
           $4_1 = $4_1 + 1 | 0;
           continue label$39;
          }
          break label$39;
         };
         $6_1 = $6_1 + -194 | 0;
         if ($6_1 >>> 0 > 50 >>> 0) {
          break label$5
         }
         $4_1 = $4_1 + 1 | 0;
         $5_1 = HEAP32[(($6_1 << 2 | 0) + 134226416 | 0) >> 2] | 0;
         $6_1 = 0;
         continue label$33;
        };
       }
       $4_1 = $4_1 + -1 | 0;
       if ($5_1) {
        break label$4
       }
       $5_1 = HEAPU8[$4_1 >> 0] | 0;
      }
      if ($5_1 & 255 | 0) {
       break label$4
      }
      label$43 : {
       if (!$0_1) {
        break label$43
       }
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$1_1 >> 2] = 0;
      }
      return $2_1 - $3_1 | 0 | 0;
     }
     HEAP32[($392() | 0) >> 2] = 84;
     if (!$0_1) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = $4_1;
   }
   return -1 | 0;
  }
  HEAP32[$1_1 >> 2] = $4_1;
  return $2_1 | 0;
 }
 
 function $541() {
  return $482() | 0 | 0;
 }
 
 function $542($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 1040 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $7_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $8_1 = 0;
  label$1 : {
   $3_1 = $0_1 ? $3_1 : 256;
   if (!$3_1) {
    break label$1
   }
   if (!$6_1) {
    break label$1
   }
   $9_1 = $2_1 >>> 2 | 0;
   $10_1 = $9_1 >>> 0 >= $3_1 >>> 0;
   $8_1 = 0;
   label$2 : {
    if ($2_1 >>> 0 > 131 >>> 0) {
     break label$2
    }
    if ($9_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
   }
   label$3 : while (1) {
    $9_1 = $10_1 & 1 | 0 ? $3_1 : $9_1;
    $2_1 = $2_1 - $9_1 | 0;
    label$4 : {
     $9_1 = $540($7_1 | 0, $5_1 + 12 | 0 | 0, $9_1 | 0, $4_1 | 0) | 0;
     if (($9_1 | 0) != (-1 | 0)) {
      break label$4
     }
     $3_1 = 0;
     $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     $8_1 = -1;
     break label$1;
    }
    $10_1 = ($7_1 | 0) == ($5_1 + 16 | 0 | 0);
    $7_1 = $10_1 ? $7_1 : $7_1 + ($9_1 << 2 | 0) | 0;
    $8_1 = $9_1 + $8_1 | 0;
    $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $3_1 = $3_1 - ($10_1 ? 0 : $9_1) | 0;
    if (!$3_1) {
     break label$1
    }
    if (!$6_1) {
     break label$1
    }
    $9_1 = $2_1 >>> 2 | 0;
    $10_1 = $9_1 >>> 0 >= $3_1 >>> 0;
    if ($2_1 >>> 0 > 131 >>> 0) {
     continue label$3
    }
    if ($9_1 >>> 0 >= $3_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  label$5 : {
   label$6 : {
    if (!$6_1) {
     break label$6
    }
    if (!$3_1) {
     break label$6
    }
    if (!$2_1) {
     break label$6
    }
    label$7 : while (1) {
     label$8 : {
      $9_1 = $483($7_1 | 0, $6_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
      if (($9_1 + 2 | 0) >>> 0 > 2 >>> 0) {
       break label$8
      }
      label$9 : {
       $2_1 = $9_1 + 1 | 0;
       if ($2_1 >>> 0 > 1 >>> 0) {
        break label$9
       }
       label$10 : {
        switch ($2_1 | 0) {
        case 1:
         break label$10;
        default:
         break label$5;
        };
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = 0;
       break label$6;
      }
      HEAP32[$4_1 >> 2] = 0;
      break label$6;
     }
     $6_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + $9_1 | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
     $8_1 = $8_1 + 1 | 0;
     $3_1 = $3_1 + -1 | 0;
     if (!$3_1) {
      break label$6
     }
     $7_1 = $7_1 + 4 | 0;
     $2_1 = $2_1 - $9_1 | 0;
     $9_1 = $8_1;
     if ($2_1) {
      continue label$7
     }
     break label$5;
    };
   }
   $9_1 = $8_1;
  }
  label$11 : {
   if (!$0_1) {
    break label$11
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 1040 | 0;
  return $9_1 | 0;
 }
 
 function $543($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    if (!$2_1) {
     break label$3
    }
    $0_1 = $0_1 ? $0_1 : $3_1 + 12 | 0;
    label$4 : {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     $5_1 = ($4_1 << 24 | 0) >> 24 | 0;
     if (($5_1 | 0) < (0 | 0)) {
      break label$4
     }
     HEAP32[$0_1 >> 2] = $4_1;
     $1_1 = ($5_1 | 0) != (0 | 0);
     break label$1;
    }
    $4_1 = HEAP32[(HEAP32[(($544() | 0) + 188 | 0) >> 2] | 0) >> 2] | 0;
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    label$5 : {
     if ($4_1) {
      break label$5
     }
     HEAP32[$0_1 >> 2] = $5_1 & 57343 | 0;
     $1_1 = 1;
     break label$1;
    }
    $4_1 = ($5_1 & 255 | 0) + -194 | 0;
    if ($4_1 >>> 0 > 50 >>> 0) {
     break label$3
    }
    $4_1 = HEAP32[(($4_1 << 2 | 0) + 134226416 | 0) >> 2] | 0;
    label$6 : {
     if ($2_1 >>> 0 > 3 >>> 0) {
      break label$6
     }
     if (($4_1 << (Math_imul($2_1, 6) + -6 | 0) | 0 | 0) < (0 | 0)) {
      break label$3
     }
    }
    $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $2_1 = $5_1 >>> 3 | 0;
    if (($2_1 + -16 | 0 | ($2_1 + ($4_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
     break label$3
    }
    label$7 : {
     $2_1 = $5_1 + -128 | 0 | ($4_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$7
     }
     HEAP32[$0_1 >> 2] = $2_1;
     $1_1 = 2;
     break label$1;
    }
    $4_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) + -128 | 0;
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    label$8 : {
     $2_1 = $4_1 | ($2_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$8
     }
     HEAP32[$0_1 >> 2] = $2_1;
     $1_1 = 3;
     break label$1;
    }
    $1_1 = (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) + -128 | 0;
    if ($1_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    HEAP32[$0_1 >> 2] = $1_1 | ($2_1 << 6 | 0) | 0;
    $1_1 = 4;
    break label$1;
   }
   HEAP32[($392() | 0) >> 2] = 84;
   $1_1 = -1;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $544() {
  return $482() | 0 | 0;
 }
 
 function $545() {
  return (HEAP32[(HEAP32[(($546() | 0) + 188 | 0) >> 2] | 0) >> 2] | 0 ? 4 : 1) | 0;
 }
 
 function $546() {
  return $482() | 0 | 0;
 }
 
 function $547($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $483(0 | 0, $0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 134222056) | 0) | 0 | 0;
 }
 
 function $548($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $549() | 0;
  $2_1 = HEAP32[($1_1 + 188 | 0) >> 2] | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[($1_1 + 188 | 0) >> 2] = ($0_1 | 0) == (-1 | 0) ? 134222016 : $0_1;
  }
  return (($2_1 | 0) == (134222016 | 0) ? -1 : $2_1) | 0;
 }
 
 function $549() {
  return $482() | 0 | 0;
 }
 
 function $550($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$0 = $551($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $551($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 8 | 0) >> 2] = ($0_1 | 0) < (0 | 0) ? -1 : $0_1 + 2147483647 | 0;
  i64toi32_i32$0 = 0;
  $477($4_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $481($4_1 | 0, $2_1 | 0, 1 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $0_1 + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + (HEAP32[($4_1 + 120 | 0) >> 2] | 0) | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) | 0;
  }
  global$0 = $4_1 + 144 | 0;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $552($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$0 = $551($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $553($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $550($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $554($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $552($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $555($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $556($2_1 | 0, $0_1 | 0, $1_1 | 0, 0 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = Math_fround($1675($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0));
  global$0 = $2_1 + 16 | 0;
  return Math_fround($3_1);
 }
 
 function $556($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $36_1 = 0, $36$hi = 0, $42_1 = 0, $42$hi = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $1680($4_1 + 16 | 0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 92 | 0) >> 2] = -1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = 0;
  $477($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $488($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $32_1 = $2_1;
   $33_1 = $1_1;
   $34_1 = $1_1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[($4_1 + 136 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
   $36_1 = i64toi32_i32$0;
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$0 = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $42_1 = i64toi32_i32$0;
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $36$hi;
   i64toi32_i32$2 = $36_1;
   i64toi32_i32$0 = $42$hi;
   i64toi32_i32$3 = $42_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   HEAP32[$32_1 >> 2] = !(i64toi32_i32$4 | i64toi32_i32$5 | 0) ? $33_1 : $34_1 + i64toi32_i32$4 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $557($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $556($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = +$1674($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $558($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $4$hi = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $556($3_1 | 0, $1_1 | 0, $2_1 | 0, 2 | 0);
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $559($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return Math_fround(Math_fround($555($0_1 | 0, $1_1 | 0)));
 }
 
 function $560($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return +(+$557($0_1 | 0, $1_1 | 0));
 }
 
 function $561($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $5$hi = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $558($4_1 | 0, $1_1 | 0, $2_1 | 0);
  i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $562($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $563($0_1) {
  $0_1 = $0_1 | 0;
  $1558($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $564($0_1) {
  $0_1 = $0_1 | 0;
  $1567($562($0_1 | 0) | 0 | 0);
 }
 
 function $565($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $6_1 = HEAP8[$1_1 >> 0] | 0;
     $7_1 = HEAP8[$3_1 >> 0] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$3;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $566($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $567($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $567($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $382($0_1 | 0) | 0;
  $568($0_1 | 0, $1_1 | 0, $2_1 | 0);
  return $0_1 | 0;
 }
 
 function $568($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1457($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1391($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $894($0_1 | 0, $4_1 | 0);
     $5_1 = $893($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1395($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1397($1343($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1399($0_1 | 0, $5_1 | 0);
    $1400($0_1 | 0, $6_1 | 0);
    $892($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $891($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $891($5_1 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1576($0_1 | 0);
  abort();
 }
 
 function $569($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = ($3_1 << 4 | 0) + (HEAP8[$1_1 >> 0] | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $570($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $571($0_1) {
  $0_1 = $0_1 | 0;
  $1567($570($0_1 | 0) | 0 | 0);
 }
 
 function $572($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     $7_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$3;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $573($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $574($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $574($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $575($0_1 | 0) | 0;
  $576($0_1 | 0, $1_1 | 0, $2_1 | 0);
  return $0_1 | 0;
 }
 
 function $575($0_1) {
  $0_1 = $0_1 | 0;
  $1459($0_1 | 0) | 0;
  $1460($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $576($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1461($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1462($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $957($0_1 | 0, $4_1 | 0);
     $5_1 = $956($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1463($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1464($1351($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1465($0_1 | 0, $5_1 | 0);
    $1466($0_1 | 0, $6_1 | 0);
    $955($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $954($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $954($5_1 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1576($0_1 | 0);
  abort();
 }
 
 function $577($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $578($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($197($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
    label$3 : {
     $3_1 = HEAP32[$6_1 >> 2] | 0;
     if ($3_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     label$4 : {
      switch ($3_1 | 0) {
      default:
       HEAP8[$5_1 >> 0] = 0;
       break label$1;
      case 1:
       break label$4;
      };
     }
     HEAP8[$5_1 >> 0] = 1;
     break label$1;
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $316($6_1 | 0, $3_1 | 0);
   $1_1 = $225($6_1 | 0) | 0;
   $579($6_1 | 0) | 0;
   $316($6_1 | 0, $3_1 | 0);
   $3_1 = $580($6_1 | 0) | 0;
   $579($6_1 | 0) | 0;
   $581($6_1 | 0, $3_1 | 0);
   $582($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($583($6_1 + 24 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $1584($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $579($0_1) {
  $0_1 = $0_1 | 0;
  $1155(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $580($0_1) {
  $0_1 = $0_1 | 0;
  return $584($0_1 | 0, 134222304 | 0) | 0 | 0;
 }
 
 function $581($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $582($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $583($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  $8_1 = $585($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 86;
  $9_1 = 0;
  $10_1 = $586($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 101 >>> 0) {
     break label$2
    }
    $11_1 = $1652($8_1 | 0) | 0;
    if (!$11_1) {
     break label$1
    }
    $587($10_1 | 0, $11_1 | 0);
   }
   $12_1 = $11_1;
   $1_1 = $2_1;
   label$3 : while (1) {
    label$4 : {
     if (($1_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $13_1 = 0;
     label$5 : {
      label$6 : while (1) {
       $1_1 = $317($0_1 | 0, $7_1 + 120 | 0 | 0) | 0;
       label$7 : {
        label$8 : {
         if (!$8_1) {
          break label$8
         }
         if ($1_1) {
          break label$7
         }
        }
        label$9 : {
         if (!($321($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
        }
        break label$5;
       }
       $14_1 = $318($0_1 | 0) | 0;
       label$10 : {
        if ($6_1) {
         break label$10
        }
        $14_1 = $588($4_1 | 0, $14_1 | 0) | 0;
       }
       $15_1 = $13_1 + 1 | 0;
       $16_1 = 0;
       $12_1 = $11_1;
       $1_1 = $2_1;
       label$11 : while (1) {
        label$12 : {
         if (($1_1 | 0) != ($3_1 | 0)) {
          break label$12
         }
         $13_1 = $15_1;
         if (!($16_1 & 1 | 0)) {
          continue label$6
         }
         $320($0_1 | 0) | 0;
         $13_1 = $15_1;
         $12_1 = $11_1;
         $1_1 = $2_1;
         if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
          continue label$6
         }
         label$13 : while (1) {
          label$14 : {
           if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
           }
           $13_1 = $15_1;
           continue label$6;
          }
          label$15 : {
           if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
            break label$15
           }
           if (($589($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
            break label$15
           }
           HEAP8[$12_1 >> 0] = 0;
           $9_1 = $9_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
         };
        }
        label$16 : {
         if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
          break label$16
         }
         $17_1 = HEAPU8[($590($1_1 | 0, $13_1 | 0) | 0) >> 0] | 0;
         label$17 : {
          if ($6_1) {
           break label$17
          }
          $17_1 = $588($4_1 | 0, ($17_1 << 24 | 0) >> 24 | 0 | 0) | 0;
         }
         label$18 : {
          label$19 : {
           if (($14_1 & 255 | 0 | 0) != ($17_1 & 255 | 0 | 0)) {
            break label$19
           }
           $16_1 = 1;
           if (($589($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
            break label$16
           }
           HEAP8[$12_1 >> 0] = 2;
           $16_1 = 1;
           $9_1 = $9_1 + 1 | 0;
           break label$18;
          }
          HEAP8[$12_1 >> 0] = 0;
         }
         $8_1 = $8_1 + -1 | 0;
        }
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue label$11;
       };
      };
     }
     label$20 : {
      label$21 : {
       label$22 : while (1) {
        if (($2_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        label$23 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
          break label$23
         }
         $11_1 = $11_1 + 1 | 0;
         $2_1 = $2_1 + 12 | 0;
         continue label$22;
        }
        break label$22;
       };
       $3_1 = $2_1;
       break label$20;
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
     }
     $591($10_1 | 0) | 0;
     global$0 = $7_1 + 128 | 0;
     return $3_1 | 0;
    }
    label$24 : {
     label$25 : {
      if ($592($1_1 | 0) | 0) {
       break label$25
      }
      HEAP8[$12_1 >> 0] = 1;
      break label$24;
     }
     HEAP8[$12_1 >> 0] = 2;
     $9_1 = $9_1 + 1 | 0;
     $8_1 = $8_1 + -1 | 0;
    }
    $12_1 = $12_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue label$3;
   };
  }
  $1565();
  abort();
 }
 
 function $584($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1150(HEAP32[$0_1 >> 2] | 0 | 0, $1116($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $585($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1499($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $586($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1481($0_1 | 0, $3_1 + 12 | 0 | 0, $385($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $587($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1482($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1482($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1483($0_1 | 0) | 0) >> 2] | 0]($2_1);
  }
 }
 
 function $588($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $589($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($217($0_1 | 0) | 0)) {
    break label$1
   }
   return $639($0_1 | 0) | 0 | 0;
  }
  return $640($0_1 | 0) | 0 | 0;
 }
 
 function $590($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($205($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $591($0_1) {
  $0_1 = $0_1 | 0;
  $587($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $592($0_1) {
  $0_1 = $0_1 | 0;
  return !($589($0_1 | 0) | 0) | 0;
 }
 
 function $593($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $594($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $594($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $595($3_1 | 0) | 0;
  $2_1 = $596($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $597($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $0_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($317($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $0_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($602($318($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $320($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $603($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($321($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $595($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    $0_1 = ($197($0_1 | 0) | 0) & 74 | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if (($0_1 | 0) != (64 | 0)) {
      break label$3
     }
     return 8 | 0;
    }
    if (($0_1 | 0) != (8 | 0)) {
     break label$1
    }
    return 16 | 0;
   }
   return 0 | 0;
  }
  return 10 | 0;
 }
 
 function $596($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $684($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $597($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $316($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1_1 = $580($3_1 + 8 | 0 | 0) | 0;
  HEAP8[$2_1 >> 0] = $681($1_1 | 0) | 0;
  $682($0_1 | 0, $1_1 | 0);
  $579($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $598($0_1) {
  $0_1 = $0_1 | 0;
  $382($0_1 | 0) | 0;
  $636($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $599($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 10;
  label$1 : {
   if (!($217($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($637($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $600($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1588($0_1 | 0, $1_1 | 0, 0 | 0);
 }
 
 function $601($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($638($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $602($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP8[($10_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
      label$5 : {
       $11_1 = $0_1 & 255 | 0;
       $12_1 = (HEAPU8[($9_1 + 24 | 0) >> 0] | 0 | 0) == ($11_1 | 0);
       if ($12_1) {
        break label$5
       }
       if ((HEAPU8[($9_1 + 25 | 0) >> 0] | 0 | 0) != ($11_1 | 0)) {
        break label$4
       }
      }
      HEAP32[$3_1 >> 2] = $2_1 + 1 | 0;
      HEAP8[$2_1 >> 0] = $12_1 ? 43 : 45;
      break label$3;
     }
     if (!($589($6_1 | 0) | 0)) {
      break label$2
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
    }
    $0_1 = 0;
    HEAP32[$4_1 >> 2] = 0;
    break label$1;
   }
   $0_1 = -1;
   $9_1 = ($641($9_1 | 0, $9_1 + 26 | 0 | 0, $10_1 + 15 | 0 | 0) | 0) - $9_1 | 0;
   if (($9_1 | 0) > (23 | 0)) {
    break label$1
   }
   label$6 : {
    label$7 : {
     $6_1 = $1_1 + -8 | 0;
     if ($6_1 >>> 0 <= 2 >>> 0) {
      break label$7
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$6
     }
     if (($9_1 | 0) < (22 | 0)) {
      break label$6
     }
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
     HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 134231504 | 0) >> 0] | 0;
     break label$1;
    }
    label$8 : {
     switch ($6_1 | 0) {
     case 1:
      break label$6;
     default:
      break label$8;
     };
    }
    if (($9_1 | 0) >= ($1_1 | 0)) {
     break label$1
    }
   }
   $0_1 = HEAP32[$3_1 >> 2] | 0;
   HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
   HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 134231504 | 0) >> 0] | 0;
   HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
   $0_1 = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $603($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $4_1 = 0, $6_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $5_1 = 0, $36_1 = 0, $36$hi = 0, $40_1 = 0, $40$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     $5_1 = HEAP32[($392() | 0) >> 2] | 0;
     HEAP32[($392() | 0) >> 2] = 0;
     i64toi32_i32$0 = $554($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $634() | 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $6_1 = i64toi32_i32$0;
     $6$hi = i64toi32_i32$1;
     label$4 : {
      $0_1 = HEAP32[($392() | 0) >> 2] | 0;
      if ($0_1) {
       break label$4
      }
      HEAP32[($392() | 0) >> 2] = $5_1;
     }
     label$5 : {
      if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$5
      }
      HEAP32[$2_1 >> 2] = 4;
      break label$2;
     }
     label$6 : {
      label$7 : {
       if (($0_1 | 0) == (34 | 0)) {
        break label$7
       }
       i64toi32_i32$1 = $6$hi;
       i64toi32_i32$0 = $1500() | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $36_1 = i64toi32_i32$0;
       $36$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $6$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$0 = $36$hi;
       i64toi32_i32$3 = $36_1;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $16_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $17_1 = 0
         } else {
          $17_1 = 1
         }
         $18_1 = $17_1;
        } else {
         $18_1 = 0
        }
        $16_1 = $18_1;
       }
       if ($16_1) {
        break label$7
       }
       i64toi32_i32$2 = $6$hi;
       i64toi32_i32$1 = $134() | 0;
       i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
       $40_1 = i64toi32_i32$1;
       $40$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $6$hi;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$1 = $40$hi;
       i64toi32_i32$0 = $40_1;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
        $19_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0) {
          $20_1 = 0
         } else {
          $20_1 = 1
         }
         $21_1 = $20_1;
        } else {
         $21_1 = 0
        }
        $19_1 = $21_1;
       }
       if ($19_1) {
        break label$6
       }
      }
      HEAP32[$2_1 >> 2] = 4;
      label$8 : {
       i64toi32_i32$3 = $6$hi;
       i64toi32_i32$3 = $6$hi;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = 1;
       if (($6$hi | 0) < (i64toi32_i32$2 | 0)) {
        $22_1 = 1
       } else {
        if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $23_1 = 0
         } else {
          $23_1 = 1
         }
         $24_1 = $23_1;
        } else {
         $24_1 = 0
        }
        $22_1 = $24_1;
       }
       if ($22_1) {
        break label$8
       }
       $0_1 = $134() | 0;
       break label$1;
      }
      $0_1 = $1500() | 0;
      break label$1;
     }
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = $6$hi;
     $0_1 = $6_1;
     break label$1;
    }
    HEAP32[$2_1 >> 2] = 4;
   }
   $0_1 = 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $604($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($589($0_1 | 0) | 0)) {
    break label$1
   }
   $930($1_1 | 0, $2_1 | 0);
   $4_1 = $2_1 + -4 | 0;
   $2_1 = $205($0_1 | 0) | 0;
   $5_1 = $2_1 + ($589($0_1 | 0) | 0) | 0;
   label$2 : {
    label$3 : while (1) {
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if ($1_1 >>> 0 >= $4_1 >>> 0) {
      break label$2
     }
     label$4 : {
      if (($0_1 | 0) < (1 | 0)) {
       break label$4
      }
      if (($0_1 | 0) >= ($824() | 0 | 0)) {
       break label$4
      }
      if ((HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP8[$2_1 >> 0] | 0 | 0)) {
       break label$4
      }
      HEAP32[$3_1 >> 2] = 4;
      return;
     }
     $2_1 = ($5_1 - $2_1 | 0 | 0) > (1 | 0) ? $2_1 + 1 | 0 : $2_1;
     $1_1 = $1_1 + 4 | 0;
     continue label$3;
    };
   }
   if (($0_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (($0_1 | 0) >= ($824() | 0 | 0)) {
    break label$1
   }
   if (((HEAP32[$4_1 >> 2] | 0) + -1 | 0) >>> 0 < (HEAP8[$2_1 >> 0] | 0) >>> 0) {
    break label$1
   }
   HEAP32[$3_1 >> 2] = 4;
  }
 }
 
 function $605($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $606($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $606($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $595($3_1 | 0) | 0;
  $2_1 = $596($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $597($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $0_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($317($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $0_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($602($318($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $320($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $607($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($321($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $607($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $5_1 = 0, $35_1 = 0, $35$hi = 0, $37$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     $5_1 = HEAP32[($392() | 0) >> 2] | 0;
     HEAP32[($392() | 0) >> 2] = 0;
     i64toi32_i32$0 = $554($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $634() | 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $6_1 = i64toi32_i32$0;
     $6$hi = i64toi32_i32$1;
     label$4 : {
      $0_1 = HEAP32[($392() | 0) >> 2] | 0;
      if ($0_1) {
       break label$4
      }
      HEAP32[($392() | 0) >> 2] = $5_1;
     }
     label$5 : {
      if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$5
      }
      HEAP32[$2_1 >> 2] = 4;
      break label$2;
     }
     label$6 : {
      if (($0_1 | 0) == (34 | 0)) {
       break label$6
      }
      i64toi32_i32$1 = $6$hi;
      i64toi32_i32$1 = $1502() | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $35_1 = i64toi32_i32$1;
      $35$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = $35$hi;
      i64toi32_i32$3 = $35_1;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
       $15_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $16_1 = 0
        } else {
         $16_1 = 1
        }
        $17_1 = $16_1;
       } else {
        $17_1 = 0
       }
       $15_1 = $17_1;
      }
      if ($15_1) {
       break label$6
      }
      i64toi32_i32$2 = $1503() | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $37$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$0 = $37$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$1 = $6_1;
      if ((i64toi32_i32$0 | 0) > ($6$hi | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       break label$1
      }
     }
     HEAP32[$2_1 >> 2] = 4;
     label$7 : {
      i64toi32_i32$3 = $6$hi;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 1;
      if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
       $21_1 = 1
      } else {
       if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
         $22_1 = 0
        } else {
         $22_1 = 1
        }
        $23_1 = $22_1;
       } else {
        $23_1 = 0
       }
       $21_1 = $23_1;
      }
      if ($21_1) {
       break label$7
      }
      i64toi32_i32$1 = $1503() | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$3;
      break label$1;
     }
     i64toi32_i32$3 = $1502() | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $6_1 = i64toi32_i32$3;
     $6$hi = i64toi32_i32$1;
     break label$1;
    }
    HEAP32[$2_1 >> 2] = 4;
   }
   i64toi32_i32$1 = 0;
   $6_1 = 0;
   $6$hi = i64toi32_i32$1;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$3 | 0;
 }
 
 function $608($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $609($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $609($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $595($3_1 | 0) | 0;
  $2_1 = $596($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $597($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $0_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($317($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $0_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($602($318($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $320($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $610($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($321($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $610($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $47$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      $5_1 = HEAPU8[$0_1 >> 0] | 0;
      if (($5_1 | 0) != (45 | 0)) {
       break label$4
      }
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != ($1_1 | 0)) {
       break label$4
      }
      HEAP32[$2_1 >> 2] = 4;
      break label$2;
     }
     $6_1 = HEAP32[($392() | 0) >> 2] | 0;
     HEAP32[($392() | 0) >> 2] = 0;
     i64toi32_i32$0 = $553($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $634() | 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $7_1 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$1;
     label$5 : {
      $0_1 = HEAP32[($392() | 0) >> 2] | 0;
      if ($0_1) {
       break label$5
      }
      HEAP32[($392() | 0) >> 2] = $6_1;
     }
     label$6 : {
      if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = 4;
      break label$2;
     }
     label$7 : {
      label$8 : {
       if (($0_1 | 0) == (34 | 0)) {
        break label$8
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = 0;
       $47$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = $47$hi;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($1506() | 0) >>> 0 | 0) | 0) {
        break label$7
       }
      }
      HEAP32[$2_1 >> 2] = 4;
      $0_1 = $1506() | 0;
      break label$1;
     }
     $0_1 = $7_1;
     $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
     break label$1;
    }
    HEAP32[$2_1 >> 2] = 4;
   }
   $0_1 = 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $611($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $612($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $612($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $595($3_1 | 0) | 0;
  $2_1 = $596($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $597($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $0_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($317($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $0_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($602($318($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $320($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $613($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($321($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $613($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $47$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      $5_1 = HEAPU8[$0_1 >> 0] | 0;
      if (($5_1 | 0) != (45 | 0)) {
       break label$4
      }
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != ($1_1 | 0)) {
       break label$4
      }
      HEAP32[$2_1 >> 2] = 4;
      break label$2;
     }
     $6_1 = HEAP32[($392() | 0) >> 2] | 0;
     HEAP32[($392() | 0) >> 2] = 0;
     i64toi32_i32$0 = $553($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $634() | 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $7_1 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$1;
     label$5 : {
      $0_1 = HEAP32[($392() | 0) >> 2] | 0;
      if ($0_1) {
       break label$5
      }
      HEAP32[($392() | 0) >> 2] = $6_1;
     }
     label$6 : {
      if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = 4;
      break label$2;
     }
     label$7 : {
      label$8 : {
       if (($0_1 | 0) == (34 | 0)) {
        break label$8
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = 0;
       $47$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = $47$hi;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($1000() | 0) >>> 0 | 0) | 0) {
        break label$7
       }
      }
      HEAP32[$2_1 >> 2] = 4;
      $0_1 = $1000() | 0;
      break label$1;
     }
     $0_1 = $7_1;
     $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
     break label$1;
    }
    HEAP32[$2_1 >> 2] = 4;
   }
   $0_1 = 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $614($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $615($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $615($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $595($3_1 | 0) | 0;
  $2_1 = $596($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $597($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $0_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($317($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $0_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($602($318($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $320($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $616($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($321($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $616($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $47$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      $5_1 = HEAPU8[$0_1 >> 0] | 0;
      if (($5_1 | 0) != (45 | 0)) {
       break label$4
      }
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != ($1_1 | 0)) {
       break label$4
      }
      HEAP32[$2_1 >> 2] = 4;
      break label$2;
     }
     $6_1 = HEAP32[($392() | 0) >> 2] | 0;
     HEAP32[($392() | 0) >> 2] = 0;
     i64toi32_i32$0 = $553($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $634() | 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $7_1 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$1;
     label$5 : {
      $0_1 = HEAP32[($392() | 0) >> 2] | 0;
      if ($0_1) {
       break label$5
      }
      HEAP32[($392() | 0) >> 2] = $6_1;
     }
     label$6 : {
      if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = 4;
      break label$2;
     }
     label$7 : {
      label$8 : {
       if (($0_1 | 0) == (34 | 0)) {
        break label$8
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = 0;
       $47$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = $47$hi;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($924() | 0) >>> 0 | 0) | 0) {
        break label$7
       }
      }
      HEAP32[$2_1 >> 2] = 4;
      $0_1 = $924() | 0;
      break label$1;
     }
     $0_1 = $7_1;
     $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
     break label$1;
    }
    HEAP32[$2_1 >> 2] = 4;
   }
   $0_1 = 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $617($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $618($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $618($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $595($3_1 | 0) | 0;
  $2_1 = $596($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $597($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $0_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($317($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $0_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($602($318($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $320($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $619($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($321($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $619($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7$hi = 0, $7_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $6_1 = 0, $45$hi = 0, $51$hi = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      $5_1 = HEAPU8[$0_1 >> 0] | 0;
      if (($5_1 | 0) != (45 | 0)) {
       break label$4
      }
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != ($1_1 | 0)) {
       break label$4
      }
      HEAP32[$2_1 >> 2] = 4;
      break label$2;
     }
     $6_1 = HEAP32[($392() | 0) >> 2] | 0;
     HEAP32[($392() | 0) >> 2] = 0;
     i64toi32_i32$0 = $553($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $634() | 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $7_1 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$1;
     label$5 : {
      $0_1 = HEAP32[($392() | 0) >> 2] | 0;
      if ($0_1) {
       break label$5
      }
      HEAP32[($392() | 0) >> 2] = $6_1;
     }
     label$6 : {
      if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = 4;
      break label$2;
     }
     label$7 : {
      label$8 : {
       if (($0_1 | 0) == (34 | 0)) {
        break label$8
       }
       i64toi32_i32$1 = $1509() | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $45$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$0 = $45$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$3 = $7_1;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $7_1 >>> 0 | 0) | 0) {
        break label$7
       }
      }
      HEAP32[$2_1 >> 2] = 4;
      i64toi32_i32$2 = $1509() | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $7_1 = i64toi32_i32$2;
      $7$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + $7$hi | 0;
     i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     $51$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$2 = ($5_1 | 0) == (45 | 0);
     i64toi32_i32$5 = $51$hi;
     $16_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$1 = i64toi32_i32$2 ? $16_1 : i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : $7$hi;
     $7_1 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$0;
     break label$1;
    }
    HEAP32[$2_1 >> 2] = 4;
   }
   i64toi32_i32$0 = 0;
   $7_1 = 0;
   $7$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $620($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $621($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $621($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $622($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $1_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($317($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $1_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($623($318($6_1 + 264 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $320($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($624($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($321($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $622($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $316($5_1 + 8 | 0 | 0, $1_1 | 0);
  $632($225($5_1 + 8 | 0 | 0) | 0 | 0, 134231504 | 0, 134231536 | 0, $2_1 | 0) | 0;
  $2_1 = $580($5_1 + 8 | 0 | 0) | 0;
  HEAP8[$3_1 >> 0] = $680($2_1 | 0) | 0;
  HEAP8[$4_1 >> 0] = $681($2_1 | 0) | 0;
  $682($0_1 | 0, $2_1 | 0);
  $579($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $623($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP8[($12_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($589($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break label$1;
    }
    label$4 : {
     if (($0_1 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!($589($7_1 | 0) | 0)) {
      break label$4
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $0_1;
     $0_1 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0_1 = -1;
    $11_1 = ($683($11_1 | 0, $11_1 + 32 | 0 | 0, $12_1 + 15 | 0 | 0) | 0) - $11_1 | 0;
    if (($11_1 | 0) > (31 | 0)) {
     break label$1
    }
    $5_1 = HEAPU8[($11_1 + 134231504 | 0) >> 0] | 0;
    label$5 : {
     $0_1 = $11_1 + -22 | 0;
     if ($0_1 >>> 0 > 3 >>> 0) {
      break label$5
     }
     label$6 : {
      switch ($0_1 | 0) {
      case 2:
      case 3:
       label$8 : {
        $11_1 = HEAP32[$4_1 >> 2] | 0;
        if (($11_1 | 0) == ($3_1 | 0)) {
         break label$8
        }
        $0_1 = -1;
        if (((HEAPU8[($11_1 + -1 | 0) >> 0] | 0) & 95 | 0 | 0) != ((HEAPU8[$2_1 >> 0] | 0) & 127 | 0 | 0)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
       HEAP8[$11_1 >> 0] = $5_1;
       $0_1 = 0;
       break label$1;
      default:
       break label$6;
      };
     }
     HEAP8[$2_1 >> 0] = 80;
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
     HEAP8[$0_1 >> 0] = $5_1;
     $0_1 = 0;
     break label$1;
    }
    label$9 : {
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if (($5_1 & 95 | 0 | 0) != ($0_1 | 0)) {
      break label$9
     }
     HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$9
     }
     HEAP8[$1_1 >> 0] = 0;
     if (!($589($7_1 | 0) | 0)) {
      break label$9
     }
     $0_1 = HEAP32[$9_1 >> 2] | 0;
     if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$9
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
    }
    $0_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = $5_1;
    $0_1 = 0;
    if (($11_1 | 0) > (21 | 0)) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $624($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$2
    }
    $4_1 = HEAP32[($392() | 0) >> 2] | 0;
    HEAP32[($392() | 0) >> 2] = 0;
    $5_1 = Math_fround($1511($0_1 | 0, $3_1 + 12 | 0 | 0));
    label$3 : {
     $0_1 = HEAP32[($392() | 0) >> 2] | 0;
     if ($0_1) {
      break label$3
     }
     HEAP32[($392() | 0) >> 2] = $4_1;
    }
    $6_1 = Math_fround(0.0);
    label$4 : {
     if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$4
     }
     $6_1 = $5_1;
     if (($0_1 | 0) != (34 | 0)) {
      break label$1
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $5_1 = $6_1;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 4;
   $5_1 = Math_fround(0.0);
  }
  global$0 = $3_1 + 16 | 0;
  return Math_fround($5_1);
 }
 
 function $625($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $626($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $626($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $622($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $1_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($317($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $1_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($623($318($6_1 + 264 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $320($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$627($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($321($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $627($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0.0, $6_1 = 0.0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$2
    }
    $4_1 = HEAP32[($392() | 0) >> 2] | 0;
    HEAP32[($392() | 0) >> 2] = 0;
    $5_1 = +$1512($0_1 | 0, $3_1 + 12 | 0 | 0);
    label$3 : {
     $0_1 = HEAP32[($392() | 0) >> 2] | 0;
     if ($0_1) {
      break label$3
     }
     HEAP32[($392() | 0) >> 2] = $4_1;
    }
    $6_1 = 0.0;
    label$4 : {
     if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$4
     }
     $6_1 = $5_1;
     if (($0_1 | 0) != (34 | 0)) {
      break label$1
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $5_1 = $6_1;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 4;
   $5_1 = 0.0;
  }
  global$0 = $3_1 + 16 | 0;
  return +$5_1;
 }
 
 function $628($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $629($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $629($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $7$hi = 0, $126_1 = 0;
  $6_1 = global$0 - 288 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 280 | 0) >> 2] = $1_1;
  $622($6_1 + 224 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 239 | 0 | 0, $6_1 + 238 | 0 | 0);
  $3_1 = $598($6_1 + 208 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $1_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($317($6_1 + 280 | 0 | 0, $6_1 + 272 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($1_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $1_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 204 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($623($318($6_1 + 280 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 204 | 0 | 0, HEAP8[($6_1 + 239 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 238 | 0) >> 0] | 0 | 0, $6_1 + 224 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $320($6_1 + 280 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 224 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 23 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $630($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $126_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $126_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $604($6_1 + 224 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($321($6_1 + 280 | 0 | 0, $6_1 + 272 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 280 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 224 | 0 | 0) | 0;
  global$0 = $6_1 + 288 | 0;
  return $1_1 | 0;
 }
 
 function $630($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $8$hi = 0, $9_1 = 0, $9$hi = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$2
    }
    $5_1 = HEAP32[($392() | 0) >> 2] | 0;
    HEAP32[($392() | 0) >> 2] = 0;
    $1513($4_1 | 0, $1_1 | 0, $4_1 + 28 | 0 | 0);
    i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $7_1 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$0;
    label$3 : {
     $1_1 = HEAP32[($392() | 0) >> 2] | 0;
     if ($1_1) {
      break label$3
     }
     HEAP32[($392() | 0) >> 2] = $5_1;
    }
    i64toi32_i32$0 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $9_1 = 0;
    $9$hi = i64toi32_i32$0;
    label$4 : {
     if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$4
     }
     i64toi32_i32$0 = $7$hi;
     $8_1 = $7_1;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $6$hi;
     $9_1 = $6_1;
     $9$hi = i64toi32_i32$0;
     if (($1_1 | 0) != (34 | 0)) {
      break label$1
     }
    }
    HEAP32[$3_1 >> 2] = 4;
    i64toi32_i32$0 = $8$hi;
    $7_1 = $8_1;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    $6_1 = $9_1;
    $6$hi = i64toi32_i32$0;
    break label$1;
   }
   HEAP32[$3_1 >> 2] = 4;
   i64toi32_i32$0 = 0;
   $7_1 = 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $6_1 = 0;
   $6$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 32 | 0;
 }
 
 function $631($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $2_1 = $598($6_1 + 208 | 0 | 0) | 0;
  $316($6_1 + 16 | 0 | 0, $3_1 | 0);
  $632($225($6_1 + 16 | 0 | 0) | 0 | 0, 134231504 | 0, 134231530 | 0, $6_1 + 224 | 0 | 0) | 0;
  $579($6_1 + 16 | 0 | 0) | 0;
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $1_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($317($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $1_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
    }
    if ($602($318($6_1 + 264 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $2_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $320($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $600($3_1 | 0, (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $633($3_1 | 0) | 0;
  $7_1 = $634() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($635($1_1 | 0, $7_1 | 0, 134231537 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($321($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($2_1 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $632($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $633($0_1) {
  $0_1 = $0_1 | 0;
  return $205($0_1 | 0) | 0 | 0;
 }
 
 function $634() {
  label$1 : {
   if ((HEAPU8[(0 + 134222224 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222224 | 0) | 0)) {
    break label$1
   }
   HEAP32[(0 + 134222220 | 0) >> 2] = $505(2147483647 | 0, 134231781 | 0, 0 | 0) | 0;
   $1611(134222224 | 0);
  }
  return HEAP32[(0 + 134222220 | 0) >> 2] | 0 | 0;
 }
 
 function $635($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $1_1 = $642($4_1 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $497($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $643($1_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $636($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $1345($0_1 | 0) | 0;
  $0_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($0_1 | 0) != (3 | 0)) {
     break label$2
    }
    return;
   }
   HEAP32[($1_1 + ($0_1 << 2 | 0) | 0) >> 2] = 0;
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $637($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($220($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $638($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($217($0_1 | 0) | 0)) {
    break label$1
   }
   return $890($0_1 | 0) | 0 | 0;
  }
  return $893($0_1 | 0) | 0 | 0;
 }
 
 function $639($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($220($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $640($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[(($220($0_1 | 0) | 0) + 11 | 0) >> 0] | 0 | 0;
 }
 
 function $641($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = (HEAPU8[$2_1 >> 0] | 0) & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $642($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $548(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $643($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $548($1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $644($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($197($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
    label$3 : {
     $3_1 = HEAP32[$6_1 >> 2] | 0;
     if ($3_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     label$4 : {
      switch ($3_1 | 0) {
      default:
       HEAP8[$5_1 >> 0] = 0;
       break label$1;
      case 1:
       break label$4;
      };
     }
     HEAP8[$5_1 >> 0] = 1;
     break label$1;
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $316($6_1 | 0, $3_1 | 0);
   $1_1 = $339($6_1 | 0) | 0;
   $579($6_1 | 0) | 0;
   $316($6_1 | 0, $3_1 | 0);
   $3_1 = $645($6_1 | 0) | 0;
   $579($6_1 | 0) | 0;
   $646($6_1 | 0, $3_1 | 0);
   $647($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($648($6_1 + 24 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $1598($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $645($0_1) {
  $0_1 = $0_1 | 0;
  return $584($0_1 | 0, 134222312 | 0) | 0 | 0;
 }
 
 function $646($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $647($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $648($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  $8_1 = $649($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 86;
  $9_1 = 0;
  $10_1 = $586($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 101 >>> 0) {
     break label$2
    }
    $11_1 = $1652($8_1 | 0) | 0;
    if (!$11_1) {
     break label$1
    }
    $587($10_1 | 0, $11_1 | 0);
   }
   $12_1 = $11_1;
   $1_1 = $2_1;
   label$3 : while (1) {
    label$4 : {
     if (($1_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $13_1 = 0;
     label$5 : {
      label$6 : while (1) {
       $1_1 = $340($0_1 | 0, $7_1 + 120 | 0 | 0) | 0;
       label$7 : {
        label$8 : {
         if (!$8_1) {
          break label$8
         }
         if ($1_1) {
          break label$7
         }
        }
        label$9 : {
         if (!($344($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
        }
        break label$5;
       }
       $14_1 = $341($0_1 | 0) | 0;
       label$10 : {
        if ($6_1) {
         break label$10
        }
        $14_1 = $650($4_1 | 0, $14_1 | 0) | 0;
       }
       $15_1 = $13_1 + 1 | 0;
       $16_1 = 0;
       $12_1 = $11_1;
       $1_1 = $2_1;
       label$11 : while (1) {
        label$12 : {
         if (($1_1 | 0) != ($3_1 | 0)) {
          break label$12
         }
         $13_1 = $15_1;
         if (!($16_1 & 1 | 0)) {
          continue label$6
         }
         $343($0_1 | 0) | 0;
         $13_1 = $15_1;
         $12_1 = $11_1;
         $1_1 = $2_1;
         if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
          continue label$6
         }
         label$13 : while (1) {
          label$14 : {
           if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
           }
           $13_1 = $15_1;
           continue label$6;
          }
          label$15 : {
           if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
            break label$15
           }
           if (($651($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
            break label$15
           }
           HEAP8[$12_1 >> 0] = 0;
           $9_1 = $9_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
         };
        }
        label$16 : {
         if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
          break label$16
         }
         $17_1 = HEAP32[($652($1_1 | 0, $13_1 | 0) | 0) >> 2] | 0;
         label$17 : {
          if ($6_1) {
           break label$17
          }
          $17_1 = $650($4_1 | 0, $17_1 | 0) | 0;
         }
         label$18 : {
          label$19 : {
           if (($14_1 | 0) != ($17_1 | 0)) {
            break label$19
           }
           $16_1 = 1;
           if (($651($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
            break label$16
           }
           HEAP8[$12_1 >> 0] = 2;
           $16_1 = 1;
           $9_1 = $9_1 + 1 | 0;
           break label$18;
          }
          HEAP8[$12_1 >> 0] = 0;
         }
         $8_1 = $8_1 + -1 | 0;
        }
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue label$11;
       };
      };
     }
     label$20 : {
      label$21 : {
       label$22 : while (1) {
        if (($2_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        label$23 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
          break label$23
         }
         $11_1 = $11_1 + 1 | 0;
         $2_1 = $2_1 + 12 | 0;
         continue label$22;
        }
        break label$22;
       };
       $3_1 = $2_1;
       break label$20;
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
     }
     $591($10_1 | 0) | 0;
     global$0 = $7_1 + 128 | 0;
     return $3_1 | 0;
    }
    label$24 : {
     label$25 : {
      if ($653($1_1 | 0) | 0) {
       break label$25
      }
      HEAP8[$12_1 >> 0] = 1;
      break label$24;
     }
     HEAP8[$12_1 >> 0] = 2;
     $9_1 = $9_1 + 1 | 0;
     $8_1 = $8_1 + -1 | 0;
    }
    $12_1 = $12_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue label$3;
   };
  }
  $1565();
  abort();
 }
 
 function $649($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1514($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $650($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $651($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($784($0_1 | 0) | 0)) {
    break label$1
   }
   return $785($0_1 | 0) | 0 | 0;
  }
  return $786($0_1 | 0) | 0 | 0;
 }
 
 function $652($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($781($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $653($0_1) {
  $0_1 = $0_1 | 0;
  return !($651($0_1 | 0) | 0) | 0;
 }
 
 function $654($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $655($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $655($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $595($3_1 | 0) | 0;
  $2_1 = $656($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $657($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $0_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($340($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $0_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($658($341($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $343($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $603($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($344($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $656($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $689($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $657($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $316($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1_1 = $645($3_1 + 8 | 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = $686($1_1 | 0) | 0;
  $687($0_1 | 0, $1_1 | 0);
  $579($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $658($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
      label$5 : {
       $11_1 = (HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) == ($0_1 | 0);
       if ($11_1) {
        break label$5
       }
       if ((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
        break label$4
       }
      }
      HEAP32[$3_1 >> 2] = $2_1 + 1 | 0;
      HEAP8[$2_1 >> 0] = $11_1 ? 43 : 45;
      break label$3;
     }
     if (!($589($6_1 | 0) | 0)) {
      break label$2
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
    }
    $0_1 = 0;
    HEAP32[$4_1 >> 2] = 0;
    break label$1;
   }
   $0_1 = -1;
   $9_1 = ($679($9_1 | 0, $9_1 + 104 | 0 | 0, $10_1 + 12 | 0 | 0) | 0) - $9_1 | 0;
   if (($9_1 | 0) > (92 | 0)) {
    break label$1
   }
   $6_1 = $9_1 >> 2 | 0;
   label$6 : {
    label$7 : {
     $5_1 = $1_1 + -8 | 0;
     if ($5_1 >>> 0 <= 2 >>> 0) {
      break label$7
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$6
     }
     if (($9_1 | 0) < (88 | 0)) {
      break label$6
     }
     $9_1 = HEAP32[$3_1 >> 2] | 0;
     if (($9_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($9_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($9_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $9_1 + 1 | 0;
     HEAP8[$9_1 >> 0] = HEAPU8[($6_1 + 134231504 | 0) >> 0] | 0;
     break label$1;
    }
    label$8 : {
     switch ($5_1 | 0) {
     case 1:
      break label$6;
     default:
      break label$8;
     };
    }
    if (($6_1 | 0) >= ($1_1 | 0)) {
     break label$1
    }
   }
   $0_1 = HEAP32[$3_1 >> 2] | 0;
   HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
   HEAP8[$0_1 >> 0] = HEAPU8[($6_1 + 134231504 | 0) >> 0] | 0;
   HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
   $0_1 = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $659($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $660($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $660($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $595($3_1 | 0) | 0;
  $2_1 = $656($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $657($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $0_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($340($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $0_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($658($341($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $343($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $607($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($344($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $661($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $662($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $662($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $595($3_1 | 0) | 0;
  $2_1 = $656($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $657($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $0_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($340($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $0_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($658($341($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $343($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $610($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($344($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $663($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $664($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $664($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $595($3_1 | 0) | 0;
  $2_1 = $656($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $657($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $0_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($340($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $0_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($658($341($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $343($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $613($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($344($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $665($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $666($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $666($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $595($3_1 | 0) | 0;
  $2_1 = $656($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $657($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $0_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($340($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $0_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($658($341($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $343($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $616($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($344($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $667($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $668($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $668($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $595($3_1 | 0) | 0;
  $2_1 = $656($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $657($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $0_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($340($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $0_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($658($341($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $343($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $619($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $604($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($344($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $669($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $670($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $670($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 352 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $1_1;
  $671($6_1 + 200 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $3_1 = $598($6_1 + 184 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $1_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($340($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $1_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($672($341($6_1 + 360 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $343($6_1 + 360 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 200 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($624($1_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $604($6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($344($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 360 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 200 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $671($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $316($5_1 + 8 | 0 | 0, $1_1 | 0);
  $678($339($5_1 + 8 | 0 | 0) | 0 | 0, 134231504 | 0, 134231536 | 0, $2_1 | 0) | 0;
  $2_1 = $645($5_1 + 8 | 0 | 0) | 0;
  HEAP32[$3_1 >> 2] = $685($2_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = $686($2_1 | 0) | 0;
  $687($0_1 | 0, $2_1 | 0);
  $579($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $672($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($589($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break label$1;
    }
    label$4 : {
     if (($0_1 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!($589($7_1 | 0) | 0)) {
      break label$4
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $0_1;
     $0_1 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0_1 = -1;
    $11_1 = ($688($11_1 | 0, $11_1 + 128 | 0 | 0, $12_1 + 12 | 0 | 0) | 0) - $11_1 | 0;
    if (($11_1 | 0) > (124 | 0)) {
     break label$1
    }
    $5_1 = HEAPU8[(($11_1 >> 2 | 0) + 134231504 | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      $0_1 = __wasm_rotl_i32($11_1 + -88 | 0 | 0, 30 | 0) | 0;
      if ($0_1 >>> 0 > 3 >>> 0) {
       break label$6
      }
      label$7 : {
       switch ($0_1 | 0) {
       case 2:
       case 3:
        label$9 : {
         $11_1 = HEAP32[$4_1 >> 2] | 0;
         if (($11_1 | 0) == ($3_1 | 0)) {
          break label$9
         }
         $0_1 = -1;
         if (((HEAPU8[($11_1 + -1 | 0) >> 0] | 0) & 95 | 0 | 0) != ((HEAPU8[$2_1 >> 0] | 0) & 127 | 0 | 0)) {
          break label$1
         }
        }
        HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
        HEAP8[$11_1 >> 0] = $5_1;
        $0_1 = 0;
        break label$1;
       default:
        break label$7;
       };
      }
      HEAP8[$2_1 >> 0] = 80;
      break label$5;
     }
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if (($5_1 & 95 | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$5
     }
     HEAP8[$1_1 >> 0] = 0;
     if (!($589($7_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[$9_1 >> 2] | 0;
     if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
    }
    $0_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = $5_1;
    $0_1 = 0;
    if (($11_1 | 0) > (84 | 0)) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $673($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $674($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $674($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 352 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $1_1;
  $671($6_1 + 200 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $3_1 = $598($6_1 + 184 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $1_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($340($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $1_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($672($341($6_1 + 360 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $343($6_1 + 360 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 200 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$627($1_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $604($6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($344($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 360 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 200 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $675($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $676($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $676($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $7$hi = 0, $126_1 = 0;
  $6_1 = global$0 - 384 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 368 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 376 | 0) >> 2] = $1_1;
  $671($6_1 + 216 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 236 | 0 | 0, $6_1 + 232 | 0 | 0);
  $3_1 = $598($6_1 + 200 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $1_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 196 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($340($6_1 + 376 | 0 | 0, $6_1 + 368 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0) != ($1_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $1_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 196 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($672($341($6_1 + 376 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 196 | 0 | 0, HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0, $6_1 + 216 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $343($6_1 + 376 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($589($6_1 + 216 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 23 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $630($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  $126_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $126_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $604($6_1 + 216 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($344($6_1 + 376 | 0 | 0, $6_1 + 368 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 376 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($6_1 + 216 | 0 | 0) | 0;
  global$0 = $6_1 + 384 | 0;
  return $1_1 | 0;
 }
 
 function $677($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $2_1 = $598($6_1 + 208 | 0 | 0) | 0;
  $316($6_1 + 16 | 0 | 0, $3_1 | 0);
  $678($339($6_1 + 16 | 0 | 0) | 0 | 0, 134231504 | 0, 134231530 | 0, $6_1 + 224 | 0 | 0) | 0;
  $579($6_1 + 16 | 0 | 0) | 0;
  $3_1 = $598($6_1 + 192 | 0 | 0) | 0;
  $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
  $1_1 = $601($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($340($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($589($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $589($3_1 | 0) | 0;
     $600($3_1 | 0, ($589($3_1 | 0) | 0) << 1 | 0 | 0);
     $600($3_1 | 0, $599($3_1 | 0) | 0 | 0);
     $1_1 = $601($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
    }
    if ($658($341($6_1 + 344 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $2_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $343($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $600($3_1 | 0, (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $633($3_1 | 0) | 0;
  $7_1 = $634() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($635($1_1 | 0, $7_1 | 0, 134231537 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($344($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1584($3_1 | 0) | 0;
  $1584($2_1 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $1_1 | 0;
 }
 
 function $678($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $679($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $680($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $681($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $682($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $683($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = (HEAPU8[$2_1 >> 0] | 0) & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $684($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 134231504 | 0;
 }
 
 function $685($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $686($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $687($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $688($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $689($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $316($3_1 + 8 | 0 | 0, $1_1 | 0);
  $678($339($3_1 + 8 | 0 | 0) | 0 | 0, 134231504 | 0, 134231530 | 0, $2_1 | 0) | 0;
  $579($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $690($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($197($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $316($5_1 + 24 | 0 | 0, $2_1 | 0);
   $2_1 = $580($5_1 + 24 | 0 | 0) | 0;
   $579($5_1 + 24 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $581($5_1 + 24 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $582($5_1 + 24 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $691($5_1 + 24 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $692($5_1 + 24 | 0 | 0) | 0;
    label$6 : {
     if ($693($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $1584($5_1 + 24 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP8[($694($5_1 + 16 | 0 | 0) | 0) >> 0] | 0;
    $369($368($5_1 + 40 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $695($5_1 + 16 | 0 | 0) | 0;
    $370($5_1 + 40 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $691($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($696($1_1 + 8 | 0 | 0, $638($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $692($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($696($1_1 + 8 | 0 | 0, ($638($0_1 | 0) | 0) + ($589($0_1 | 0) | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $693($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($697($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $694($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $695($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $696($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $697($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($918($0_1 | 0) | 0 | 0) == ($918($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $698($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 134231552 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 134231553 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 134231548 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 134231549 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 134231550 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 134231551 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $699($6_1 + 24 | 0 | 1 | 0 | 0, 134231540 | 0, 1 | 0, $197($2_1 | 0) | 0 | 0);
  $7_1 = $197($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $634() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($700($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 13 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $701($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -32 | 0;
  global$0 = $4_1;
  $316($6_1 + 8 | 0 | 0, $2_1 | 0);
  $702($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $579($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $199($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $699($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   if (!($3_1 & 2048 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($3_1 & 512 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   label$4 : while (1) {
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP8[$0_1 >> 0] = $4_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   label$6 : {
    $1_1 = $3_1 & 74 | 0;
    if (($1_1 | 0) != (64 | 0)) {
     break label$6
    }
    $1_1 = 111;
    break label$5;
   }
   label$7 : {
    if (($1_1 | 0) != (8 | 0)) {
     break label$7
    }
    $1_1 = $3_1 & 16384 | 0 ? 88 : 120;
    break label$5;
   }
   $1_1 = $2_1 ? 100 : 117;
  }
  HEAP8[$0_1 >> 0] = $1_1;
 }
 
 function $700($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
  $2_1 = $642($5_1 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $523($0_1 | 0, $1_1 | 0, $3_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $643($2_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $701($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $2_1 = ($197($2_1 | 0) | 0) & 176 | 0;
   if (($2_1 | 0) != (32 | 0)) {
    break label$1
   }
   return $1_1 | 0;
  }
  label$2 : {
   if (($2_1 | 0) != (16 | 0)) {
    break label$2
   }
   label$3 : {
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    $2_1 = $3_1 + -43 | 0;
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$3
    }
    label$4 : {
     switch ($2_1 | 0) {
     case 1:
      break label$3;
     default:
      break label$4;
     };
    }
    return $0_1 + 1 | 0 | 0;
   }
   if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
    break label$2
   }
   if (($3_1 | 0) != (48 | 0)) {
    break label$2
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
    break label$2
   }
   $0_1 = $0_1 + 2 | 0;
  }
  return $0_1 | 0;
 }
 
 function $702($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $225($6_1 | 0) | 0;
  $6_1 = $580($6_1 | 0) | 0;
  $682($7_1 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($592($7_1 | 0) | 0)) {
     break label$2
    }
    $632($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + ($2_1 - $0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    $10_1 = HEAPU8[$9_1 >> 0] | 0;
    $11_1 = $10_1 + -43 | 0;
    if ($11_1 >>> 0 > 2 >>> 0) {
     break label$3
    }
    $9_1 = $0_1;
    label$4 : {
     switch ($11_1 | 0) {
     case 1:
      break label$3;
     default:
      break label$4;
     };
    }
    $11_1 = $226($8_1 | 0, ($10_1 << 24 | 0) >> 24 | 0 | 0) | 0;
    $10_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $10_1 + 1 | 0;
    HEAP8[$10_1 >> 0] = $11_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $11_1 = $226($8_1 | 0, 48 | 0) | 0;
    $10_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $10_1 + 1 | 0;
    HEAP8[$10_1 >> 0] = $11_1;
    $11_1 = $226($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $10_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $10_1 + 1 | 0;
    HEAP8[$10_1 >> 0] = $11_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $703($9_1 | 0, $2_1 | 0);
   $12_1 = $681($6_1 | 0) | 0;
   $11_1 = 0;
   $10_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $703($3_1 + ($9_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($601($7_1 | 0, $10_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($11_1 | 0) != (HEAP8[($601($7_1 | 0, $10_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $11_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = $12_1;
     $10_1 = $10_1 + ($10_1 >>> 0 < (($589($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $11_1 = 0;
    }
    $13_1 = $226($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 1 | 0;
    HEAP8[$14_1 >> 0] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $11_1 = $11_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
  $1584($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $703($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $749($0_1 | 0, $1_1 | 0);
 }
 
 function $704($0_1) {
  $0_1 = $0_1 | 0;
  return $1401($638($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $705($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $699($6_1 + 24 | 0 | 1 | 0 | 0, 134231542 | 0, 1 | 0, $197($2_1 | 0) | 0 | 0);
  $7_1 = $197($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $634() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = $8_1 + ($700($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $701($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 + -48 | 0;
  global$0 = $7_1;
  $316($6_1 + 8 | 0 | 0, $2_1 | 0);
  $702($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $579($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $199($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $706($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 134231552 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 134231553 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 134231548 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 134231549 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 134231550 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 134231551 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $699($6_1 + 24 | 0 | 1 | 0 | 0, 134231540 | 0, 0 | 0, $197($2_1 | 0) | 0 | 0);
  $7_1 = $197($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $634() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($700($8_1 | 0, ($7_1 >>> 9 | 0) & 1 | 0 | 12 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $701($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -32 | 0;
  global$0 = $4_1;
  $316($6_1 + 8 | 0 | 0, $2_1 | 0);
  $702($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $579($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $199($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $707($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $699($6_1 + 24 | 0 | 1 | 0 | 0, 134231542 | 0, 0 | 0, $197($2_1 | 0) | 0 | 0);
  $7_1 = $197($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $634() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = $8_1 + ($700($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0 | 22 | 0) + 1 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $701($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 + -48 | 0;
  global$0 = $7_1;
  $316($6_1 + 8 | 0 | 0, $2_1 | 0);
  $702($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $579($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $199($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $708($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 200 | 0) >> 2] = 37;
  HEAP32[($5_1 + 204 | 0) >> 2] = 0;
  $6_1 = $709($5_1 + 200 | 0 | 1 | 0 | 0, 134231545 | 0, $197($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($5_1 + 156 | 0) >> 2] = $5_1 + 160 | 0;
  $7_1 = $634() | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $8_1 = $710($2_1 | 0) | 0;
    HEAPF64[($5_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $8_1;
    $7_1 = $700($5_1 + 160 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = $4_1;
   $7_1 = $700($5_1 + 160 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 80 | 0) >> 2] = 86;
  $8_1 = $711($5_1 + 144 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($7_1 | 0) < (30 | 0)) {
     break label$4
    }
    $7_1 = $634() | 0;
    label$5 : {
     label$6 : {
      if (!$6_1) {
       break label$6
      }
      $6_1 = $710($2_1 | 0) | 0;
      HEAPF64[($5_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$5_1 >> 2] = $6_1;
      $7_1 = $712($5_1 + 156 | 0 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($5_1 + 16 | 0) >> 3] = $4_1;
     $7_1 = $712($5_1 + 156 | 0 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
    }
    $6_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$3
    }
    $713($8_1 | 0, $6_1 | 0);
   }
   $6_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
   $9_1 = $6_1 + $7_1 | 0;
   $10_1 = $701($6_1 | 0, $9_1 | 0, $2_1 | 0) | 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = 86;
   $6_1 = $711($5_1 + 72 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0) != ($5_1 + 160 | 0 | 0)) {
      break label$8
     }
     $7_1 = $5_1 + 80 | 0;
     $11_1 = $5_1 + 160 | 0;
     break label$7;
    }
    $7_1 = $1652($7_1 << 1 | 0 | 0) | 0;
    if (!$7_1) {
     break label$3
    }
    $713($6_1 | 0, $7_1 | 0);
    $11_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
   }
   $316($5_1 + 56 | 0 | 0, $2_1 | 0);
   $714($11_1 | 0, $10_1 | 0, $9_1 | 0, $7_1 | 0, $5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0, $5_1 + 56 | 0 | 0);
   $579($5_1 + 56 | 0 | 0) | 0;
   $2_1 = $199($1_1 | 0, $7_1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $715($6_1 | 0) | 0;
   $715($8_1 | 0) | 0;
   global$0 = $5_1 + 208 | 0;
   return $2_1 | 0;
  }
  $1565();
  abort();
 }
 
 function $709($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0;
  label$1 : {
   if (!($2_1 & 2048 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($2_1 & 1024 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  $3_1 = 0;
  label$3 : {
   $4_1 = $2_1 & 260 | 0;
   if (($4_1 | 0) == (260 | 0)) {
    break label$3
   }
   $6_1 = 10798;
   HEAP8[$0_1 >> 0] = $6_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $6_1 >>> 8 | 0;
   $0_1 = $0_1 + 2 | 0;
   $3_1 = 1;
  }
  $5_1 = $2_1 & 16384 | 0;
  label$4 : {
   label$5 : while (1) {
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$2_1) {
     break label$4
    }
    HEAP8[$0_1 >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$5;
   };
  }
  label$6 : {
   label$7 : {
    label$8 : {
     if (($4_1 | 0) == (256 | 0)) {
      break label$8
     }
     if (($4_1 | 0) != (4 | 0)) {
      break label$7
     }
     $1_1 = $5_1 ? 70 : 102;
     break label$6;
    }
    $1_1 = $5_1 ? 69 : 101;
    break label$6;
   }
   label$9 : {
    if (($4_1 | 0) != (260 | 0)) {
     break label$9
    }
    $1_1 = $5_1 ? 65 : 97;
    break label$6;
   }
   $1_1 = $5_1 ? 71 : 103;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return $3_1 | 0;
 }
 
 function $710($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $711($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $716($0_1 | 0, $3_1 + 12 | 0 | 0, $385($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $712($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $1_1 = $642($4_1 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $525($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $643($1_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $713($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($717($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($717($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($718($0_1 | 0) | 0) >> 2] | 0]($2_1);
  }
 }
 
 function $714($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $10_1 = 0, $13_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $9_1 = 0, $16_1 = 0, $12_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $225($6_1 | 0) | 0;
  $9_1 = $580($6_1 | 0) | 0;
  $682($7_1 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   $11_1 = HEAPU8[$10_1 >> 0] | 0;
   $6_1 = $11_1 + -43 | 0;
   if ($6_1 >>> 0 > 2 >>> 0) {
    break label$1
   }
   $10_1 = $0_1;
   label$2 : {
    switch ($6_1 | 0) {
    case 1:
     break label$1;
    default:
     break label$2;
    };
   }
   $6_1 = $226($8_1 | 0, ($11_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
   HEAP8[$11_1 >> 0] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $226($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $6_1 = $226($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($527(HEAP8[$6_1 >> 0] | 0 | 0, $634() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($480(HEAP8[$6_1 >> 0] | 0 | 0, $634() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($592($7_1 | 0) | 0)) {
     break label$8
    }
    $632($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + ($6_1 - $10_1 | 0) | 0;
    break label$7;
   }
   $703($10_1 | 0, $6_1 | 0);
   $12_1 = $681($9_1 | 0) | 0;
   $13_1 = 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $703($3_1 + ($10_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($601($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($13_1 | 0) != (HEAP8[($601($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $13_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $13_1 + 1 | 0;
     HEAP8[$13_1 >> 0] = $12_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($589($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $13_1 = 0;
    }
    $15_1 = $226($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 1 | 0;
    HEAP8[$16_1 >> 0] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $13_1 = $13_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : while (1) {
   label$13 : {
    label$14 : {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$14
     }
     $11_1 = HEAPU8[$6_1 >> 0] | 0;
     if (($11_1 | 0) != (46 | 0)) {
      break label$13
     }
     $11_1 = $680($9_1 | 0) | 0;
     $13_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $13_1 + 1 | 0;
     HEAP8[$13_1 >> 0] = $11_1;
     $6_1 = $6_1 + 1 | 0;
    }
    $632($8_1 | 0, $6_1 | 0, $2_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    $6_1 = (HEAP32[$5_1 >> 2] | 0) + ($2_1 - $6_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
    $1584($7_1 | 0) | 0;
    global$0 = $7_1 + 16 | 0;
    return;
   }
   $11_1 = $226($8_1 | 0, ($11_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $13_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $13_1 + 1 | 0;
   HEAP8[$13_1 >> 0] = $11_1;
   $6_1 = $6_1 + 1 | 0;
   continue label$12;
  };
 }
 
 function $715($0_1) {
  $0_1 = $0_1 | 0;
  $713($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $716($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1516($0_1 | 0, $1515($1_1 | 0) | 0 | 0) | 0;
  $390($0_1 + 4 | 0 | 0, $389($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $717($0_1) {
  $0_1 = $0_1 | 0;
  return $1517($0_1 | 0) | 0 | 0;
 }
 
 function $718($0_1) {
  $0_1 = $0_1 | 0;
  return $391($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $719($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $709($6_1 + 248 | 0 | 1 | 0 | 0, 134231546 | 0, $197($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $6_1 + 208 | 0;
  $8_1 = $634() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $9_1 = $710($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $6_1 + 72 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $6_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 48 | 0) >> 2] = $9_1;
    $8_1 = $700($6_1 + 208 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = $700($6_1 + 208 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 128 | 0) >> 2] = 86;
  $9_1 = $711($6_1 + 192 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($8_1 | 0) < (30 | 0)) {
     break label$4
    }
    $8_1 = $634() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $7_1 = $710($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $6_1 + 24 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $6_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $4_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$6_1 >> 2] = $7_1;
      $8_1 = $712($6_1 + 204 | 0 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $712($6_1 + 204 | 0 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    }
    $7_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$3
    }
    $713($9_1 | 0, $7_1 | 0);
   }
   $7_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
   $10_1 = $7_1 + $8_1 | 0;
   $11_1 = $701($7_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 128 | 0) >> 2] = 86;
   $7_1 = $711($6_1 + 120 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($6_1 + 208 | 0 | 0)) {
      break label$8
     }
     $8_1 = $6_1 + 128 | 0;
     $12_1 = $6_1 + 208 | 0;
     break label$7;
    }
    $8_1 = $1652($8_1 << 1 | 0 | 0) | 0;
    if (!$8_1) {
     break label$3
    }
    $713($7_1 | 0, $8_1 | 0);
    $12_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
   }
   $316($6_1 + 104 | 0 | 0, $2_1 | 0);
   $714($12_1 | 0, $11_1 | 0, $10_1 | 0, $8_1 | 0, $6_1 + 116 | 0 | 0, $6_1 + 112 | 0 | 0, $6_1 + 104 | 0 | 0);
   $579($6_1 + 104 | 0 | 0) | 0;
   $2_1 = $199($1_1 | 0, $8_1 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $715($7_1 | 0) | 0;
   $715($9_1 | 0) | 0;
   global$0 = $6_1 + 256 | 0;
   return $2_1 | 0;
  }
  $1565();
  abort();
 }
 
 function $720($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  $10_1 = 0;
  HEAP16[($5_1 + 92 | 0) >> 1] = HEAPU8[($10_1 + 134231558 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 134231559 | 0) >> 0] | 0) << 8 | 0) | 0;
  $9_1 = 0;
  HEAP32[($5_1 + 88 | 0) >> 2] = HEAPU8[($9_1 + 134231554 | 0) >> 0] | 0 | ((HEAPU8[($9_1 + 134231555 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 134231556 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($9_1 + 134231557 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $6_1 = $634() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $700($5_1 + 64 | 0 | 0, 20 | 0, $6_1 | 0, $5_1 + 88 | 0 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 64 | 0) + $7_1 | 0;
  $6_1 = $701($5_1 + 64 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $316($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $225($5_1 + 16 | 0 | 0) | 0;
  $579($5_1 + 16 | 0 | 0) | 0;
  $632($8_1 | 0, $5_1 + 64 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = $7_1 + ($5_1 + 16 | 0) | 0;
  $2_1 = $199($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + ($6_1 - ($5_1 + 64 | 0) | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 96 | 0;
  return $2_1 | 0;
 }
 
 function $721($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($197($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $316($5_1 + 24 | 0 | 0, $2_1 | 0);
   $2_1 = $645($5_1 + 24 | 0 | 0) | 0;
   $579($5_1 + 24 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $646($5_1 + 24 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $647($5_1 + 24 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $722($5_1 + 24 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $723($5_1 + 24 | 0 | 0) | 0;
    label$6 : {
     if ($724($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $1598($5_1 + 24 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP32[($725($5_1 + 16 | 0 | 0) | 0) >> 2] | 0;
    $378($377($5_1 + 40 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $726($5_1 + 16 | 0 | 0) | 0;
    $379($5_1 + 40 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $722($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($728($1_1 + 8 | 0 | 0, $727($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $723($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($728($1_1 + 8 | 0 | 0, ($727($0_1 | 0) | 0) + (($651($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $724($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($729($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $725($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $726($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $727($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($784($0_1 | 0) | 0)) {
    break label$1
   }
   return $953($0_1 | 0) | 0 | 0;
  }
  return $956($0_1 | 0) | 0 | 0;
 }
 
 function $728($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $729($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($979($0_1 | 0) | 0 | 0) == ($979($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $730($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 134231552 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 134231553 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 134231548 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 134231549 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 134231550 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 134231551 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $699($6_1 + 24 | 0 | 1 | 0 | 0, 134231540 | 0, 1 | 0, $197($2_1 | 0) | 0 | 0);
  $7_1 = $197($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $634() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $4_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $7_1 = $8_1 + ($700($8_1 | 0, $4_1 + 13 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $701($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 - ((($4_1 << 3 | 0 | 96 | 0) + 11 | 0) & 112 | 0) | 0;
  global$0 = $4_1;
  $316($6_1 + 8 | 0 | 0, $2_1 | 0);
  $731($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $579($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $732($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $731($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $339($6_1 | 0) | 0;
  $6_1 = $645($6_1 | 0) | 0;
  $687($7_1 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($592($7_1 | 0) | 0)) {
     break label$2
    }
    $678($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + (($2_1 - $0_1 | 0) << 2 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    $10_1 = HEAPU8[$9_1 >> 0] | 0;
    $11_1 = $10_1 + -43 | 0;
    if ($11_1 >>> 0 > 2 >>> 0) {
     break label$3
    }
    $9_1 = $0_1;
    label$4 : {
     switch ($11_1 | 0) {
     case 1:
      break label$3;
     default:
      break label$4;
     };
    }
    $11_1 = $388($8_1 | 0, ($10_1 << 24 | 0) >> 24 | 0 | 0) | 0;
    $10_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $10_1 + 4 | 0;
    HEAP32[$10_1 >> 2] = $11_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $11_1 = $388($8_1 | 0, 48 | 0) | 0;
    $10_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $10_1 + 4 | 0;
    HEAP32[$10_1 >> 2] = $11_1;
    $11_1 = $388($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $10_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $10_1 + 4 | 0;
    HEAP32[$10_1 >> 2] = $11_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $703($9_1 | 0, $2_1 | 0);
   $12_1 = $686($6_1 | 0) | 0;
   $11_1 = 0;
   $10_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $733($3_1 + (($9_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($601($7_1 | 0, $10_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($11_1 | 0) != (HEAP8[($601($7_1 | 0, $10_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $11_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $12_1;
     $10_1 = $10_1 + ($10_1 >>> 0 < (($589($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $11_1 = 0;
    }
    $13_1 = $388($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 4 | 0;
    HEAP32[$14_1 >> 2] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $11_1 = $11_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $1584($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $732($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $7_1 = 0;
    break label$1;
   }
   $8_1 = $202($4_1 | 0) | 0;
   $7_1 = 0;
   label$3 : {
    $9_1 = $2_1 - $1_1 | 0;
    if (($9_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = $9_1 >> 2 | 0;
    if (($380($0_1 | 0, $1_1 | 0, $9_1 | 0) | 0 | 0) != ($9_1 | 0)) {
     break label$1
    }
   }
   label$4 : {
    $7_1 = ($3_1 - $1_1 | 0) >> 2 | 0;
    $1_1 = ($8_1 | 0) > ($7_1 | 0) ? $8_1 - $7_1 | 0 : 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$4
    }
    $7_1 = $734($6_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
    $8_1 = $380($0_1 | 0, $735($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    $1598($7_1 | 0) | 0;
    $7_1 = 0;
    if (($8_1 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   label$5 : {
    $1_1 = $3_1 - $2_1 | 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$5
    }
    $7_1 = 0;
    $1_1 = $1_1 >> 2 | 0;
    if (($380($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   $206($4_1 | 0, 0 | 0) | 0;
   $7_1 = $0_1;
  }
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $733($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $750($0_1 | 0, $1_1 | 0);
 }
 
 function $734($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $575($0_1 | 0) | 0;
  $1607($0_1 | 0, $1_1 | 0, $2_1 | 0);
  return $0_1 | 0;
 }
 
 function $735($0_1) {
  $0_1 = $0_1 | 0;
  return $1479($727($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $736($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $699($6_1 + 24 | 0 | 1 | 0 | 0, 134231542 | 0, 1 | 0, $197($2_1 | 0) | 0 | 0);
  $7_1 = $197($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $634() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $10_1 = $8_1 + ($700($8_1 | 0, $7_1 + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $701($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 - ((($7_1 << 3 | 0 | 176 | 0) + 11 | 0) & 240 | 0) | 0;
  global$0 = $7_1;
  $316($6_1 + 8 | 0 | 0, $2_1 | 0);
  $731($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $579($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $732($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $737($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 134231552 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 134231553 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 134231548 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 134231549 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 134231550 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 134231551 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $699($6_1 + 24 | 0 | 1 | 0 | 0, 134231540 | 0, 0 | 0, $197($2_1 | 0) | 0 | 0);
  $7_1 = $197($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $634() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($700($8_1 | 0, ($7_1 >>> 9 | 0) & 1 | 0 | 12 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $701($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -96 | 0;
  global$0 = $4_1;
  $316($6_1 + 8 | 0 | 0, $2_1 | 0);
  $731($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $579($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $732($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $738($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $699($6_1 + 24 | 0 | 1 | 0 | 0, 134231542 | 0, 0 | 0, $197($2_1 | 0) | 0 | 0);
  $7_1 = $197($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $634() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = ($7_1 >>> 9 | 0) & 1 | 0 | 22 | 0;
  $10_1 = $8_1 + ($700($8_1 | 0, $7_1 + 1 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $701($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 - ((($7_1 << 3 | 0) + 11 | 0) & 240 | 0) | 0;
  global$0 = $7_1;
  $316($6_1 + 8 | 0 | 0, $2_1 | 0);
  $731($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $579($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $732($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $739($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 384 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 376 | 0) >> 2] = 37;
  HEAP32[($5_1 + 380 | 0) >> 2] = 0;
  $6_1 = $709($5_1 + 376 | 0 | 1 | 0 | 0, 134231545 | 0, $197($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($5_1 + 332 | 0) >> 2] = $5_1 + 336 | 0;
  $7_1 = $634() | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $8_1 = $710($2_1 | 0) | 0;
    HEAPF64[($5_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $8_1;
    $7_1 = $700($5_1 + 336 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = $4_1;
   $7_1 = $700($5_1 + 336 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 80 | 0) >> 2] = 86;
  $8_1 = $711($5_1 + 320 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($7_1 | 0) < (30 | 0)) {
     break label$4
    }
    $7_1 = $634() | 0;
    label$5 : {
     label$6 : {
      if (!$6_1) {
       break label$6
      }
      $6_1 = $710($2_1 | 0) | 0;
      HEAPF64[($5_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$5_1 >> 2] = $6_1;
      $7_1 = $712($5_1 + 332 | 0 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($5_1 + 16 | 0) >> 3] = $4_1;
     $7_1 = $712($5_1 + 332 | 0 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
    }
    $6_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$3
    }
    $713($8_1 | 0, $6_1 | 0);
   }
   $6_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
   $9_1 = $6_1 + $7_1 | 0;
   $10_1 = $701($6_1 | 0, $9_1 | 0, $2_1 | 0) | 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = 86;
   $6_1 = $740($5_1 + 72 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($5_1 + 332 | 0) >> 2] | 0 | 0) != ($5_1 + 336 | 0 | 0)) {
      break label$8
     }
     $7_1 = $5_1 + 80 | 0;
     $11_1 = $5_1 + 336 | 0;
     break label$7;
    }
    $7_1 = $1652($7_1 << 3 | 0 | 0) | 0;
    if (!$7_1) {
     break label$3
    }
    $741($6_1 | 0, $7_1 | 0);
    $11_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
   }
   $316($5_1 + 56 | 0 | 0, $2_1 | 0);
   $742($11_1 | 0, $10_1 | 0, $9_1 | 0, $7_1 | 0, $5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0, $5_1 + 56 | 0 | 0);
   $579($5_1 + 56 | 0 | 0) | 0;
   $2_1 = $732($1_1 | 0, $7_1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $743($6_1 | 0) | 0;
   $715($8_1 | 0) | 0;
   global$0 = $5_1 + 384 | 0;
   return $2_1 | 0;
  }
  $1565();
  abort();
 }
 
 function $740($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $744($0_1 | 0, $3_1 + 12 | 0 | 0, $385($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $741($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($745($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($745($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($746($0_1 | 0) | 0) >> 2] | 0]($2_1);
  }
 }
 
 function $742($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $10_1 = 0, $13_1 = 0, $7_1 = 0, $14_1 = 0, $8_1 = 0, $9_1 = 0, $16_1 = 0, $12_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $339($6_1 | 0) | 0;
  $9_1 = $645($6_1 | 0) | 0;
  $687($7_1 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   $11_1 = HEAPU8[$10_1 >> 0] | 0;
   $6_1 = $11_1 + -43 | 0;
   if ($6_1 >>> 0 > 2 >>> 0) {
    break label$1
   }
   $10_1 = $0_1;
   label$2 : {
    switch ($6_1 | 0) {
    case 1:
     break label$1;
    default:
     break label$2;
    };
   }
   $6_1 = $388($8_1 | 0, ($11_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
   HEAP32[$11_1 >> 2] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $388($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $6_1 = $388($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($527(HEAP8[$6_1 >> 0] | 0 | 0, $634() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($480(HEAP8[$6_1 >> 0] | 0 | 0, $634() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($592($7_1 | 0) | 0)) {
     break label$8
    }
    $678($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + (($6_1 - $10_1 | 0) << 2 | 0) | 0;
    break label$7;
   }
   $703($10_1 | 0, $6_1 | 0);
   $12_1 = $686($9_1 | 0) | 0;
   $13_1 = 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $733($3_1 + (($10_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($601($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($13_1 | 0) != (HEAP8[($601($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $13_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $13_1 + 4 | 0;
     HEAP32[$13_1 >> 2] = $12_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($589($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $13_1 = 0;
    }
    $15_1 = $388($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 4 | 0;
    HEAP32[$16_1 >> 2] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $13_1 = $13_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : {
   label$13 : {
    label$14 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$13
     }
     label$15 : {
      $11_1 = HEAPU8[$6_1 >> 0] | 0;
      if (($11_1 | 0) == (46 | 0)) {
       break label$15
      }
      $11_1 = $388($8_1 | 0, ($11_1 << 24 | 0) >> 24 | 0 | 0) | 0;
      $13_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $13_1 + 4 | 0;
      HEAP32[$13_1 >> 2] = $11_1;
      $6_1 = $6_1 + 1 | 0;
      continue label$14;
     }
     break label$14;
    };
    $13_1 = $685($9_1 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    $11_1 = $14_1 + 4 | 0;
    HEAP32[$5_1 >> 2] = $11_1;
    HEAP32[$14_1 >> 2] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    break label$12;
   }
   $11_1 = HEAP32[$5_1 >> 2] | 0;
  }
  $678($8_1 | 0, $6_1 | 0, $2_1 | 0, $11_1 | 0) | 0;
  $6_1 = (HEAP32[$5_1 >> 2] | 0) + (($2_1 - $6_1 | 0) << 2 | 0) | 0;
  HEAP32[$5_1 >> 2] = $6_1;
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $1584($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $743($0_1) {
  $0_1 = $0_1 | 0;
  $741($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $744($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1519($0_1 | 0, $1518($1_1 | 0) | 0 | 0) | 0;
  $390($0_1 + 4 | 0 | 0, $389($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $745($0_1) {
  $0_1 = $0_1 | 0;
  return $1520($0_1 | 0) | 0 | 0;
 }
 
 function $746($0_1) {
  $0_1 = $0_1 | 0;
  return $391($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $747($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 424 | 0) >> 2] = 37;
  HEAP32[($6_1 + 428 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $709($6_1 + 424 | 0 | 1 | 0 | 0, 134231546 | 0, $197($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 380 | 0) >> 2] = $6_1 + 384 | 0;
  $8_1 = $634() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $9_1 = $710($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $6_1 + 72 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $6_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $4_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 48 | 0) >> 2] = $9_1;
    $8_1 = $700($6_1 + 384 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = $700($6_1 + 384 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 128 | 0) >> 2] = 86;
  $9_1 = $711($6_1 + 368 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($8_1 | 0) < (30 | 0)) {
     break label$4
    }
    $8_1 = $634() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $7_1 = $710($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $6_1 + 24 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $6_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $4_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$6_1 >> 2] = $7_1;
      $8_1 = $712($6_1 + 380 | 0 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $712($6_1 + 380 | 0 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    }
    $7_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$3
    }
    $713($9_1 | 0, $7_1 | 0);
   }
   $7_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
   $10_1 = $7_1 + $8_1 | 0;
   $11_1 = $701($7_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 128 | 0) >> 2] = 86;
   $7_1 = $740($6_1 + 120 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) != ($6_1 + 384 | 0 | 0)) {
      break label$8
     }
     $8_1 = $6_1 + 128 | 0;
     $12_1 = $6_1 + 384 | 0;
     break label$7;
    }
    $8_1 = $1652($8_1 << 3 | 0 | 0) | 0;
    if (!$8_1) {
     break label$3
    }
    $741($7_1 | 0, $8_1 | 0);
    $12_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
   }
   $316($6_1 + 104 | 0 | 0, $2_1 | 0);
   $742($12_1 | 0, $11_1 | 0, $10_1 | 0, $8_1 | 0, $6_1 + 116 | 0 | 0, $6_1 + 112 | 0 | 0, $6_1 + 104 | 0 | 0);
   $579($6_1 + 104 | 0 | 0) | 0;
   $2_1 = $732($1_1 | 0, $8_1 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $743($7_1 | 0) | 0;
   $715($9_1 | 0) | 0;
   global$0 = $6_1 + 432 | 0;
   return $2_1 | 0;
  }
  $1565();
  abort();
 }
 
 function $748($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  $10_1 = 0;
  HEAP16[($5_1 + 204 | 0) >> 1] = HEAPU8[($10_1 + 134231558 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 134231559 | 0) >> 0] | 0) << 8 | 0) | 0;
  $9_1 = 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAPU8[($9_1 + 134231554 | 0) >> 0] | 0 | ((HEAPU8[($9_1 + 134231555 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 134231556 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($9_1 + 134231557 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $6_1 = $634() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $700($5_1 + 176 | 0 | 0, 20 | 0, $6_1 | 0, $5_1 + 200 | 0 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 176 | 0) + $7_1 | 0;
  $6_1 = $701($5_1 + 176 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $316($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $339($5_1 + 16 | 0 | 0) | 0;
  $579($5_1 + 16 | 0 | 0) | 0;
  $678($8_1 | 0, $5_1 + 176 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = ($5_1 + 16 | 0) + ($7_1 << 2 | 0) | 0;
  $2_1 = $732($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + (($6_1 - ($5_1 + 176 | 0) | 0) << 2 | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 208 | 0;
  return $2_1 | 0;
 }
 
 function $749($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1521($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 1 | 0;
    continue label$2;
   };
  }
 }
 
 function $750($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1522($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 4 | 0;
    continue label$2;
   };
  }
 }
 
 function $751($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  $316($8_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $225($8_1 + 8 | 0 | 0) | 0;
  $579($8_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if ($2_1) {
     break label$1
    }
    label$3 : {
     if ($321($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($752($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $2_1 = $6_1 + 1 | 0;
       if (($2_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $10_1 = $752($1_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, 0 | 0) | 0;
         if (($10_1 | 0) == (69 | 0)) {
          break label$7
         }
         if (($10_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $10_1;
         $2_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 2 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $11_1 = $752($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0;
        $9_1 = $10_1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = $2_1 + 2 | 0;
       break label$4;
      }
      label$8 : {
       if (!($319($1_1 | 0, 8192 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) != ($7_1 | 0)) {
           break label$11
          }
          $6_1 = $7_1;
          break label$9;
         }
         if ($319($1_1 | 0, 8192 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$12 : while (1) {
        if (!($317($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
         break label$4
        }
        if (!($319($1_1 | 0, 8192 | 0, $318($8_1 + 24 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $320($8_1 + 24 | 0 | 0) | 0;
        continue label$12;
       };
      }
      label$13 : {
       if (($588($1_1 | 0, $318($8_1 + 24 | 0 | 0) | 0 | 0) | 0 | 0) != ($588($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0 | 0)) {
        break label$13
       }
       $6_1 = $6_1 + 1 | 0;
       $320($8_1 + 24 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = HEAP32[$4_1 >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$14 : {
   if (!($321($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
    break label$14
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  global$0 = $8_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $752($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $753($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $754($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 624576549;
  HEAP32[($6_1 + 12 | 0) >> 2] = 1394948685;
  $0_1 = $751($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 8 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $755($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1 + 8 | 0) | 0;
  return $751($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $205($6_1 | 0) | 0 | 0, ($205($6_1 | 0) | 0) + ($589($6_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $756($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $316($6_1 | 0, $3_1 | 0);
  $3_1 = $225($6_1 | 0) | 0;
  $579($6_1 | 0) | 0;
  $757($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $757($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($583($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $758($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $316($6_1 | 0, $3_1 | 0);
  $3_1 = $225($6_1 | 0) | 0;
  $579($6_1 | 0) | 0;
  $759($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $759($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($583($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $760($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $316($6_1 | 0, $3_1 | 0);
  $3_1 = $225($6_1 | 0) | 0;
  $579($6_1 | 0) | 0;
  $761($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $761($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $762($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (($2_1 | 0) > (68 | 0)) {
      break label$3
     }
     $4_1 = $2_1 + 2e3 | 0;
     break label$2;
    }
    $4_1 = ($2_1 | 0) < (100 | 0) ? $2_1 + 1900 | 0 : $2_1;
   }
   HEAP32[$1_1 >> 2] = $4_1 + -1900 | 0;
  }
 }
 
 function $762($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!($321($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 6 | 0;
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    $1_1 = $318($0_1 | 0) | 0;
    if ($319($3_1 | 0, 2048 | 0, $1_1 | 0) | 0) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 4 | 0;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $752($3_1 | 0, $1_1 | 0, 0 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     $1_1 = $1_1 + -48 | 0;
     $320($0_1 | 0) | 0;
     if (!($317($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
      break label$4
     }
     $4_1 = $4_1 + -1 | 0;
     if (($4_1 | 0) < (1 | 0)) {
      break label$4
     }
     $6_1 = $318($0_1 | 0) | 0;
     if (!($319($3_1 | 0, 2048 | 0, $6_1 | 0) | 0)) {
      break label$1
     }
     $1_1 = Math_imul($1_1, 10) + ($752($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
     continue label$5;
    };
   }
   if (!($321($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $763($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0, $168_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $316($8_1 + 8 | 0 | 0, $3_1 | 0);
  $9_1 = $225($8_1 + 8 | 0 | 0) | 0;
  $579($8_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $10_1 = $6_1 + -65 | 0;
      if ($10_1 >>> 0 <= 56 >>> 0) {
       break label$4
      }
      if (($6_1 | 0) != (37 | 0)) {
       break label$3
      }
      $764($0_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
      break label$2;
     }
     label$5 : {
      switch ($10_1 | 0) {
      default:
       $757($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $759($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $751($0_1 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $205($1_1 | 0) | 0 | 0, ($205($1_1 | 0) | 0) + ($589($1_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $765($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 2032480100;
       HEAP32[($8_1 + 8 | 0) >> 2] = 623865125;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $751($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 1680158061;
       HEAP32[($8_1 + 8 | 0) >> 2] = 623728933;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $751($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 7:
       $766($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $767($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $768($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $769($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $770($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $771($0_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $772($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $15_1 = 0;
       $16_1 = HEAPU8[($15_1 + 134231567 | 0) >> 0] | 0 | ((HEAPU8[($15_1 + 134231568 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($15_1 + 134231569 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($15_1 + 134231570 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP8[($8_1 + 15 | 0) >> 0] = $16_1;
       HEAP8[($8_1 + 16 | 0) >> 0] = $16_1 >>> 8 | 0;
       HEAP8[($8_1 + 17 | 0) >> 0] = $16_1 >>> 16 | 0;
       HEAP8[($8_1 + 18 | 0) >> 0] = $16_1 >>> 24 | 0;
       $14_1 = 0;
       i64toi32_i32$0 = HEAPU8[($14_1 + 134231560 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 134231561 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 134231562 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 134231563 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = HEAPU8[($14_1 + 134231564 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 134231565 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 134231566 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 134231567 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $168_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $168_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 24 | 0) >> 2] = $751($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 19 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP8[($8_1 + 12 | 0) >> 0] = HEAPU8[(0 + 134231575 | 0) >> 0] | 0;
       $17_1 = 0;
       HEAP32[($8_1 + 8 | 0) >> 2] = HEAPU8[($17_1 + 134231571 | 0) >> 0] | 0 | ((HEAPU8[($17_1 + 134231572 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($17_1 + 134231573 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($17_1 + 134231574 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $751($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 13 | 0 | 0) | 0;
       break label$2;
      case 18:
       $773($0_1 | 0, $5_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$0 = $8_1;
       i64toi32_i32$1 = 1394948685;
       HEAP32[($8_1 + 8 | 0) >> 2] = 624576549;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 24 | 0) >> 2] = $751($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 54:
       $774($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $751($0_1 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $205($1_1 | 0) | 0 | 0, ($205($1_1 | 0) | 0) + ($589($1_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $761($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$3;
      case 24:
       break label$5;
      };
     }
     $775($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
     break label$2;
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   }
   $4_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $764($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $2_1 = 6;
  label$1 : {
   label$2 : {
    if ($321($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    if (($752($4_1 | 0, $318($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
     break label$2
    }
    $2_1 = 2;
    if (!($321($320($1_1 | 0) | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $765($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $762($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $766($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $762($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (23 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $767($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $762($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $768($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $762($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (365 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $769($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $762($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $770($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $762($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (59 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $771($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (!($317($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
    if (!($319($4_1 | 0, 8192 | 0, $318($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $320($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($321($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $772($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1 + 8 | 0) | 0;
   if (($589($0_1 | 0) | 0 | 0) != (0 - ($589($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $0_1 = ($583($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
  label$2 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (($4_1 | 0) != (12 | 0)) {
    break label$2
   }
   if ($0_1) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($4_1 | 0) > (11 | 0)) {
    break label$3
   }
   if (($0_1 | 0) != (12 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $4_1 + 12 | 0;
  }
 }
 
 function $773($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $762($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (60 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $774($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $762($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (6 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $775($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $762($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1900 | 0;
  }
 }
 
 function $776($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  $316($8_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $339($8_1 + 8 | 0 | 0) | 0;
  $579($8_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if ($2_1) {
     break label$1
    }
    label$3 : {
     if ($344($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($777($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $2_1 = $6_1 + 4 | 0;
       if (($2_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $10_1 = $777($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 0 | 0) | 0;
         if (($10_1 | 0) == (69 | 0)) {
          break label$7
         }
         if (($10_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $10_1;
         $2_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 8 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $11_1 = $777($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $9_1 = $10_1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = $2_1 + 8 | 0;
       break label$4;
      }
      label$8 : {
       if (!($342($1_1 | 0, 8192 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          $6_1 = $6_1 + 4 | 0;
          if (($6_1 | 0) != ($7_1 | 0)) {
           break label$11
          }
          $6_1 = $7_1;
          break label$9;
         }
         if ($342($1_1 | 0, 8192 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$12 : while (1) {
        if (!($340($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
         break label$4
        }
        if (!($342($1_1 | 0, 8192 | 0, $341($8_1 + 24 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $343($8_1 + 24 | 0 | 0) | 0;
        continue label$12;
       };
      }
      label$13 : {
       if (($650($1_1 | 0, $341($8_1 + 24 | 0 | 0) | 0 | 0) | 0 | 0) != ($650($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0)) {
        break label$13
       }
       $6_1 = $6_1 + 4 | 0;
       $343($8_1 + 24 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = HEAP32[$4_1 >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$14 : {
   if (!($344($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
    break label$14
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  global$0 = $8_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $777($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $778($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $779($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $12_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231752 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231756 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231744 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231748 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231736 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231740 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231728 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231732 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $0_1 = $776($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
  global$0 = i64toi32_i32$1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $780($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1 + 8 | 0) | 0;
  return $776($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $781($6_1 | 0) | 0 | 0, ($781($6_1 | 0) | 0) + (($651($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $781($0_1) {
  $0_1 = $0_1 | 0;
  return $783($782($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $782($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($784($0_1 | 0) | 0)) {
    break label$1
   }
   return $1523($0_1 | 0) | 0 | 0;
  }
  return $1524($0_1 | 0) | 0 | 0;
 }
 
 function $783($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $784($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP8[(($1348($0_1 | 0) | 0) + 11 | 0) >> 0] | 0 | 0) < (0 | 0) | 0;
 }
 
 function $785($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($1348($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $786($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[(($1348($0_1 | 0) | 0) + 11 | 0) >> 0] | 0 | 0;
 }
 
 function $787($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $316($6_1 | 0, $3_1 | 0);
  $3_1 = $339($6_1 | 0) | 0;
  $579($6_1 | 0) | 0;
  $788($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $788($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($648($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $789($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $316($6_1 | 0, $3_1 | 0);
  $3_1 = $339($6_1 | 0) | 0;
  $579($6_1 | 0) | 0;
  $790($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $790($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($648($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $791($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $316($6_1 | 0, $3_1 | 0);
  $3_1 = $339($6_1 | 0) | 0;
  $579($6_1 | 0) | 0;
  $792($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $792($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $793($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (($2_1 | 0) > (68 | 0)) {
      break label$3
     }
     $4_1 = $2_1 + 2e3 | 0;
     break label$2;
    }
    $4_1 = ($2_1 | 0) < (100 | 0) ? $2_1 + 1900 | 0 : $2_1;
   }
   HEAP32[$1_1 >> 2] = $4_1 + -1900 | 0;
  }
 }
 
 function $793($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!($344($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 6 | 0;
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    $1_1 = $341($0_1 | 0) | 0;
    if ($342($3_1 | 0, 2048 | 0, $1_1 | 0) | 0) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 4 | 0;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $777($3_1 | 0, $1_1 | 0, 0 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     $1_1 = $1_1 + -48 | 0;
     $343($0_1 | 0) | 0;
     if (!($340($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
      break label$4
     }
     $4_1 = $4_1 + -1 | 0;
     if (($4_1 | 0) < (1 | 0)) {
      break label$4
     }
     $6_1 = $341($0_1 | 0) | 0;
     if (!($342($3_1 | 0, 2048 | 0, $6_1 | 0) | 0)) {
      break label$1
     }
     $1_1 = Math_imul($1_1, 10) + ($777($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
     continue label$5;
    };
   }
   if (!($344($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $794($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $10_1 = 0, $85_1 = 0, $88_1 = 0, $90_1 = 0, $92_1 = 0, $106_1 = 0, $109_1 = 0, $111_1 = 0, $113_1 = 0, $196_1 = 0, $198_1 = 0, $219_1 = 0, $222_1 = 0, $224_1 = 0, $226_1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $316($8_1 | 0, $3_1 | 0);
  $9_1 = $339($8_1 | 0) | 0;
  $579($8_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $10_1 = $6_1 + -65 | 0;
      if ($10_1 >>> 0 <= 56 >>> 0) {
       break label$4
      }
      if (($6_1 | 0) != (37 | 0)) {
       break label$3
      }
      $795($0_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
      break label$2;
     }
     label$5 : {
      switch ($10_1 | 0) {
      default:
       $788($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $790($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $776($0_1 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $781($1_1 | 0) | 0 | 0, ($781($1_1 | 0) | 0) + (($651($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $796($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231608 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231612 | 0) >> 2] | 0;
       $85_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $85_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231600 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231604 | 0) >> 2] | 0;
       $88_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $88_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231592 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231596 | 0) >> 2] | 0;
       $90_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $90_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231584 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231588 | 0) >> 2] | 0;
       $92_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $92_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $776($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231640 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231644 | 0) >> 2] | 0;
       $106_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $106_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231632 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231636 | 0) >> 2] | 0;
       $109_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $109_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231624 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231628 | 0) >> 2] | 0;
       $111_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $111_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231616 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231620 | 0) >> 2] | 0;
       $113_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $113_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $776($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 7:
       $797($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $798($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $799($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $800($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $801($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $802($0_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $803($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $6_1 = $1679($8_1 | 0, 134231648 | 0, 44 | 0) | 0;
       HEAP32[($6_1 + 56 | 0) >> 2] = $776($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0, $6_1 + 44 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP32[($8_1 + 16 | 0) >> 2] = HEAP32[(0 + 134231712 | 0) >> 2] | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231704 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231708 | 0) >> 2] | 0;
       $196_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $196_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231696 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231700 | 0) >> 2] | 0;
       $198_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $198_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $776($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 20 | 0 | 0) | 0;
       break label$2;
      case 18:
       $804($0_1 | 0, $5_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231752 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231756 | 0) >> 2] | 0;
       $219_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $219_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231744 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231748 | 0) >> 2] | 0;
       $222_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $222_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231736 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231740 | 0) >> 2] | 0;
       $224_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $224_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134231728 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134231732 | 0) >> 2] | 0;
       $226_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $226_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $776($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 54:
       $805($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $776($0_1 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $781($1_1 | 0) | 0 | 0, ($781($1_1 | 0) | 0) + (($651($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $792($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$3;
      case 24:
       break label$5;
      };
     }
     $806($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
     break label$2;
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   }
   $4_1 = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $795($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $2_1 = 6;
  label$1 : {
   label$2 : {
    if ($344($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    if (($777($4_1 | 0, $341($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
     break label$2
    }
    $2_1 = 2;
    if (!($344($343($1_1 | 0) | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $796($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $793($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $797($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $793($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (23 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $798($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $793($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $799($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $793($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (365 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $800($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $793($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $801($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $793($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (59 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $802($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (!($340($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
    if (!($342($4_1 | 0, 8192 | 0, $341($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $343($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($344($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $803($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1 + 8 | 0) | 0;
   if (($651($0_1 | 0) | 0 | 0) != (0 - ($651($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $0_1 = ($648($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
  label$2 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (($4_1 | 0) != (12 | 0)) {
    break label$2
   }
   if ($0_1) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($4_1 | 0) > (11 | 0)) {
    break label$3
   }
   if (($0_1 | 0) != (12 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $4_1 + 12 | 0;
  }
 }
 
 function $804($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $793($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (60 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $805($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $793($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  label$1 : {
   if (($2_1 | 0) > (6 | 0)) {
    break label$1
   }
   if ($3_1 & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $806($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $793($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1900 | 0;
  }
 }
 
 function $807($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 116 | 0;
  $808($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $1_1 = $809($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $1_1 | 0;
 }
 
 function $808($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP8[($6_1 + 15 | 0) >> 0] = 0;
  HEAP8[($6_1 + 14 | 0) >> 0] = $5_1;
  HEAP8[($6_1 + 13 | 0) >> 0] = $4_1;
  HEAP8[($6_1 + 12 | 0) >> 0] = 37;
  label$1 : {
   if (!$5_1) {
    break label$1
   }
   $239($6_1 + 13 | 0 | 0, $6_1 + 14 | 0 | 0);
  }
  HEAP32[$2_1 >> 2] = $1_1 + (fimport$16($1_1 | 0, $810($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 12 | 0 | 0, $3_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0) | 0;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $809($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $813($811($0_1 | 0) | 0 | 0, $811($1_1 | 0) | 0 | 0, $812($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $810($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $811($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $812($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $813($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = HEAP8[$0_1 >> 0] | 0;
    $369($368($3_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $0_1 = $0_1 + 1 | 0;
    $370($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $814($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 416 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 416 | 0;
  $815($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $1_1 = $816($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 416 | 0;
  return $1_1 | 0;
 }
 
 function $815($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 132 | 0;
  $808($0_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 32 | 0;
  label$1 : {
   $0_1 = $818($1_1 | 0, $6_1 + 12 | 0 | 0, $817($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($0_1 | 0) != (-1 | 0)) {
    break label$1
   }
   $819($6_1 | 0);
   abort();
  }
  HEAP32[$2_1 >> 2] = $1_1 + ($0_1 << 2 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
 }
 
 function $816($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $822($820($0_1 | 0) | 0 | 0, $820($1_1 | 0) | 0 | 0, $821($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $817($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $818($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $642($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $540($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $643($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $819($0_1) {
  $0_1 = $0_1 | 0;
  fimport$17();
  abort();
 }
 
 function $820($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $821($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $822($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $378($377($3_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $0_1 = $0_1 + 4 | 0;
    $379($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $823($0_1) {
  $0_1 = $0_1 | 0;
  return $824() | 0 | 0;
 }
 
 function $824() {
  return $825() | 0 | 0;
 }
 
 function $825() {
  return 127 | 0;
 }
 
 function $826($0_1) {
  $0_1 = $0_1 | 0;
  return $824() | 0 | 0;
 }
 
 function $827($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $598($0_1 | 0) | 0;
 }
 
 function $828($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $598($0_1 | 0) | 0;
 }
 
 function $829($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $598($0_1 | 0) | 0;
 }
 
 function $830($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $204($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $831($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $832($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $833($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $834($0_1) {
  $0_1 = $0_1 | 0;
  return $824() | 0 | 0;
 }
 
 function $835($0_1) {
  $0_1 = $0_1 | 0;
  return $824() | 0 | 0;
 }
 
 function $836($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $598($0_1 | 0) | 0;
 }
 
 function $837($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $598($0_1 | 0) | 0;
 }
 
 function $838($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $598($0_1 | 0) | 0;
 }
 
 function $839($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $204($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $840($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $841($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $842($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $843($0_1) {
  $0_1 = $0_1 | 0;
  return $844() | 0 | 0;
 }
 
 function $844() {
  return $845() | 0 | 0;
 }
 
 function $845() {
  return 2147483647 | 0;
 }
 
 function $846($0_1) {
  $0_1 = $0_1 | 0;
  return $844() | 0 | 0;
 }
 
 function $847($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $598($0_1 | 0) | 0;
 }
 
 function $848($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $849($0_1 | 0) | 0;
 }
 
 function $849($0_1) {
  $0_1 = $0_1 | 0;
  $575($0_1 | 0) | 0;
  $850($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $850($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $1353($0_1 | 0) | 0;
  $0_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($0_1 | 0) != (3 | 0)) {
     break label$2
    }
    return;
   }
   HEAP32[($1_1 + ($0_1 << 2 | 0) | 0) >> 2] = 0;
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $851($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $849($0_1 | 0) | 0;
 }
 
 function $852($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $734($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $853($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $854($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $855($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $856($0_1) {
  $0_1 = $0_1 | 0;
  return $844() | 0 | 0;
 }
 
 function $857($0_1) {
  $0_1 = $0_1 | 0;
  return $844() | 0 | 0;
 }
 
 function $858($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $598($0_1 | 0) | 0;
 }
 
 function $859($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $849($0_1 | 0) | 0;
 }
 
 function $860($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $849($0_1 | 0) | 0;
 }
 
 function $861($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $734($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $862($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $863($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $864($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $865($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 288 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 280 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 87;
  $1_1 = $711($7_1 + 152 | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $316($7_1 + 144 | 0 | 0, $4_1 | 0);
  $8_1 = $225($7_1 + 144 | 0 | 0) | 0;
  HEAP8[($7_1 + 143 | 0) >> 0] = 0;
  label$1 : {
   if (!($867($7_1 + 280 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 144 | 0 | 0, $197($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 143 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 148 | 0 | 0, $7_1 + 260 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 134231771 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 134231772 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 134231773 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 134231774 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 135 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 136 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 137 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 138 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 134231768 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 134231769 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 134231770 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 134231771 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = HEAPU8[($10_1 + 134231764 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 134231765 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 134231766 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 134231767 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 132 | 0) >> 2] = i64toi32_i32$1;
   $632($8_1 | 0, $7_1 + 128 | 0 | 0, $7_1 + 138 | 0 | 0, $7_1 + 118 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 86;
   $8_1 = $711($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $2_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($868($1_1 | 0) | 0) | 0 | 0) < (99 | 0)) {
      break label$3
     }
     $713($8_1 | 0, $1652(((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($868($1_1 | 0) | 0) | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($868($8_1 | 0) | 0)) {
      break label$2
     }
     $2_1 = $868($8_1 | 0) | 0;
    }
    label$4 : {
     if (!(HEAPU8[($7_1 + 143 | 0) >> 0] | 0)) {
      break label$4
     }
     HEAP8[$2_1 >> 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = $868($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($4_1 >>> 0 < (HEAP32[($7_1 + 148 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$2_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($528($7_1 + 16 | 0 | 0, 134231760 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $715($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$2_1 >> 0] = HEAPU8[(($7_1 + 128 | 0) + (($683($7_1 + 118 | 0 | 0, $869($7_1 + 118 | 0 | 0) | 0 | 0, $4_1 | 0) | 0) - ($7_1 + 118 | 0) | 0) | 0) >> 0] | 0;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 1 | 0;
      continue label$6;
     };
    }
    $819($7_1 | 0);
    abort();
   }
   $1565();
   abort();
  }
  label$8 : {
   if (!($321($7_1 + 280 | 0 | 0, $7_1 + 272 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 280 | 0) >> 2] | 0;
  $579($7_1 + 144 | 0 | 0) | 0;
  $715($1_1 | 0) | 0;
  global$0 = $7_1 + 288 | 0;
  return $4_1 | 0;
 }
 
 function $866($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $867($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $15_1 = 0, $16_1 = 0, $14_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $19_1 = 0, $18_1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 548 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 552 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 104 | 0) >> 2] = 87;
  $12_1 = $870($11_1 + 136 | 0 | 0, $11_1 + 144 | 0 | 0, $11_1 + 104 | 0 | 0) | 0;
  $1_1 = $871($12_1 | 0) | 0;
  HEAP32[($11_1 + 132 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 128 | 0) >> 2] = $1_1 + 400 | 0;
  $13_1 = $598($11_1 + 104 | 0 | 0) | 0;
  $14_1 = $598($11_1 + 88 | 0 | 0) | 0;
  $15_1 = $598($11_1 + 72 | 0 | 0) | 0;
  $16_1 = $598($11_1 + 56 | 0 | 0) | 0;
  $17_1 = $598($11_1 + 40 | 0 | 0) | 0;
  $872($2_1 | 0, $3_1 | 0, $11_1 + 120 | 0 | 0, $11_1 + 119 | 0 | 0, $11_1 + 118 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 36 | 0 | 0);
  HEAP32[$9_1 >> 2] = $868($8_1 | 0) | 0;
  $18_1 = $4_1 & 512 | 0;
  $1_1 = 0;
  $4_1 = 0;
  label$1 : while (1) {
   $10_1 = $4_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          if (($1_1 | 0) == (4 | 0)) {
           break label$8
          }
          if (!($317($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
           break label$8
          }
          $2_1 = HEAP8[(($11_1 + 120 | 0) + $1_1 | 0) >> 0] | 0;
          if ($2_1 >>> 0 > 4 >>> 0) {
           break label$3
          }
          $4_1 = 0;
          label$9 : {
           switch ($2_1 | 0) {
           case 1:
            if (($1_1 | 0) == (3 | 0)) {
             break label$3
            }
            $19_1 = $11_1 + 24 | 0;
            if ($319($7_1 | 0, 8192 | 0, $318($0_1 | 0) | 0 | 0) | 0) {
             break label$6
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$7;
           default:
            if (($1_1 | 0) != (3 | 0)) {
             break label$5
            }
            break label$3;
           case 3:
            if (($589($15_1 | 0) | 0 | 0) == (0 - ($589($16_1 | 0) | 0) | 0 | 0)) {
             break label$3
            }
            label$14 : {
             label$15 : {
              if (!($589($15_1 | 0) | 0)) {
               break label$15
              }
              if ($589($16_1 | 0) | 0) {
               break label$14
              }
             }
             $4_1 = $589($15_1 | 0) | 0;
             $2_1 = $318($0_1 | 0) | 0;
             label$16 : {
              if (!$4_1) {
               break label$16
              }
              label$17 : {
               if (($2_1 & 255 | 0 | 0) != (HEAPU8[($601($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
                break label$17
               }
               $320($0_1 | 0) | 0;
               $4_1 = ($589($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
               break label$2;
              }
              HEAP8[$6_1 >> 0] = 1;
              break label$3;
             }
             if (($2_1 & 255 | 0 | 0) != (HEAPU8[($601($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
              break label$3
             }
             $320($0_1 | 0) | 0;
             HEAP8[$6_1 >> 0] = 1;
             $4_1 = ($589($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
             break label$2;
            }
            label$18 : {
             if ((($318($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($601($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
              break label$18
             }
             $320($0_1 | 0) | 0;
             $4_1 = ($589($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
             break label$2;
            }
            label$19 : {
             if ((($318($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($601($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
              break label$19
             }
             $320($0_1 | 0) | 0;
             HEAP8[$6_1 >> 0] = 1;
             $4_1 = ($589($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
             break label$2;
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$7;
           case 2:
            label$20 : {
             if ($1_1 >>> 0 < 2 >>> 0) {
              break label$20
             }
             if ($10_1) {
              break label$20
             }
             if ($18_1) {
              break label$20
             }
             $4_1 = 0;
             if (!(($1_1 | 0) == (2 | 0) & (HEAPU8[($11_1 + 123 | 0) >> 0] | 0 | 0) != (0 | 0) | 0)) {
              break label$2
             }
            }
            HEAP32[($11_1 + 16 | 0) >> 2] = $691($14_1 | 0) | 0;
            $4_1 = $873($11_1 + 24 | 0 | 0, $11_1 + 16 | 0 | 0, 0 | 0) | 0;
            label$21 : {
             if (!$1_1) {
              break label$21
             }
             if ((HEAPU8[(($1_1 + ($11_1 + 120 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
              break label$21
             }
             label$22 : {
              label$23 : while (1) {
               HEAP32[($11_1 + 16 | 0) >> 2] = $692($14_1 | 0) | 0;
               if (!($874($4_1 | 0, $11_1 + 16 | 0 | 0) | 0)) {
                break label$22
               }
               if (!($319($7_1 | 0, 8192 | 0, HEAP8[($875($4_1 | 0) | 0) >> 0] | 0 | 0) | 0)) {
                break label$22
               }
               $876($4_1 | 0) | 0;
               continue label$23;
              };
             }
             HEAP32[($11_1 + 16 | 0) >> 2] = $691($14_1 | 0) | 0;
             label$24 : {
              $4_1 = $877($4_1 | 0, $11_1 + 16 | 0 | 0) | 0;
              if ($4_1 >>> 0 > ($589($17_1 | 0) | 0) >>> 0) {
               break label$24
              }
              HEAP32[($11_1 + 16 | 0) >> 2] = $692($17_1 | 0) | 0;
              if ($879($878($11_1 + 16 | 0 | 0, $4_1 | 0) | 0 | 0, $692($17_1 | 0) | 0 | 0, $691($14_1 | 0) | 0 | 0) | 0) {
               break label$21
              }
             }
             HEAP32[($11_1 + 8 | 0) >> 2] = $691($14_1 | 0) | 0;
             $873($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0, 0 | 0) | 0;
             HEAP32[($11_1 + 24 | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
            }
            HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
            label$25 : {
             label$26 : while (1) {
              HEAP32[($11_1 + 8 | 0) >> 2] = $692($14_1 | 0) | 0;
              if (!($874($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
               break label$25
              }
              if (!($317($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
               break label$25
              }
              if ((($318($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($875($11_1 + 16 | 0 | 0) | 0) >> 0] | 0 | 0)) {
               break label$25
              }
              $320($0_1 | 0) | 0;
              $876($11_1 + 16 | 0 | 0) | 0;
              continue label$26;
             };
            }
            if (!$18_1) {
             break label$3
            }
            HEAP32[($11_1 + 8 | 0) >> 2] = $692($14_1 | 0) | 0;
            if (!($874($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
             break label$3
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$7;
           case 4:
            break label$9;
           };
          }
          label$27 : {
           label$28 : while (1) {
            if (!($317($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
             break label$27
            }
            label$29 : {
             label$30 : {
              $2_1 = $318($0_1 | 0) | 0;
              if (!($319($7_1 | 0, 2048 | 0, $2_1 | 0) | 0)) {
               break label$30
              }
              label$31 : {
               $3_1 = HEAP32[$9_1 >> 2] | 0;
               if (($3_1 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
                break label$31
               }
               $880($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
               $3_1 = HEAP32[$9_1 >> 2] | 0;
              }
              HEAP32[$9_1 >> 2] = $3_1 + 1 | 0;
              HEAP8[$3_1 >> 0] = $2_1;
              $4_1 = $4_1 + 1 | 0;
              break label$29;
             }
             $3_1 = $589($13_1 | 0) | 0;
             if (!$4_1) {
              break label$27
             }
             if (!$3_1) {
              break label$27
             }
             if (($2_1 & 255 | 0 | 0) != ((HEAPU8[($11_1 + 118 | 0) >> 0] | 0) & 255 | 0 | 0)) {
              break label$27
             }
             label$32 : {
              $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
              if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
               break label$32
              }
              $881($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
              $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
             }
             HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
             HEAP32[$2_1 >> 2] = $4_1;
             $4_1 = 0;
            }
            $320($0_1 | 0) | 0;
            continue label$28;
           };
          }
          $3_1 = $871($12_1 | 0) | 0;
          label$33 : {
           if (!$4_1) {
            break label$33
           }
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           if (($3_1 | 0) == ($2_1 | 0)) {
            break label$33
           }
           label$34 : {
            if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
             break label$34
            }
            $881($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
            $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           }
           HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
           HEAP32[$2_1 >> 2] = $4_1;
          }
          label$35 : {
           if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
            break label$35
           }
           label$36 : {
            label$37 : {
             if ($321($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
              break label$37
             }
             if ((($318($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($11_1 + 119 | 0) >> 0] | 0 | 0)) {
              break label$36
             }
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$7;
           }
           label$38 : while (1) {
            $320($0_1 | 0) | 0;
            if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
             break label$35
            }
            label$39 : {
             label$40 : {
              if ($321($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
               break label$40
              }
              if ($319($7_1 | 0, 2048 | 0, $318($0_1 | 0) | 0 | 0) | 0) {
               break label$39
              }
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
             $0_1 = 0;
             break label$7;
            }
            label$41 : {
             if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
              break label$41
             }
             $880($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
            }
            $4_1 = $318($0_1 | 0) | 0;
            $2_1 = HEAP32[$9_1 >> 2] | 0;
            HEAP32[$9_1 >> 2] = $2_1 + 1 | 0;
            HEAP8[$2_1 >> 0] = $4_1;
            HEAP32[($11_1 + 36 | 0) >> 2] = (HEAP32[($11_1 + 36 | 0) >> 2] | 0) + -1 | 0;
            continue label$38;
           };
          }
          $4_1 = $10_1;
          if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($868($8_1 | 0) | 0 | 0)) {
           break label$2
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$7;
         }
         label$42 : {
          if (!$10_1) {
           break label$42
          }
          $4_1 = 1;
          label$43 : while (1) {
           if ($4_1 >>> 0 >= ($589($10_1 | 0) | 0) >>> 0) {
            break label$42
           }
           label$44 : {
            label$45 : {
             if ($321($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
              break label$45
             }
             if ((($318($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($590($10_1 | 0, $4_1 | 0) | 0) >> 0] | 0 | 0)) {
              break label$44
             }
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$7;
           }
           $320($0_1 | 0) | 0;
           $4_1 = $4_1 + 1 | 0;
           continue label$43;
          };
         }
         $0_1 = 1;
         if (($871($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0)) {
          break label$7
         }
         $0_1 = 0;
         HEAP32[($11_1 + 24 | 0) >> 2] = 0;
         $604($13_1 | 0, $871($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0, $11_1 + 24 | 0 | 0);
         label$46 : {
          if (!(HEAP32[($11_1 + 24 | 0) >> 2] | 0)) {
           break label$46
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          break label$7;
         }
         $0_1 = 1;
        }
        $1584($17_1 | 0) | 0;
        $1584($16_1 | 0) | 0;
        $1584($15_1 | 0) | 0;
        $1584($14_1 | 0) | 0;
        $1584($13_1 | 0) | 0;
        $882($12_1 | 0) | 0;
        global$0 = $11_1 + 560 | 0;
        return $0_1 | 0;
       }
       $4_1 = 0;
       break label$4;
      }
      $4_1 = 1;
     }
     label$47 : while (1) {
      label$48 : {
       switch ($4_1 | 0) {
       case 0:
        $883($19_1 | 0, $0_1 | 0, 0 | 0);
        $1594($17_1 | 0, $884($19_1 | 0) | 0 | 0);
        $4_1 = 1;
        continue label$47;
       default:
        break label$48;
       };
      }
      if (!($317($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
       break label$3
      }
      $19_1 = $11_1 + 16 | 0;
      if (!($319($7_1 | 0, 8192 | 0, $318($0_1 | 0) | 0 | 0) | 0)) {
       break label$3
      }
      $4_1 = 0;
      continue label$47;
     };
    }
    $4_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $868($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($885($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $869($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 10 | 0 | 0;
 }
 
 function $870($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $896($0_1 | 0, $3_1 + 12 | 0 | 0, $385($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $871($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($897($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $872($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $898($1_1 | 0) | 0;
    $899($10_1 | 0, $0_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $900($10_1 | 0, $0_1 | 0);
    $901($8_1 | 0, $10_1 | 0) | 0;
    $1584($10_1 | 0) | 0;
    $902($10_1 | 0, $0_1 | 0);
    $901($7_1 | 0, $10_1 | 0) | 0;
    $1584($10_1 | 0) | 0;
    HEAP8[$3_1 >> 0] = $903($0_1 | 0) | 0;
    HEAP8[$4_1 >> 0] = $904($0_1 | 0) | 0;
    $905($10_1 | 0, $0_1 | 0);
    $901($5_1 | 0, $10_1 | 0) | 0;
    $1584($10_1 | 0) | 0;
    $906($10_1 | 0, $0_1 | 0);
    $901($6_1 | 0, $10_1 | 0) | 0;
    $1584($10_1 | 0) | 0;
    $0_1 = $907($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $908($1_1 | 0) | 0;
   $909($10_1 | 0, $0_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[$10_1 >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $910($10_1 | 0, $0_1 | 0);
   $901($8_1 | 0, $10_1 | 0) | 0;
   $1584($10_1 | 0) | 0;
   $911($10_1 | 0, $0_1 | 0);
   $901($7_1 | 0, $10_1 | 0) | 0;
   $1584($10_1 | 0) | 0;
   HEAP8[$3_1 >> 0] = $912($0_1 | 0) | 0;
   HEAP8[$4_1 >> 0] = $913($0_1 | 0) | 0;
   $914($10_1 | 0, $0_1 | 0);
   $901($5_1 | 0, $10_1 | 0) | 0;
   $1584($10_1 | 0) | 0;
   $915($10_1 | 0, $0_1 | 0);
   $901($6_1 | 0, $10_1 | 0) | 0;
   $1584($10_1 | 0) | 0;
   $0_1 = $916($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $873($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $918($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $874($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($919($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $875($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $876($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $877($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($920($0_1 | 0) | 0) - ($918($1_1 | 0) | 0) | 0 | 0;
 }
 
 function $878($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $922($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $879($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $921($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $880($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($923($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($868($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($924() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $924() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $868($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (87 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $868($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $1654($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   $6_1 = $6_1 - $7_1 | 0;
   label$6 : {
    if (($4_1 | 0) == (87 | 0)) {
     break label$6
    }
    $925($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 86;
   $4_1 = $711($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $926($0_1 | 0, $4_1 | 0) | 0;
   $715($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($868($0_1 | 0) | 0) + $6_1 | 0;
   HEAP32[$2_1 >> 2] = ($868($0_1 | 0) | 0) + $5_1 | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1565();
  abort();
 }
 
 function $881($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($927($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($871($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($924() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $924() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $871($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (87 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $871($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $1654($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   $6_1 = ($6_1 - $7_1 | 0) >> 2 | 0;
   label$6 : {
    if (($4_1 | 0) == (87 | 0)) {
     break label$6
    }
    $928($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 86;
   $4_1 = $870($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $929($0_1 | 0, $4_1 | 0) | 0;
   $882($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($871($0_1 | 0) | 0) + ($6_1 << 2 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($871($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1565();
  abort();
 }
 
 function $882($0_1) {
  $0_1 = $0_1 | 0;
  $931($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $883($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $917($0_1 | 0, (($328(HEAP32[$1_1 >> 2] | 0 | 0) | 0) << 24 | 0) >> 24 | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $884($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[$0_1 >> 0] | 0 | 0;
 }
 
 function $885($0_1) {
  $0_1 = $0_1 | 0;
  return $1527($0_1 | 0) | 0 | 0;
 }
 
 function $886($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 160 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 144 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 87;
  $8_1 = $711($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $316($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $225($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($867($7_1 + 152 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $197($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 132 | 0 | 0) | 0)) {
    break label$1
   }
   $887($6_1 | 0);
   label$2 : {
    if (!(HEAPU8[($7_1 + 15 | 0) >> 0] | 0)) {
     break label$2
    }
    $1594($6_1 | 0, $226($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $226($1_1 | 0, 48 | 0) | 0;
   $4_1 = $868($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $2_1 = $3_1 + -1 | 0;
   $1_1 = $1_1 & 255 | 0;
   label$3 : {
    label$4 : while (1) {
     if ($4_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if ((HEAPU8[$4_1 >> 0] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $4_1 = $4_1 + 1 | 0;
     continue label$4;
    };
   }
   $888($6_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
  }
  label$5 : {
   if (!($321($7_1 + 152 | 0 | 0, $7_1 + 144 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 152 | 0) >> 2] | 0;
  $579($7_1 + 16 | 0 | 0) | 0;
  $715($8_1 | 0) | 0;
  global$0 = $7_1 + 160 | 0;
  return $4_1 | 0;
 }
 
 function $887($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $889($0_1 | 0);
  label$1 : {
   label$2 : {
    if (!($217($0_1 | 0) | 0)) {
     break label$2
    }
    $2_1 = $890($0_1 | 0) | 0;
    HEAP8[($1_1 + 15 | 0) >> 0] = 0;
    $891($2_1 | 0, $1_1 + 15 | 0 | 0);
    $892($0_1 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = $893($0_1 | 0) | 0;
   HEAP8[($1_1 + 14 | 0) >> 0] = 0;
   $891($2_1 | 0, $1_1 + 14 | 0 | 0);
   $894($0_1 | 0, 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $888($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $895($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $889($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $890($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1345($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $891($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
 }
 
 function $892($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1345($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $893($0_1) {
  $0_1 = $0_1 | 0;
  return $1394($1345($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $894($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[(($1345($0_1 | 0) | 0) + 11 | 0) >> 0] = $1_1;
 }
 
 function $895($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = $589($0_1 | 0) | 0;
  $5_1 = $599($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $1528($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if (!($1529($1406($1_1 | 0) | 0 | 0, $704($0_1 | 0) | 0 | 0, ($704($0_1 | 0) | 0) + ($589($0_1 | 0) | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1_1 = $1530($3_1 + 16 | 0 | 0, $1_1 | 0, $2_1 | 0, $1343($0_1 | 0) | 0 | 0) | 0;
    $1593($0_1 | 0, $205($1_1 | 0) | 0 | 0, $589($1_1 | 0) | 0 | 0) | 0;
    $1584($1_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
     break label$3
    }
    $1591($0_1 | 0, $5_1 | 0, ($6_1 + $4_1 | 0) - $5_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
   }
   $5_1 = ($638($0_1 | 0) | 0) + $4_1 | 0;
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $891($5_1 | 0, $1_1 | 0);
     $1_1 = $1_1 + 1 | 0;
     $5_1 = $5_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $891($5_1 | 0, $3_1 + 15 | 0 | 0);
   $1531($0_1 | 0, $6_1 + $4_1 | 0 | 0);
  }
  global$0 = $3_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $896($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1538($0_1 | 0, $1537($1_1 | 0) | 0 | 0) | 0;
  $390($0_1 + 4 | 0 | 0, $389($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $897($0_1) {
  $0_1 = $0_1 | 0;
  return $1542($0_1 | 0) | 0 | 0;
 }
 
 function $898($0_1) {
  $0_1 = $0_1 | 0;
  return $584($0_1 | 0, 134222148 | 0) | 0 | 0;
 }
 
 function $899($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $900($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $901($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $987($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $902($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $903($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $904($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $905($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $906($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $907($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $908($0_1) {
  $0_1 = $0_1 | 0;
  return $584($0_1 | 0, 134222140 | 0) | 0 | 0;
 }
 
 function $909($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $910($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $911($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $912($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $913($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $914($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $915($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $916($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $917($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP8[$0_1 >> 0] = $1_1;
  return $0_1 | 0;
 }
 
 function $918($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $919($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($920($0_1 | 0) | 0 | 0) == ($918($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $920($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $921($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($693($3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0) {
       break label$4
      }
      $2_1 = 1;
      break label$3;
     }
     if ($1543($3_1 | 0, $694($3_1 + 24 | 0 | 0) | 0 | 0, $694($3_1 + 8 | 0 | 0) | 0 | 0) | 0) {
      break label$2
     }
     $2_1 = 0;
    }
    global$0 = $3_1 + 32 | 0;
    return $2_1 | 0;
   }
   $695($3_1 + 24 | 0 | 0) | 0;
   $695($3_1 + 8 | 0 | 0) | 0;
   continue label$1;
  };
 }
 
 function $922($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1496($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $923($0_1) {
  $0_1 = $0_1 | 0;
  return $718($0_1 | 0) | 0 | 0;
 }
 
 function $924() {
  return $1508() | 0 | 0;
 }
 
 function $925($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($717($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($717($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $926($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $713($0_1 | 0, $925($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($389($923($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($718($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $927($0_1) {
  $0_1 = $0_1 | 0;
  return $1540($0_1 | 0) | 0 | 0;
 }
 
 function $928($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1539($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1539($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $929($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $931($0_1 | 0, $928($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($389($927($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($1540($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $930($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1276($0_1 | 0, $1_1 | 0);
 }
 
 function $931($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1539($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1539($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1540($0_1 | 0) | 0) >> 2] | 0]($2_1);
  }
 }
 
 function $932($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 624 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 616 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 608 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 87;
  $1_1 = $740($7_1 + 200 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $316($7_1 + 192 | 0 | 0, $4_1 | 0);
  $8_1 = $339($7_1 + 192 | 0 | 0) | 0;
  HEAP8[($7_1 + 191 | 0) >> 0] = 0;
  label$1 : {
   if (!($933($7_1 + 616 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 192 | 0 | 0, $197($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 191 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 196 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 134231771 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 134231772 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 134231773 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 134231774 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 183 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 184 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 185 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 186 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 134231768 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 134231769 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 134231770 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 134231771 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 176 | 0) >> 2] = HEAPU8[($10_1 + 134231764 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 134231765 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 134231766 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 134231767 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 180 | 0) >> 2] = i64toi32_i32$1;
   $678($8_1 | 0, $7_1 + 176 | 0 | 0, $7_1 + 186 | 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 86;
   $8_1 = $711($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $2_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($934($1_1 | 0) | 0) | 0 | 0) < (393 | 0)) {
      break label$3
     }
     $713($8_1 | 0, $1652((((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($934($1_1 | 0) | 0) | 0) >> 2 | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($868($8_1 | 0) | 0)) {
      break label$2
     }
     $2_1 = $868($8_1 | 0) | 0;
    }
    label$4 : {
     if (!(HEAPU8[($7_1 + 191 | 0) >> 0] | 0)) {
      break label$4
     }
     HEAP8[$2_1 >> 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = $934($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($4_1 >>> 0 < (HEAP32[($7_1 + 196 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$2_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($528($7_1 + 16 | 0 | 0, 134231760 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $715($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$2_1 >> 0] = HEAPU8[(($7_1 + 176 | 0) + ((($688($7_1 + 128 | 0 | 0, $935($7_1 + 128 | 0 | 0) | 0 | 0, $4_1 | 0) | 0) - ($7_1 + 128 | 0) | 0) >> 2 | 0) | 0) >> 0] | 0;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 4 | 0;
      continue label$6;
     };
    }
    $819($7_1 | 0);
    abort();
   }
   $1565();
   abort();
  }
  label$8 : {
   if (!($344($7_1 + 616 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 616 | 0) >> 2] | 0;
  $579($7_1 + 192 | 0 | 0) | 0;
  $743($1_1 | 0) | 0;
  global$0 = $7_1 + 624 | 0;
  return $4_1 | 0;
 }
 
 function $933($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $15_1 = 0, $16_1 = 0, $14_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $19_1 = 0, $18_1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 548 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 552 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 96 | 0) >> 2] = 87;
  $12_1 = $870($11_1 + 136 | 0 | 0, $11_1 + 144 | 0 | 0, $11_1 + 96 | 0 | 0) | 0;
  $1_1 = $871($12_1 | 0) | 0;
  HEAP32[($11_1 + 132 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 128 | 0) >> 2] = $1_1 + 400 | 0;
  $13_1 = $598($11_1 + 96 | 0 | 0) | 0;
  $14_1 = $849($11_1 + 80 | 0 | 0) | 0;
  $15_1 = $849($11_1 + 64 | 0 | 0) | 0;
  $16_1 = $849($11_1 + 48 | 0 | 0) | 0;
  $17_1 = $849($11_1 + 32 | 0 | 0) | 0;
  $936($2_1 | 0, $3_1 | 0, $11_1 + 120 | 0 | 0, $11_1 + 116 | 0 | 0, $11_1 + 112 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 28 | 0 | 0);
  HEAP32[$9_1 >> 2] = $934($8_1 | 0) | 0;
  $18_1 = $4_1 & 512 | 0;
  $1_1 = 0;
  $4_1 = 0;
  label$1 : while (1) {
   $10_1 = $4_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          if (($1_1 | 0) == (4 | 0)) {
           break label$8
          }
          if (!($340($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
           break label$8
          }
          $2_1 = HEAP8[(($11_1 + 120 | 0) + $1_1 | 0) >> 0] | 0;
          if ($2_1 >>> 0 > 4 >>> 0) {
           break label$3
          }
          $4_1 = 0;
          label$9 : {
           switch ($2_1 | 0) {
           case 1:
            if (($1_1 | 0) == (3 | 0)) {
             break label$3
            }
            $19_1 = $11_1 + 16 | 0;
            if ($342($7_1 | 0, 8192 | 0, $341($0_1 | 0) | 0 | 0) | 0) {
             break label$6
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$7;
           default:
            if (($1_1 | 0) != (3 | 0)) {
             break label$5
            }
            break label$3;
           case 3:
            if (($651($15_1 | 0) | 0 | 0) == (0 - ($651($16_1 | 0) | 0) | 0 | 0)) {
             break label$3
            }
            label$14 : {
             label$15 : {
              if (!($651($15_1 | 0) | 0)) {
               break label$15
              }
              if ($651($16_1 | 0) | 0) {
               break label$14
              }
             }
             $4_1 = $651($15_1 | 0) | 0;
             $2_1 = $341($0_1 | 0) | 0;
             label$16 : {
              if (!$4_1) {
               break label$16
              }
              label$17 : {
               if (($2_1 | 0) != (HEAP32[($937($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
                break label$17
               }
               $343($0_1 | 0) | 0;
               $4_1 = ($651($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
               break label$2;
              }
              HEAP8[$6_1 >> 0] = 1;
              break label$3;
             }
             if (($2_1 | 0) != (HEAP32[($937($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
              break label$3
             }
             $343($0_1 | 0) | 0;
             HEAP8[$6_1 >> 0] = 1;
             $4_1 = ($651($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
             break label$2;
            }
            label$18 : {
             if (($341($0_1 | 0) | 0 | 0) != (HEAP32[($937($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
              break label$18
             }
             $343($0_1 | 0) | 0;
             $4_1 = ($651($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
             break label$2;
            }
            label$19 : {
             if (($341($0_1 | 0) | 0 | 0) != (HEAP32[($937($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
              break label$19
             }
             $343($0_1 | 0) | 0;
             HEAP8[$6_1 >> 0] = 1;
             $4_1 = ($651($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
             break label$2;
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$7;
           case 2:
            label$20 : {
             if ($1_1 >>> 0 < 2 >>> 0) {
              break label$20
             }
             if ($10_1) {
              break label$20
             }
             if ($18_1) {
              break label$20
             }
             $4_1 = 0;
             if (!(($1_1 | 0) == (2 | 0) & (HEAPU8[($11_1 + 123 | 0) >> 0] | 0 | 0) != (0 | 0) | 0)) {
              break label$2
             }
            }
            HEAP32[($11_1 + 8 | 0) >> 2] = $722($14_1 | 0) | 0;
            $4_1 = $938($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0, 0 | 0) | 0;
            label$21 : {
             if (!$1_1) {
              break label$21
             }
             if ((HEAPU8[(($1_1 + ($11_1 + 120 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
              break label$21
             }
             label$22 : {
              label$23 : while (1) {
               HEAP32[($11_1 + 8 | 0) >> 2] = $723($14_1 | 0) | 0;
               if (!($939($4_1 | 0, $11_1 + 8 | 0 | 0) | 0)) {
                break label$22
               }
               if (!($342($7_1 | 0, 8192 | 0, HEAP32[($940($4_1 | 0) | 0) >> 2] | 0 | 0) | 0)) {
                break label$22
               }
               $941($4_1 | 0) | 0;
               continue label$23;
              };
             }
             HEAP32[($11_1 + 8 | 0) >> 2] = $722($14_1 | 0) | 0;
             label$24 : {
              $4_1 = $942($4_1 | 0, $11_1 + 8 | 0 | 0) | 0;
              if ($4_1 >>> 0 > ($651($17_1 | 0) | 0) >>> 0) {
               break label$24
              }
              HEAP32[($11_1 + 8 | 0) >> 2] = $723($17_1 | 0) | 0;
              if ($944($943($11_1 + 8 | 0 | 0, $4_1 | 0) | 0 | 0, $723($17_1 | 0) | 0 | 0, $722($14_1 | 0) | 0 | 0) | 0) {
               break label$21
              }
             }
             HEAP32[$11_1 >> 2] = $722($14_1 | 0) | 0;
             $938($11_1 + 8 | 0 | 0, $11_1 | 0, 0 | 0) | 0;
             HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
            label$25 : {
             label$26 : while (1) {
              HEAP32[$11_1 >> 2] = $723($14_1 | 0) | 0;
              if (!($939($11_1 + 8 | 0 | 0, $11_1 | 0) | 0)) {
               break label$25
              }
              if (!($340($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
               break label$25
              }
              if (($341($0_1 | 0) | 0 | 0) != (HEAP32[($940($11_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0)) {
               break label$25
              }
              $343($0_1 | 0) | 0;
              $941($11_1 + 8 | 0 | 0) | 0;
              continue label$26;
             };
            }
            if (!$18_1) {
             break label$3
            }
            HEAP32[$11_1 >> 2] = $723($14_1 | 0) | 0;
            if (!($939($11_1 + 8 | 0 | 0, $11_1 | 0) | 0)) {
             break label$3
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$7;
           case 4:
            break label$9;
           };
          }
          label$27 : {
           label$28 : while (1) {
            if (!($340($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
             break label$27
            }
            label$29 : {
             label$30 : {
              $2_1 = $341($0_1 | 0) | 0;
              if (!($342($7_1 | 0, 2048 | 0, $2_1 | 0) | 0)) {
               break label$30
              }
              label$31 : {
               $3_1 = HEAP32[$9_1 >> 2] | 0;
               if (($3_1 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
                break label$31
               }
               $945($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
               $3_1 = HEAP32[$9_1 >> 2] | 0;
              }
              HEAP32[$9_1 >> 2] = $3_1 + 4 | 0;
              HEAP32[$3_1 >> 2] = $2_1;
              $4_1 = $4_1 + 1 | 0;
              break label$29;
             }
             $3_1 = $589($13_1 | 0) | 0;
             if (!$4_1) {
              break label$27
             }
             if (!$3_1) {
              break label$27
             }
             if (($2_1 | 0) != (HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0)) {
              break label$27
             }
             label$32 : {
              $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
              if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
               break label$32
              }
              $881($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
              $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
             }
             HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
             HEAP32[$2_1 >> 2] = $4_1;
             $4_1 = 0;
            }
            $343($0_1 | 0) | 0;
            continue label$28;
           };
          }
          $3_1 = $871($12_1 | 0) | 0;
          label$33 : {
           if (!$4_1) {
            break label$33
           }
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           if (($3_1 | 0) == ($2_1 | 0)) {
            break label$33
           }
           label$34 : {
            if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
             break label$34
            }
            $881($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
            $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           }
           HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
           HEAP32[$2_1 >> 2] = $4_1;
          }
          label$35 : {
           if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
            break label$35
           }
           label$36 : {
            label$37 : {
             if ($344($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
              break label$37
             }
             if (($341($0_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0)) {
              break label$36
             }
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$7;
           }
           label$38 : while (1) {
            $343($0_1 | 0) | 0;
            if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
             break label$35
            }
            label$39 : {
             label$40 : {
              if ($344($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
               break label$40
              }
              if ($342($7_1 | 0, 2048 | 0, $341($0_1 | 0) | 0 | 0) | 0) {
               break label$39
              }
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
             $0_1 = 0;
             break label$7;
            }
            label$41 : {
             if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
              break label$41
             }
             $945($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
            }
            $4_1 = $341($0_1 | 0) | 0;
            $2_1 = HEAP32[$9_1 >> 2] | 0;
            HEAP32[$9_1 >> 2] = $2_1 + 4 | 0;
            HEAP32[$2_1 >> 2] = $4_1;
            HEAP32[($11_1 + 28 | 0) >> 2] = (HEAP32[($11_1 + 28 | 0) >> 2] | 0) + -1 | 0;
            continue label$38;
           };
          }
          $4_1 = $10_1;
          if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($934($8_1 | 0) | 0 | 0)) {
           break label$2
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$7;
         }
         label$42 : {
          if (!$10_1) {
           break label$42
          }
          $4_1 = 1;
          label$43 : while (1) {
           if ($4_1 >>> 0 >= ($651($10_1 | 0) | 0) >>> 0) {
            break label$42
           }
           label$44 : {
            label$45 : {
             if ($344($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
              break label$45
             }
             if (($341($0_1 | 0) | 0 | 0) == (HEAP32[($652($10_1 | 0, $4_1 | 0) | 0) >> 2] | 0 | 0)) {
              break label$44
             }
            }
            HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
            $0_1 = 0;
            break label$7;
           }
           $343($0_1 | 0) | 0;
           $4_1 = $4_1 + 1 | 0;
           continue label$43;
          };
         }
         $0_1 = 1;
         if (($871($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0)) {
          break label$7
         }
         $0_1 = 0;
         HEAP32[($11_1 + 16 | 0) >> 2] = 0;
         $604($13_1 | 0, $871($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0, $11_1 + 16 | 0 | 0);
         label$46 : {
          if (!(HEAP32[($11_1 + 16 | 0) >> 2] | 0)) {
           break label$46
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          break label$7;
         }
         $0_1 = 1;
        }
        $1598($17_1 | 0) | 0;
        $1598($16_1 | 0) | 0;
        $1598($15_1 | 0) | 0;
        $1598($14_1 | 0) | 0;
        $1584($13_1 | 0) | 0;
        $882($12_1 | 0) | 0;
        global$0 = $11_1 + 560 | 0;
        return $0_1 | 0;
       }
       $4_1 = 0;
       break label$4;
      }
      $4_1 = 1;
     }
     label$47 : while (1) {
      label$48 : {
       switch ($4_1 | 0) {
       case 0:
        $946($19_1 | 0, $0_1 | 0, 0 | 0);
        $1605($17_1 | 0, $947($19_1 | 0) | 0 | 0);
        $4_1 = 1;
        continue label$47;
       default:
        break label$48;
       };
      }
      if (!($340($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
       break label$3
      }
      $19_1 = $11_1 + 8 | 0;
      if (!($342($7_1 | 0, 8192 | 0, $341($0_1 | 0) | 0 | 0) | 0)) {
       break label$3
      }
      $4_1 = 0;
      continue label$47;
     };
    }
    $4_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $934($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($948($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $935($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 40 | 0 | 0;
 }
 
 function $936($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $959($1_1 | 0) | 0;
    $960($10_1 | 0, $0_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $961($10_1 | 0, $0_1 | 0);
    $962($8_1 | 0, $10_1 | 0) | 0;
    $1598($10_1 | 0) | 0;
    $963($10_1 | 0, $0_1 | 0);
    $962($7_1 | 0, $10_1 | 0) | 0;
    $1598($10_1 | 0) | 0;
    HEAP32[$3_1 >> 2] = $964($0_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $965($0_1 | 0) | 0;
    $966($10_1 | 0, $0_1 | 0);
    $901($5_1 | 0, $10_1 | 0) | 0;
    $1584($10_1 | 0) | 0;
    $967($10_1 | 0, $0_1 | 0);
    $962($6_1 | 0, $10_1 | 0) | 0;
    $1598($10_1 | 0) | 0;
    $0_1 = $968($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $969($1_1 | 0) | 0;
   $970($10_1 | 0, $0_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[$10_1 >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $971($10_1 | 0, $0_1 | 0);
   $962($8_1 | 0, $10_1 | 0) | 0;
   $1598($10_1 | 0) | 0;
   $972($10_1 | 0, $0_1 | 0);
   $962($7_1 | 0, $10_1 | 0) | 0;
   $1598($10_1 | 0) | 0;
   HEAP32[$3_1 >> 2] = $973($0_1 | 0) | 0;
   HEAP32[$4_1 >> 2] = $974($0_1 | 0) | 0;
   $975($10_1 | 0, $0_1 | 0);
   $901($5_1 | 0, $10_1 | 0) | 0;
   $1584($10_1 | 0) | 0;
   $976($10_1 | 0, $0_1 | 0);
   $962($6_1 | 0, $10_1 | 0) | 0;
   $1598($10_1 | 0) | 0;
   $0_1 = $977($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $937($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($727($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $938($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $979($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($980($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $940($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $941($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $942($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($981($0_1 | 0) | 0) - ($979($1_1 | 0) | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $943($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $983($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $944($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $982($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $945($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($984($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($934($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($924() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $924() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $934($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (87 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $934($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $1654($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   $6_1 = ($6_1 - $7_1 | 0) >> 2 | 0;
   label$6 : {
    if (($4_1 | 0) == (87 | 0)) {
     break label$6
    }
    $985($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 86;
   $4_1 = $740($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $986($0_1 | 0, $4_1 | 0) | 0;
   $743($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($934($0_1 | 0) | 0) + ($6_1 << 2 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($934($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1565();
  abort();
 }
 
 function $946($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $978($0_1 | 0, $353(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $947($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $948($0_1) {
  $0_1 = $0_1 | 0;
  return $1544($0_1 | 0) | 0 | 0;
 }
 
 function $949($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 448 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 440 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 432 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 87;
  $8_1 = $740($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $316($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $339($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($933($7_1 + 440 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $197($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$1
   }
   $950($6_1 | 0);
   label$2 : {
    if (!(HEAPU8[($7_1 + 15 | 0) >> 0] | 0)) {
     break label$2
    }
    $1605($6_1 | 0, $388($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $388($1_1 | 0, 48 | 0) | 0;
   $4_1 = $934($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $2_1 = $3_1 + -4 | 0;
   label$3 : {
    label$4 : while (1) {
     if ($4_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $4_1 = $4_1 + 4 | 0;
     continue label$4;
    };
   }
   $951($6_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
  }
  label$5 : {
   if (!($344($7_1 + 440 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
  $579($7_1 + 16 | 0 | 0) | 0;
  $743($8_1 | 0) | 0;
  global$0 = $7_1 + 448 | 0;
  return $4_1 | 0;
 }
 
 function $950($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $952($0_1 | 0);
  label$1 : {
   label$2 : {
    if (!($784($0_1 | 0) | 0)) {
     break label$2
    }
    $2_1 = $953($0_1 | 0) | 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    $954($2_1 | 0, $1_1 + 12 | 0 | 0);
    $955($0_1 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = $956($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   $954($2_1 | 0, $1_1 + 8 | 0 | 0);
   $957($0_1 | 0, 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $951($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $958($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $952($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $953($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1353($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $954($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
 }
 
 function $955($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1353($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $956($0_1) {
  $0_1 = $0_1 | 0;
  return $1471($1353($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $957($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[(($1353($0_1 | 0) | 0) + 11 | 0) >> 0] = $1_1;
 }
 
 function $958($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $651($0_1 | 0) | 0;
  $5_1 = $1313($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $1312($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if (!($1545($1478($1_1 | 0) | 0 | 0, $735($0_1 | 0) | 0 | 0, ($735($0_1 | 0) | 0) + (($651($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1_1 = $1546($3_1 | 0, $1_1 | 0, $2_1 | 0, $1351($0_1 | 0) | 0 | 0) | 0;
    $1604($0_1 | 0, $781($1_1 | 0) | 0 | 0, $651($1_1 | 0) | 0 | 0) | 0;
    $1598($1_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
     break label$3
    }
    $1602($0_1 | 0, $5_1 | 0, ($6_1 + $4_1 | 0) - $5_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
   }
   $5_1 = ($727($0_1 | 0) | 0) + ($4_1 << 2 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $954($5_1 | 0, $1_1 | 0);
     $1_1 = $1_1 + 4 | 0;
     $5_1 = $5_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[$3_1 >> 2] = 0;
   $954($5_1 | 0, $3_1 | 0);
   $1315($0_1 | 0, $6_1 + $4_1 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $959($0_1) {
  $0_1 = $0_1 | 0;
  return $584($0_1 | 0, 134222164 | 0) | 0 | 0;
 }
 
 function $960($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $961($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $962($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $988($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $963($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $964($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $965($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $966($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $967($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $968($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $969($0_1) {
  $0_1 = $0_1 | 0;
  return $584($0_1 | 0, 134222156 | 0) | 0 | 0;
 }
 
 function $970($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $971($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $972($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $973($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $974($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $975($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $976($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $977($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $978($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $979($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $980($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($981($0_1 | 0) | 0 | 0) == ($979($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $981($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $982($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($724($3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0) {
       break label$4
      }
      $2_1 = 1;
      break label$3;
     }
     if ($1551($3_1 | 0, $725($3_1 + 24 | 0 | 0) | 0 | 0, $725($3_1 + 8 | 0 | 0) | 0 | 0) | 0) {
      break label$2
     }
     $2_1 = 0;
    }
    global$0 = $3_1 + 32 | 0;
    return $2_1 | 0;
   }
   $726($3_1 + 24 | 0 | 0) | 0;
   $726($3_1 + 8 | 0 | 0) | 0;
   continue label$1;
  };
 }
 
 function $983($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1498($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $984($0_1) {
  $0_1 = $0_1 | 0;
  return $746($0_1 | 0) | 0 | 0;
 }
 
 function $985($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($745($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($745($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $986($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $741($0_1 | 0, $985($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($389($984($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($746($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $987($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $16_1 = 0;
  $1487($0_1 | 0);
  $2_1 = $1345($1_1 | 0) | 0;
  $3_1 = $1345($0_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[i64toi32_i32$0 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1488($0_1 | 0, $1_1 | 0);
  $636($1_1 | 0);
 }
 
 function $988($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $16_1 = 0;
  $1492($0_1 | 0);
  $2_1 = $1353($1_1 | 0) | 0;
  $3_1 = $1353($0_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[i64toi32_i32$0 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1493($0_1 | 0, $1_1 | 0);
  $850($1_1 | 0);
 }
 
 function $989($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $14_1 = 0, $16_1 = 0, $18_1 = 0, $11_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 464 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 348 | 0) >> 2] = $7_1 + 352 | 0;
  $8_1 = $529($7_1 + 352 | 0 | 0, 100 | 0, 134231775 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 240 | 0) >> 2] = 86;
  $9_1 = 0;
  $10_1 = $711($7_1 + 232 | 0 | 0, 0 | 0, $7_1 + 240 | 0 | 0) | 0;
  HEAP32[($7_1 + 240 | 0) >> 2] = 86;
  $11_1 = $711($7_1 + 224 | 0 | 0, 0 | 0, $7_1 + 240 | 0 | 0) | 0;
  $12_1 = $7_1 + 240 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $634() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $712($7_1 + 348 | 0 | 0, $8_1 | 0, 134231775 | 0, $7_1 | 0) | 0;
    $12_1 = HEAP32[($7_1 + 348 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$1
    }
    $713($10_1 | 0, $12_1 | 0);
    $713($11_1 | 0, $1652($8_1 | 0) | 0 | 0);
    if ($990($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $868($11_1 | 0) | 0;
   }
   $316($7_1 + 216 | 0 | 0, $3_1 | 0);
   $13_1 = $225($7_1 + 216 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 348 | 0) >> 2] | 0;
   $632($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (!$8_1) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 348 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $598($7_1 + 192 | 0 | 0) | 0;
   $14_1 = $598($7_1 + 176 | 0 | 0) | 0;
   $16_1 = $598($7_1 + 160 | 0 | 0) | 0;
   $991($2_1 | 0, $9_1 | 0, $7_1 + 216 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 207 | 0 | 0, $7_1 + 206 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 156 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 86;
   $17_1 = $711($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (($8_1 - $2_1 | 0) << 1 | 0 | 1 | 0) + ($589($16_1 | 0) | 0) | 0;
     break label$4;
    }
    $18_1 = ($589($16_1 | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    $18_1 = ($18_1 + ($589($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0;
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $713($17_1 | 0, $1652($18_1 | 0) | 0 | 0);
    $2_1 = $868($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $992($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $197($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + $8_1 | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 208 | 0 | 0, HEAP8[($7_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($7_1 + 206 | 0) >> 0] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0);
   $8_1 = $199($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $715($17_1 | 0) | 0;
   $1584($16_1 | 0) | 0;
   $1584($14_1 | 0) | 0;
   $1584($15_1 | 0) | 0;
   $579($7_1 + 216 | 0 | 0) | 0;
   $715($11_1 | 0) | 0;
   $715($10_1 | 0) | 0;
   global$0 = $7_1 + 464 | 0;
   return $8_1 | 0;
  }
  $1565();
  abort();
 }
 
 function $990($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($993($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $991($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $898($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $899($10_1 | 0, $0_1 | 0);
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $900($10_1 | 0, $0_1 | 0);
      break label$3;
     }
     $994($10_1 | 0, $0_1 | 0);
     $12_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $902($10_1 | 0, $0_1 | 0);
    }
    $1_1 = $10_1;
    $901($8_1 | 0, $10_1 | 0) | 0;
    $1584($10_1 | 0) | 0;
    HEAP8[$4_1 >> 0] = $903($0_1 | 0) | 0;
    HEAP8[$5_1 >> 0] = $904($0_1 | 0) | 0;
    $905($10_1 | 0, $0_1 | 0);
    $901($6_1 | 0, $10_1 | 0) | 0;
    $1584($10_1 | 0) | 0;
    $906($10_1 | 0, $0_1 | 0);
    $901($7_1 | 0, $10_1 | 0) | 0;
    $1584($10_1 | 0) | 0;
    $0_1 = $907($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $908($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $909($10_1 | 0, $0_1 | 0);
     $13_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $910($10_1 | 0, $0_1 | 0);
     break label$5;
    }
    $995($10_1 | 0, $0_1 | 0);
    $14_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $911($10_1 | 0, $0_1 | 0);
   }
   $1_1 = $10_1;
   $901($8_1 | 0, $10_1 | 0) | 0;
   $1584($10_1 | 0) | 0;
   HEAP8[$4_1 >> 0] = $912($0_1 | 0) | 0;
   HEAP8[$5_1 >> 0] = $913($0_1 | 0) | 0;
   $914($10_1 | 0, $0_1 | 0);
   $901($6_1 | 0, $10_1 | 0) | 0;
   $1584($10_1 | 0) | 0;
   $915($10_1 | 0, $0_1 | 0);
   $901($7_1 | 0, $10_1 | 0) | 0;
   $1584($10_1 | 0) | 0;
   $0_1 = $916($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $992($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($17_1 | 0) != (4 | 0)) {
         break label$6
        }
        label$7 : {
         if (($589($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
          break label$7
         }
         HEAP32[($15_1 + 8 | 0) >> 2] = $996($13_1 | 0) | 0;
         HEAP32[$2_1 >> 2] = $999($997($15_1 + 8 | 0 | 0, 1 | 0) | 0 | 0, $998($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
        }
        $18_1 = $3_1 & 176 | 0;
        if (($18_1 | 0) == (16 | 0)) {
         break label$4
        }
        if (($18_1 | 0) != (32 | 0)) {
         break label$5
        }
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
        break label$4;
       }
       $18_1 = HEAP8[($8_1 + $17_1 | 0) >> 0] | 0;
       if ($18_1 >>> 0 > 4 >>> 0) {
        break label$2
       }
       label$8 : {
        switch ($18_1 | 0) {
        default:
         HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
         break label$2;
        case 1:
         HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
         $18_1 = $226($6_1 | 0, 32 | 0) | 0;
         $19_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
         HEAP8[$19_1 >> 0] = $18_1;
         break label$2;
        case 3:
         if ($592($13_1 | 0) | 0) {
          break label$2
         }
         $18_1 = HEAPU8[($590($13_1 | 0, 0 | 0) | 0) >> 0] | 0;
         $19_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
         HEAP8[$19_1 >> 0] = $18_1;
         break label$2;
        case 2:
         $18_1 = $592($12_1 | 0) | 0;
         if (!$16_1) {
          break label$2
         }
         if ($18_1) {
          break label$2
         }
         HEAP32[$2_1 >> 2] = $999($996($12_1 | 0) | 0 | 0, $998($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
         break label$2;
        case 4:
         break label$8;
        };
       }
       $20_1 = HEAP32[$2_1 >> 2] | 0;
       $4_1 = $7_1 ? $4_1 + 1 | 0 : $4_1;
       $18_1 = $4_1;
       label$13 : {
        label$14 : while (1) {
         if ($18_1 >>> 0 >= $5_1 >>> 0) {
          break label$13
         }
         if (!($319($6_1 | 0, 2048 | 0, HEAP8[$18_1 >> 0] | 0 | 0) | 0)) {
          break label$13
         }
         $18_1 = $18_1 + 1 | 0;
         continue label$14;
        };
       }
       $19_1 = $14_1;
       label$15 : {
        if (($19_1 | 0) < (1 | 0)) {
         break label$15
        }
        label$16 : {
         label$17 : while (1) {
          $21_1 = ($19_1 | 0) < (1 | 0);
          if ($21_1) {
           break label$16
          }
          if ($18_1 >>> 0 <= $4_1 >>> 0) {
           break label$16
          }
          $18_1 = $18_1 + -1 | 0;
          $21_1 = HEAPU8[$18_1 >> 0] | 0;
          $22_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
          HEAP8[$22_1 >> 0] = $21_1;
          $19_1 = $19_1 + -1 | 0;
          continue label$17;
         };
        }
        label$18 : {
         label$19 : {
          if (!$21_1) {
           break label$19
          }
          $22_1 = 0;
          break label$18;
         }
         $22_1 = $226($6_1 | 0, 48 | 0) | 0;
        }
        label$20 : {
         label$21 : while (1) {
          $21_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
          if (($19_1 | 0) < (1 | 0)) {
           break label$20
          }
          HEAP8[$21_1 >> 0] = $22_1;
          $19_1 = $19_1 + -1 | 0;
          continue label$21;
         };
        }
        HEAP8[$21_1 >> 0] = $9_1;
       }
       label$22 : {
        if (($18_1 | 0) != ($4_1 | 0)) {
         break label$22
        }
        $18_1 = $226($6_1 | 0, 48 | 0) | 0;
        $19_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
        HEAP8[$19_1 >> 0] = $18_1;
        break label$3;
       }
       label$23 : {
        label$24 : {
         if (!($592($11_1 | 0) | 0)) {
          break label$24
         }
         $23_1 = $1000() | 0;
         break label$23;
        }
        $23_1 = HEAP8[($590($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
       }
       $19_1 = 0;
       $24_1 = 0;
       label$25 : while (1) {
        if (($18_1 | 0) == ($4_1 | 0)) {
         break label$3
        }
        label$26 : {
         label$27 : {
          if (($19_1 | 0) == ($23_1 | 0)) {
           break label$27
          }
          $21_1 = $19_1;
          break label$26;
         }
         $21_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
         HEAP8[$21_1 >> 0] = $10_1;
         $21_1 = 0;
         label$28 : {
          $24_1 = $24_1 + 1 | 0;
          if ($24_1 >>> 0 < ($589($11_1 | 0) | 0) >>> 0) {
           break label$28
          }
          $23_1 = $19_1;
          break label$26;
         }
         label$29 : {
          if ((HEAPU8[($590($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($824() | 0) & 255 | 0 | 0)) {
           break label$29
          }
          $23_1 = $1000() | 0;
          break label$26;
         }
         $23_1 = HEAP8[($590($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
        }
        $18_1 = $18_1 + -1 | 0;
        $19_1 = HEAPU8[$18_1 >> 0] | 0;
        $22_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
        HEAP8[$22_1 >> 0] = $19_1;
        $19_1 = $21_1 + 1 | 0;
        continue label$25;
       };
      }
      HEAP32[$1_1 >> 2] = $0_1;
     }
     global$0 = $15_1 + 16 | 0;
     return;
    }
    $703($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
   }
   $17_1 = $17_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $993($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($885($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $994($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $995($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $996($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1016($1_1 + 8 | 0 | 0, $212($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $997($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1018($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $998($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1016($1_1 + 8 | 0 | 0, ($212($0_1 | 0) | 0) + ($589($0_1 | 0) | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $999($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1015($1014($0_1 | 0) | 0 | 0, $1014($1_1 | 0) | 0 | 0, $811($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1000() {
  return $1017() | 0 | 0;
 }
 
 function $1001($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $13_1 = 0, $11_1 = 0, $10_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 192 | 0;
  global$0 = $6_1;
  $316($6_1 + 184 | 0 | 0, $3_1 | 0);
  $7_1 = $225($6_1 + 184 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($589($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAPU8[($590($5_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0) == (($226($7_1 | 0, 45 | 0) | 0) & 255 | 0 | 0);
  }
  $9_1 = $598($6_1 + 160 | 0 | 0) | 0;
  $10_1 = $598($6_1 + 144 | 0 | 0) | 0;
  $11_1 = $598($6_1 + 128 | 0 | 0) | 0;
  $991($2_1 | 0, $8_1 | 0, $6_1 + 184 | 0 | 0, $6_1 + 176 | 0 | 0, $6_1 + 175 | 0 | 0, $6_1 + 174 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 124 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 86;
  $12_1 = $711($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($589($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $589($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
    $13_1 = (($589($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ($589($11_1 | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   $13_1 = ($13_1 + ($589($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0;
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $713($12_1 | 0, $1652($13_1 | 0) | 0 | 0);
   $2_1 = $868($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $1565();
   abort();
  }
  $992($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $197($3_1 | 0) | 0 | 0, $205($5_1 | 0) | 0 | 0, ($205($5_1 | 0) | 0) + ($589($5_1 | 0) | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 175 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 174 | 0) >> 0] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0);
  $5_1 = $199($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $715($12_1 | 0) | 0;
  $1584($11_1 | 0) | 0;
  $1584($10_1 | 0) | 0;
  $1584($9_1 | 0) | 0;
  $579($6_1 + 184 | 0 | 0) | 0;
  global$0 = $6_1 + 192 | 0;
  return $5_1 | 0;
 }
 
 function $1002($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $14_1 = 0, $16_1 = 0, $18_1 = 0, $11_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 1072 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 956 | 0) >> 2] = $7_1 + 960 | 0;
  $8_1 = $529($7_1 + 960 | 0 | 0, 100 | 0, 134231775 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 544 | 0) >> 2] = 86;
  $9_1 = 0;
  $10_1 = $711($7_1 + 536 | 0 | 0, 0 | 0, $7_1 + 544 | 0 | 0) | 0;
  HEAP32[($7_1 + 544 | 0) >> 2] = 86;
  $11_1 = $740($7_1 + 528 | 0 | 0, 0 | 0, $7_1 + 544 | 0 | 0) | 0;
  $12_1 = $7_1 + 544 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $634() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $712($7_1 + 956 | 0 | 0, $8_1 | 0, 134231775 | 0, $7_1 | 0) | 0;
    $12_1 = HEAP32[($7_1 + 956 | 0) >> 2] | 0;
    if (!$12_1) {
     break label$1
    }
    $713($10_1 | 0, $12_1 | 0);
    $741($11_1 | 0, $1652($8_1 << 2 | 0 | 0) | 0 | 0);
    if ($1003($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $934($11_1 | 0) | 0;
   }
   $316($7_1 + 520 | 0 | 0, $3_1 | 0);
   $13_1 = $339($7_1 + 520 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 956 | 0) >> 2] | 0;
   $678($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (!$8_1) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 956 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $598($7_1 + 488 | 0 | 0) | 0;
   $14_1 = $849($7_1 + 472 | 0 | 0) | 0;
   $16_1 = $849($7_1 + 456 | 0 | 0) | 0;
   $1004($2_1 | 0, $9_1 | 0, $7_1 + 520 | 0 | 0, $7_1 + 512 | 0 | 0, $7_1 + 508 | 0 | 0, $7_1 + 504 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 452 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 86;
   $17_1 = $740($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (($8_1 - $2_1 | 0) << 1 | 0 | 1 | 0) + ($651($16_1 | 0) | 0) | 0;
     break label$4;
    }
    $18_1 = ($651($16_1 | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    $18_1 = ($18_1 + ($651($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 452 | 0) >> 2] | 0) | 0;
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $741($17_1 | 0, $1652($18_1 << 2 | 0 | 0) | 0 | 0);
    $2_1 = $934($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $1005($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $197($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + ($8_1 << 2 | 0) | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 512 | 0 | 0, HEAP32[($7_1 + 508 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 504 | 0) >> 2] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 452 | 0) >> 2] | 0 | 0);
   $8_1 = $732($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $743($17_1 | 0) | 0;
   $1598($16_1 | 0) | 0;
   $1598($14_1 | 0) | 0;
   $1584($15_1 | 0) | 0;
   $579($7_1 + 520 | 0 | 0) | 0;
   $743($11_1 | 0) | 0;
   $715($10_1 | 0) | 0;
   global$0 = $7_1 + 1072 | 0;
   return $8_1 | 0;
  }
  $1565();
  abort();
 }
 
 function $1003($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1006($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1004($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $959($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $960($10_1 | 0, $0_1 | 0);
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $961($10_1 | 0, $0_1 | 0);
      break label$3;
     }
     $1007($10_1 | 0, $0_1 | 0);
     $12_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $963($10_1 | 0, $0_1 | 0);
    }
    $1_1 = $10_1;
    $962($8_1 | 0, $10_1 | 0) | 0;
    $1598($10_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $964($0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $965($0_1 | 0) | 0;
    $966($10_1 | 0, $0_1 | 0);
    $901($6_1 | 0, $10_1 | 0) | 0;
    $1584($10_1 | 0) | 0;
    $967($10_1 | 0, $0_1 | 0);
    $962($7_1 | 0, $10_1 | 0) | 0;
    $1598($10_1 | 0) | 0;
    $0_1 = $968($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $969($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $970($10_1 | 0, $0_1 | 0);
     $13_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $971($10_1 | 0, $0_1 | 0);
     break label$5;
    }
    $1008($10_1 | 0, $0_1 | 0);
    $14_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $972($10_1 | 0, $0_1 | 0);
   }
   $1_1 = $10_1;
   $962($8_1 | 0, $10_1 | 0) | 0;
   $1598($10_1 | 0) | 0;
   HEAP32[$4_1 >> 2] = $973($0_1 | 0) | 0;
   HEAP32[$5_1 >> 2] = $974($0_1 | 0) | 0;
   $975($10_1 | 0, $0_1 | 0);
   $901($6_1 | 0, $10_1 | 0) | 0;
   $1584($10_1 | 0) | 0;
   $976($10_1 | 0, $0_1 | 0);
   $962($7_1 | 0, $10_1 | 0) | 0;
   $1598($10_1 | 0) | 0;
   $0_1 = $977($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1005($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      if (($17_1 | 0) != (4 | 0)) {
       break label$4
      }
      label$5 : {
       if (($651($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
        break label$5
       }
       HEAP32[($15_1 + 8 | 0) >> 2] = $1009($13_1 | 0) | 0;
       HEAP32[$2_1 >> 2] = $1012($1010($15_1 + 8 | 0 | 0, 1 | 0) | 0 | 0, $1011($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      }
      $18_1 = $3_1 & 176 | 0;
      if (($18_1 | 0) == (16 | 0)) {
       break label$1
      }
      if (($18_1 | 0) != (32 | 0)) {
       break label$2
      }
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$1;
     }
     label$6 : {
      $18_1 = HEAP8[($8_1 + $17_1 | 0) >> 0] | 0;
      if ($18_1 >>> 0 > 4 >>> 0) {
       break label$6
      }
      label$7 : {
       switch ($18_1 | 0) {
       default:
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
        break label$6;
       case 1:
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
        $18_1 = $388($6_1 | 0, 32 | 0) | 0;
        $19_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
        HEAP32[$19_1 >> 2] = $18_1;
        break label$6;
       case 3:
        if ($653($13_1 | 0) | 0) {
         break label$6
        }
        $18_1 = HEAP32[($652($13_1 | 0, 0 | 0) | 0) >> 2] | 0;
        $19_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
        HEAP32[$19_1 >> 2] = $18_1;
        break label$6;
       case 2:
        $18_1 = $653($12_1 | 0) | 0;
        if (!$16_1) {
         break label$6
        }
        if ($18_1) {
         break label$6
        }
        HEAP32[$2_1 >> 2] = $1012($1009($12_1 | 0) | 0 | 0, $1011($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
        break label$6;
       case 4:
        break label$7;
       };
      }
      $20_1 = HEAP32[$2_1 >> 2] | 0;
      $4_1 = $7_1 ? $4_1 + 4 | 0 : $4_1;
      $18_1 = $4_1;
      label$12 : {
       label$13 : while (1) {
        if ($18_1 >>> 0 >= $5_1 >>> 0) {
         break label$12
        }
        if (!($342($6_1 | 0, 2048 | 0, HEAP32[$18_1 >> 2] | 0 | 0) | 0)) {
         break label$12
        }
        $18_1 = $18_1 + 4 | 0;
        continue label$13;
       };
      }
      $19_1 = $14_1;
      label$14 : {
       if (($19_1 | 0) < (1 | 0)) {
        break label$14
       }
       label$15 : {
        label$16 : while (1) {
         $21_1 = ($19_1 | 0) < (1 | 0);
         if ($21_1) {
          break label$15
         }
         if ($18_1 >>> 0 <= $4_1 >>> 0) {
          break label$15
         }
         $18_1 = $18_1 + -4 | 0;
         $21_1 = HEAP32[$18_1 >> 2] | 0;
         $22_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$2_1 >> 2] = $22_1 + 4 | 0;
         HEAP32[$22_1 >> 2] = $21_1;
         $19_1 = $19_1 + -1 | 0;
         continue label$16;
        };
       }
       label$17 : {
        label$18 : {
         if (!$21_1) {
          break label$18
         }
         $23_1 = 0;
         break label$17;
        }
        $23_1 = $388($6_1 | 0, 48 | 0) | 0;
       }
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       label$19 : {
        label$20 : while (1) {
         $22_1 = $21_1 + 4 | 0;
         if (($19_1 | 0) < (1 | 0)) {
          break label$19
         }
         HEAP32[$21_1 >> 2] = $23_1;
         $19_1 = $19_1 + -1 | 0;
         $21_1 = $22_1;
         continue label$20;
        };
       }
       HEAP32[$2_1 >> 2] = $22_1;
       HEAP32[$21_1 >> 2] = $9_1;
      }
      label$21 : {
       label$22 : {
        if (($18_1 | 0) != ($4_1 | 0)) {
         break label$22
        }
        $19_1 = $388($6_1 | 0, 48 | 0) | 0;
        $21_1 = HEAP32[$2_1 >> 2] | 0;
        $18_1 = $21_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $18_1;
        HEAP32[$21_1 >> 2] = $19_1;
        break label$21;
       }
       label$23 : {
        label$24 : {
         if (!($592($11_1 | 0) | 0)) {
          break label$24
         }
         $23_1 = $1000() | 0;
         break label$23;
        }
        $23_1 = HEAP8[($590($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
       }
       $19_1 = 0;
       $24_1 = 0;
       label$25 : {
        label$26 : while (1) {
         if (($18_1 | 0) == ($4_1 | 0)) {
          break label$25
         }
         label$27 : {
          label$28 : {
           if (($19_1 | 0) == ($23_1 | 0)) {
            break label$28
           }
           $21_1 = $19_1;
           break label$27;
          }
          $21_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
          HEAP32[$21_1 >> 2] = $10_1;
          $21_1 = 0;
          label$29 : {
           $24_1 = $24_1 + 1 | 0;
           if ($24_1 >>> 0 < ($589($11_1 | 0) | 0) >>> 0) {
            break label$29
           }
           $23_1 = $19_1;
           break label$27;
          }
          label$30 : {
           if ((HEAPU8[($590($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($824() | 0) & 255 | 0 | 0)) {
            break label$30
           }
           $23_1 = $1000() | 0;
           break label$27;
          }
          $23_1 = HEAP8[($590($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
         }
         $18_1 = $18_1 + -4 | 0;
         $19_1 = HEAP32[$18_1 >> 2] | 0;
         $22_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$2_1 >> 2] = $22_1 + 4 | 0;
         HEAP32[$22_1 >> 2] = $19_1;
         $19_1 = $21_1 + 1 | 0;
         continue label$26;
        };
       }
       $18_1 = HEAP32[$2_1 >> 2] | 0;
      }
      $733($20_1 | 0, $18_1 | 0);
     }
     $17_1 = $17_1 + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[$1_1 >> 2] = $0_1;
  }
  global$0 = $15_1 + 16 | 0;
 }
 
 function $1006($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($948($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1007($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $1008($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $1009($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1021($1_1 + 8 | 0 | 0, $782($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1010($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1022($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1011($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1021($1_1 + 8 | 0 | 0, ($782($0_1 | 0) | 0) + (($651($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1012($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1020($1019($0_1 | 0) | 0 | 0, $1019($1_1 | 0) | 0 | 0, $820($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1013($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $13_1 = 0, $11_1 = 0, $10_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 496 | 0;
  global$0 = $6_1;
  $316($6_1 + 488 | 0 | 0, $3_1 | 0);
  $7_1 = $339($6_1 + 488 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($651($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAP32[($652($5_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0) == ($388($7_1 | 0, 45 | 0) | 0 | 0);
  }
  $9_1 = $598($6_1 + 456 | 0 | 0) | 0;
  $10_1 = $849($6_1 + 440 | 0 | 0) | 0;
  $11_1 = $849($6_1 + 424 | 0 | 0) | 0;
  $1004($2_1 | 0, $8_1 | 0, $6_1 + 488 | 0 | 0, $6_1 + 480 | 0 | 0, $6_1 + 476 | 0 | 0, $6_1 + 472 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 420 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 86;
  $12_1 = $740($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($651($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 420 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $651($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 420 | 0) >> 2] | 0;
    $13_1 = (($651($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ($651($11_1 | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   $13_1 = ($13_1 + ($651($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 420 | 0) >> 2] | 0) | 0;
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $741($12_1 | 0, $1652($13_1 << 2 | 0 | 0) | 0 | 0);
   $2_1 = $934($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $1565();
   abort();
  }
  $1005($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $197($3_1 | 0) | 0 | 0, $781($5_1 | 0) | 0 | 0, ($781($5_1 | 0) | 0) + (($651($5_1 | 0) | 0) << 2 | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 480 | 0 | 0, HEAP32[($6_1 + 476 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 472 | 0) >> 2] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 420 | 0) >> 2] | 0 | 0);
  $5_1 = $732($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $743($12_1 | 0) | 0;
  $1598($11_1 | 0) | 0;
  $1598($10_1 | 0) | 0;
  $1584($9_1 | 0) | 0;
  $579($6_1 + 488 | 0 | 0) | 0;
  global$0 = $6_1 + 496 | 0;
  return $5_1 | 0;
 }
 
 function $1014($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1015($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 >> 2] = $1_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : while (1) {
    if (!($1552($3_1 + 8 | 0 | 0, $3_1 | 0) | 0)) {
     break label$1
    }
    HEAP8[$2_1 >> 0] = HEAPU8[($875($3_1 + 8 | 0 | 0) | 0) >> 0] | 0;
    $2_1 = $2_1 + 1 | 0;
    $876($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1016($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1017() {
  return -1 | 0;
 }
 
 function $1018($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1019($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1020($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 >> 2] = $1_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : while (1) {
    if (!($1554($3_1 + 8 | 0 | 0, $3_1 | 0) | 0)) {
     break label$1
    }
    HEAP32[$2_1 >> 2] = HEAP32[($940($3_1 + 8 | 0 | 0) | 0) >> 2] | 0;
    $2_1 = $2_1 + 4 | 0;
    $941($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1021($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1022($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1023($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $530($633($1_1 | 0) | 0 | 0, 1 | 0) | 0;
  return (($1_1 | 0) == (-1 | 0) ? -1 : $1_1 >>> 1 | 0) | 0;
 }
 
 function $1024($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = $598($6_1 + 16 | 0 | 0) | 0;
  $1026($6_1 + 8 | 0 | 0, $1025($7_1 | 0) | 0 | 0, $633($5_1 | 0) | 0 | 0, ($633($5_1 | 0) | 0) + ($589($5_1 | 0) | 0) | 0 | 0) | 0;
  $5_1 = $531((($2_1 | 0) == (-1 | 0) ? -1 : $2_1 << 1 | 0) | 0, $3_1 | 0, $4_1 | 0, $633($7_1 | 0) | 0 | 0) | 0;
  $1027($6_1 | 0, $1025($598($0_1 | 0) | 0 | 0) | 0 | 0, $5_1 | 0, $5_1 + ($238($5_1 | 0) | 0) | 0 | 0) | 0;
  $1584($7_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
 }
 
 function $1025($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1031($1_1 + 8 | 0 | 0, $0_1 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1026($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
     break label$1
    }
    $1029($1028($4_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    $1030($4_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1027($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
     break label$1
    }
    $1029($1028($4_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    $1030($4_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1028($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1029($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1594(HEAP32[$0_1 >> 2] | 0 | 0, HEAP8[$1_1 >> 0] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $1030($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1031($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1556($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1032($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $532((($1_1 | 0) == (-1 | 0) ? -1 : $1_1 << 1 | 0) | 0) | 0;
 }
 
 function $1033($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $530($633($1_1 | 0) | 0 | 0, 1 | 0) | 0;
  return (($1_1 | 0) == (-1 | 0) ? -1 : $1_1 >>> 1 | 0) | 0;
 }
 
 function $1034($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = $598($6_1 + 16 | 0 | 0) | 0;
  $8_1 = $1035($6_1 + 8 | 0 | 0) | 0;
  $1037($8_1 | 0, $1025($7_1 | 0) | 0 | 0, $1036($5_1 | 0) | 0 | 0, ($1036($5_1 | 0) | 0) + (($651($5_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
  $563($8_1 | 0) | 0;
  $5_1 = $531((($2_1 | 0) == (-1 | 0) ? -1 : $2_1 << 1 | 0) | 0, $3_1 | 0, $4_1 | 0, $633($7_1 | 0) | 0 | 0) | 0;
  $2_1 = $849($0_1 | 0) | 0;
  $0_1 = $1038($6_1 + 8 | 0 | 0) | 0;
  $1040($0_1 | 0, $1039($2_1 | 0) | 0 | 0, $5_1 | 0, $5_1 + ($238($5_1 | 0) | 0) | 0 | 0) | 0;
  $563($0_1 | 0) | 0;
  $1584($7_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
 }
 
 function $1035($0_1) {
  $0_1 = $0_1 | 0;
  $1041($0_1 | 0, 1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134232900;
  return $0_1 | 0;
 }
 
 function $1036($0_1) {
  $0_1 = $0_1 | 0;
  return $781($0_1 | 0) | 0 | 0;
 }
 
 function $1037($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
  $5_1 = $4_1 + 48 | 0;
  $6_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($6_1 | 0) == (2 | 0)) {
      break label$2
     }
     if ($2_1 >>> 0 >= $3_1 >>> 0) {
      break label$2
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
     $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $4_1 + 48 | 0, $2_1, $3_1, $4_1 + 8 | 0, $4_1 + 16 | 0, $5_1, $4_1 + 12 | 0) | 0;
     if (($6_1 | 0) == (2 | 0)) {
      break label$1
     }
     $1_1 = $4_1 + 16 | 0;
     if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : while (1) {
      label$5 : {
       if ($1_1 >>> 0 < (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       continue label$3;
      }
      $1029($1028($4_1 + 56 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
      $1_1 = $1_1 + 1 | 0;
      $1030($4_1 + 56 | 0 | 0) | 0;
      continue label$4;
     };
    };
   }
   $1_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
   global$0 = $4_1 + 64 | 0;
   return $1_1 | 0;
  }
  $819($1_1 | 0);
  abort();
 }
 
 function $1038($0_1) {
  $0_1 = $0_1 | 0;
  $1041($0_1 | 0, 1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134232996;
  return $0_1 | 0;
 }
 
 function $1039($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($1045($1_1 + 8 | 0 | 0, $0_1 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1040($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 152 | 0) >> 2] = $1_1;
  $5_1 = $4_1 + 144 | 0;
  $6_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($6_1 | 0) == (2 | 0)) {
      break label$2
     }
     if ($2_1 >>> 0 >= $3_1 >>> 0) {
      break label$2
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
     $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $4_1 + 144 | 0, $2_1, ($3_1 - $2_1 | 0 | 0) > (32 | 0) ? $2_1 + 32 | 0 : $3_1, $4_1 + 8 | 0, $4_1 + 16 | 0, $5_1, $4_1 + 12 | 0) | 0;
     if (($6_1 | 0) == (2 | 0)) {
      break label$1
     }
     $1_1 = $4_1 + 16 | 0;
     if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : while (1) {
      label$5 : {
       if ($1_1 >>> 0 < (HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       $2_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       continue label$3;
      }
      HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      $1043($1042($4_1 + 152 | 0 | 0) | 0 | 0, $4_1 + 4 | 0 | 0) | 0;
      $1_1 = $1_1 + 4 | 0;
      $1044($4_1 + 152 | 0 | 0) | 0;
      continue label$4;
     };
    };
   }
   $1_1 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
   global$0 = $4_1 + 160 | 0;
   return $1_1 | 0;
  }
  $819($4_1 | 0);
  abort();
 }
 
 function $1041($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1219($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134232784;
  return $0_1 | 0;
 }
 
 function $1042($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1043($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1605(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($242($1_1 | 0) | 0) >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $1044($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1045($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1557($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1046($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $532((($1_1 | 0) == (-1 | 0) ? -1 : $1_1 << 1 | 0) | 0) | 0;
 }
 
 function $1047($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 134231864;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($634() | 0 | 0)) {
    break label$1
   }
   $533(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  }
  $563($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1048($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134231792;
  $1_1 = $1050($0_1 + 16 | 0 | 0, 28 | 0) | 0;
  $381($0_1 + 176 | 0 | 0, 134231781 | 0) | 0;
  $1051($1_1 | 0);
  $1052();
  $1053($0_1 | 0, 134223520 | 0);
  $1054();
  $1055($0_1 | 0, 134223528 | 0);
  $1056();
  $1057($0_1 | 0, 134223536 | 0);
  $1058();
  $1059($0_1 | 0, 134223552 | 0);
  $1060();
  $1061($0_1 | 0, 134223560 | 0);
  $1062();
  $1063($0_1 | 0, 134223568 | 0);
  $1064();
  $1065($0_1 | 0, 134223584 | 0);
  $1066();
  $1067($0_1 | 0, 134223592 | 0);
  $1068();
  $1069($0_1 | 0, 134223600 | 0);
  $1070();
  $1071($0_1 | 0, 134223632 | 0);
  $1072();
  $1073($0_1 | 0, 134223664 | 0);
  $1074();
  $1075($0_1 | 0, 134223672 | 0);
  $1076();
  $1077($0_1 | 0, 134223680 | 0);
  $1078();
  $1079($0_1 | 0, 134223688 | 0);
  $1080();
  $1081($0_1 | 0, 134223696 | 0);
  $1082();
  $1083($0_1 | 0, 134223704 | 0);
  $1084();
  $1085($0_1 | 0, 134223712 | 0);
  $1086();
  $1087($0_1 | 0, 134223720 | 0);
  $1088();
  $1089($0_1 | 0, 134223728 | 0);
  $1090();
  $1091($0_1 | 0, 134223736 | 0);
  $1092();
  $1093($0_1 | 0, 134223744 | 0);
  $1094();
  $1095($0_1 | 0, 134223752 | 0);
  $1096();
  $1097($0_1 | 0, 134223760 | 0);
  $1098();
  $1099($0_1 | 0, 134223776 | 0);
  $1100();
  $1101($0_1 | 0, 134223792 | 0);
  $1102();
  $1103($0_1 | 0, 134223808 | 0);
  $1104();
  $1105($0_1 | 0, 134223824 | 0);
  $1106();
  $1107($0_1 | 0, 134223832 | 0);
  return $0_1 | 0;
 }
 
 function $1049($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1108($0_1 | 0, $1_1 + -1 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134232316;
  return $0_1 | 0;
 }
 
 function $1050($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1109($0_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1110($0_1 | 0, $1_1 | 0);
   $1111($0_1 | 0, $1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1051($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $1112($0_1 | 0) | 0;
  $1113($0_1 | 0);
  $1114($0_1 | 0, $1_1 | 0);
  $1115($0_1 | 0);
 }
 
 function $1052() {
  $1118(134223520 | 0, 1 | 0) | 0;
 }
 
 function $1053($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222060 | 0) | 0 | 0);
 }
 
 function $1054() {
  $1119(134223528 | 0, 1 | 0) | 0;
 }
 
 function $1055($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222068 | 0) | 0 | 0);
 }
 
 function $1056() {
  $1120(134223536 | 0, 0 | 0, 0 | 0, 1 | 0) | 0;
 }
 
 function $1057($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222264 | 0) | 0 | 0);
 }
 
 function $1058() {
  $1121(134223552 | 0, 1 | 0) | 0;
 }
 
 function $1059($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222256 | 0) | 0 | 0);
 }
 
 function $1060() {
  $1122(134223560 | 0, 1 | 0) | 0;
 }
 
 function $1061($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222272 | 0) | 0 | 0);
 }
 
 function $1062() {
  $1123(134223568 | 0, 1 | 0) | 0;
 }
 
 function $1063($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222280 | 0) | 0 | 0);
 }
 
 function $1064() {
  $1124(134223584 | 0, 1 | 0) | 0;
 }
 
 function $1065($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222288 | 0) | 0 | 0);
 }
 
 function $1066() {
  $1041(134223592 | 0, 1 | 0) | 0;
 }
 
 function $1067($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222296 | 0) | 0 | 0);
 }
 
 function $1068() {
  $1125(134223600 | 0, 1 | 0) | 0;
 }
 
 function $1069($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222304 | 0) | 0 | 0);
 }
 
 function $1070() {
  $1126(134223632 | 0, 1 | 0) | 0;
 }
 
 function $1071($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222312 | 0) | 0 | 0);
 }
 
 function $1072() {
  $1127(134223664 | 0, 1 | 0) | 0;
 }
 
 function $1073($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222076 | 0) | 0 | 0);
 }
 
 function $1074() {
  $1128(134223672 | 0, 1 | 0) | 0;
 }
 
 function $1075($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222084 | 0) | 0 | 0);
 }
 
 function $1076() {
  $1129(134223680 | 0, 1 | 0) | 0;
 }
 
 function $1077($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222092 | 0) | 0 | 0);
 }
 
 function $1078() {
  $1130(134223688 | 0, 1 | 0) | 0;
 }
 
 function $1079($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222100 | 0) | 0 | 0);
 }
 
 function $1080() {
  $1131(134223696 | 0, 1 | 0) | 0;
 }
 
 function $1081($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222140 | 0) | 0 | 0);
 }
 
 function $1082() {
  $1132(134223704 | 0, 1 | 0) | 0;
 }
 
 function $1083($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222148 | 0) | 0 | 0);
 }
 
 function $1084() {
  $1133(134223712 | 0, 1 | 0) | 0;
 }
 
 function $1085($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222156 | 0) | 0 | 0);
 }
 
 function $1086() {
  $1134(134223720 | 0, 1 | 0) | 0;
 }
 
 function $1087($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222164 | 0) | 0 | 0);
 }
 
 function $1088() {
  $1135(134223728 | 0, 1 | 0) | 0;
 }
 
 function $1089($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222172 | 0) | 0 | 0);
 }
 
 function $1090() {
  $1136(134223736 | 0, 1 | 0) | 0;
 }
 
 function $1091($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222180 | 0) | 0 | 0);
 }
 
 function $1092() {
  $1137(134223744 | 0, 1 | 0) | 0;
 }
 
 function $1093($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222188 | 0) | 0 | 0);
 }
 
 function $1094() {
  $1138(134223752 | 0, 1 | 0) | 0;
 }
 
 function $1095($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222196 | 0) | 0 | 0);
 }
 
 function $1096() {
  $1139(134223760 | 0, 1 | 0) | 0;
 }
 
 function $1097($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222108 | 0) | 0 | 0);
 }
 
 function $1098() {
  $1140(134223776 | 0, 1 | 0) | 0;
 }
 
 function $1099($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222116 | 0) | 0 | 0);
 }
 
 function $1100() {
  $1141(134223792 | 0, 1 | 0) | 0;
 }
 
 function $1101($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222124 | 0) | 0 | 0);
 }
 
 function $1102() {
  $1142(134223808 | 0, 1 | 0) | 0;
 }
 
 function $1103($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222132 | 0) | 0 | 0);
 }
 
 function $1104() {
  $1143(134223824 | 0, 1 | 0) | 0;
 }
 
 function $1105($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222204 | 0) | 0 | 0);
 }
 
 function $1106() {
  $1144(134223832 | 0, 1 | 0) | 0;
 }
 
 function $1107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1117($0_1 | 0, $1_1 | 0, $1116(134222212 | 0) | 0 | 0);
 }
 
 function $1108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 134237732;
  return $0_1 | 0;
 }
 
 function $1109($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $64($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  $1358($0_1 + 16 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (($1359($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1608($0_1 | 0);
   abort();
  }
  $2_1 = $1361($1360($0_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($1362($0_1 | 0) | 0) >> 2] = $2_1 + ($1_1 << 2 | 0) | 0;
  $1363($0_1 | 0, 0 | 0);
 }
 
 function $1111($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1360($0_1 | 0) | 0;
  label$1 : while (1) {
   $4_1 = $1364($2_1 + 8 | 0 | 0, $0_1 | 0, 1 | 0) | 0;
   $1366($3_1 | 0, $1365(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0;
   $1367($4_1 | 0);
   $1_1 = $1_1 + -1 | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1112($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1113($0_1) {
  $0_1 = $0_1 | 0;
  $1408($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $1114($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1379($0_1 | 0, $1377($0_1 | 0) | 0 | 0, ($1377($0_1 | 0) | 0) + (($1378($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1377($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0, ($1377($0_1 | 0) | 0) + (($1112($0_1 | 0) | 0) << 2 | 0) | 0 | 0);
 }
 
 function $1115($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1116($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 88;
  i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1175($0_1 | 0, $1174($1_1 + 16 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0 | 0);
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  global$0 = $1_1 + 32 | 0;
  return $0_1 + -1 | 0 | 0;
 }
 
 function $1117($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1147($1_1 | 0);
  $4_1 = $1151($3_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  label$1 : {
   $1_1 = $0_1 + 16 | 0;
   if (($1112($1_1 | 0) | 0) >>> 0 > $2_1 >>> 0) {
    break label$1
   }
   $1154($1_1 | 0, $2_1 + 1 | 0 | 0);
  }
  label$2 : {
   if (!(HEAP32[($1146($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
    break label$2
   }
   $1155(HEAP32[($1146($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
  }
  $0_1 = $1156($4_1 | 0) | 0;
  HEAP32[($1146($1_1 | 0, $2_1 | 0) | 0) >> 2] = $0_1;
  $1152($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1118($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134233384;
  return $0_1 | 0;
 }
 
 function $1119($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134233416;
  return $0_1 | 0;
 }
 
 function $1120($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1049($0_1 | 0, $3_1 | 0) | 0;
  $1200($0_1 | 0) | 0;
  HEAP8[($0_1 + 12 | 0) >> 0] = $2_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 134231812;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $1186() | 0;
  }
  return $0_1 | 0;
 }
 
 function $1121($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1200($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134232372;
  return $0_1 | 0;
 }
 
 function $1122($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1219($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134232520;
  return $0_1 | 0;
 }
 
 function $1123($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1219($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134231864;
  HEAP32[($0_1 + 8 | 0) >> 2] = $634() | 0;
  return $0_1 | 0;
 }
 
 function $1124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1219($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134232668;
  return $0_1 | 0;
 }
 
 function $1125($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  HEAP16[($0_1 + 8 | 0) >> 1] = 11310;
  HEAP32[$0_1 >> 2] = 134231912;
  $598($0_1 + 12 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1126($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 46;
  HEAP32[($0_1 + 12 | 0) >> 2] = 44;
  HEAP32[$0_1 >> 2] = 134231952;
  $598($0_1 + 16 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1127($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134233448;
  return $0_1 | 0;
 }
 
 function $1128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134233692;
  return $0_1 | 0;
 }
 
 function $1129($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134233904;
  return $0_1 | 0;
 }
 
 function $1130($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134234136;
  return $0_1 | 0;
 }
 
 function $1131($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1412($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134235120;
  return $0_1 | 0;
 }
 
 function $1132($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1412($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134235268;
  return $0_1 | 0;
 }
 
 function $1133($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1412($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134235384;
  return $0_1 | 0;
 }
 
 function $1134($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1412($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134235500;
  return $0_1 | 0;
 }
 
 function $1135($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1413($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134235616;
  return $0_1 | 0;
 }
 
 function $1136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1414($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134235780;
  return $0_1 | 0;
 }
 
 function $1137($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1415($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134235944;
  return $0_1 | 0;
 }
 
 function $1138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1416($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134236108;
  return $0_1 | 0;
 }
 
 function $1139($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1_1 = $1417($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134234336;
  HEAP32[$1_1 >> 2] = 134234384;
  return $0_1 | 0;
 }
 
 function $1140($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1_1 = $1418($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134234600;
  HEAP32[$1_1 >> 2] = 134234648;
  return $0_1 | 0;
 }
 
 function $1141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1419($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134234836;
  return $0_1 | 0;
 }
 
 function $1142($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1419($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134234992;
  return $0_1 | 0;
 }
 
 function $1143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1420($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134236272;
  return $0_1 | 0;
 }
 
 function $1144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1049($0_1 | 0, $1_1 | 0) | 0;
  $1420($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134236392;
  return $0_1 | 0;
 }
 
 function $1145() {
  label$1 : {
   if ((HEAPU8[(0 + 134222236 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222236 | 0) | 0)) {
    break label$1
   }
   $1148() | 0;
   HEAP32[(0 + 134222232 | 0) >> 2] = 134222228;
   $1611(134222236 | 0);
  }
  return HEAP32[(0 + 134222232 | 0) >> 2] | 0 | 0;
 }
 
 function $1146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1147($0_1) {
  $0_1 = $0_1 | 0;
  $1149($0_1 + 4 | 0 | 0) | 0;
 }
 
 function $1148() {
  $1168();
  HEAP32[(0 + 134222228 | 0) >> 2] = 134223840;
  return 134222228 | 0;
 }
 
 function $1149($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[($1167($0_1 + 16 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1151($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1153($0_1 | 0, $2_1 + 12 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1152($0_1) {
  $0_1 = $0_1 | 0;
  $1157($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $1153($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1424($0_1 | 0, $1423($1_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1154($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = $1112($0_1 | 0) | 0;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1164($0_1 | 0, $1_1 - $2_1 | 0 | 0);
   return;
  }
  label$2 : {
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$2
   }
   $1165($0_1 | 0, (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0);
  }
 }
 
 function $1155($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (($1160($0_1 + 4 | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1);
   $1_1 = 1;
  }
  return $1_1 | 0;
 }
 
 function $1156($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1166($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1166($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1157($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1166($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1166($0_1 | 0) | 0) >> 2] = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1425($1_1 | 0);
  }
 }
 
 function $1158($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  HEAP32[$0_1 >> 2] = 134231792;
  $1_1 = $0_1 + 16 | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= ($1112($1_1 | 0) | 0) >>> 0) {
     break label$1
    }
    label$3 : {
     if (!(HEAP32[($1146($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
      break label$3
     }
     $1155(HEAP32[($1146($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
    }
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  $1584($0_1 + 176 | 0 | 0) | 0;
  $1159($1_1 | 0) | 0;
  $563($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1159($0_1) {
  $0_1 = $0_1 | 0;
  $1161($0_1 | 0);
  $1162($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1160($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1161($0_1) {
  $0_1 = $0_1 | 0;
  $1379($0_1 | 0, $1377($0_1 | 0) | 0 | 0, ($1377($0_1 | 0) | 0) + (($1378($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1377($0_1 | 0) | 0) + (($1112($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1377($0_1 | 0) | 0) + (($1378($0_1 | 0) | 0) << 2 | 0) | 0 | 0);
 }
 
 function $1162($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $1113($0_1 | 0);
   $1407($1360($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1386($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1163($0_1) {
  $0_1 = $0_1 | 0;
  $1567($1158($0_1 | 0) | 0 | 0);
 }
 
 function $1164($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ((((HEAP32[($1362($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $1111($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $3_1 = $1360($0_1 | 0) | 0;
   $3_1 = $1427($2_1 + 8 | 0 | 0, $1421($0_1 | 0, ($1112($0_1 | 0) | 0) + $1_1 | 0 | 0) | 0 | 0, $1112($0_1 | 0) | 0 | 0, $3_1 | 0) | 0;
   $1428($3_1 | 0, $1_1 | 0);
   $1429($0_1 | 0, $3_1 | 0);
   $1430($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1165($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1422($0_1 | 0, $1_1 | 0);
  $2_1 = $1112($0_1 | 0) | 0;
  $1408($0_1 | 0, $1_1 | 0);
  $1114($0_1 | 0, $2_1 | 0);
 }
 
 function $1166($0_1) {
  $0_1 = $0_1 | 0;
  return $1426($0_1 | 0) | 0 | 0;
 }
 
 function $1167($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1168() {
  $1048(134223840 | 0, 1 | 0) | 0;
 }
 
 function $1169() {
  $1170(134222240 | 0, $1145() | 0 | 0) | 0;
  return 134222240 | 0;
 }
 
 function $1170($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1147($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1171() {
  label$1 : {
   if ((HEAPU8[(0 + 134222248 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222248 | 0) | 0)) {
    break label$1
   }
   $1169() | 0;
   HEAP32[(0 + 134222244 | 0) >> 2] = 134222240;
   $1611(134222248 | 0);
  }
  return HEAP32[(0 + 134222244 | 0) >> 2] | 0 | 0;
 }
 
 function $1172($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1171() | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1147($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1173($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1183() | 0;
 }
 
 function $1174($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[$0_1 >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $1175($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($1178($0_1 | 0) | 0 | 0) == (-1 | 0)) {
    break label$1
   }
   $1181($2_1 | 0, $1180($2_1 + 8 | 0 | 0, $1179($1_1 | 0) | 0 | 0) | 0 | 0) | 0;
   $1560($0_1 | 0, $2_1 | 0, 89 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1176($0_1) {
  $0_1 = $0_1 | 0;
  $1567($563($0_1 | 0) | 0 | 0);
 }
 
 function $1177($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0]($0_1);
  }
 }
 
 function $1178($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1179($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1180($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1448($0_1 | 0, $1179($1_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1182($0_1) {
  $0_1 = $0_1 | 0;
  $1449($0_1 | 0);
 }
 
 function $1183() {
  var $0_1 = 0;
  $0_1 = (HEAP32[(0 + 134222252 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 134222252 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $1184($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1185($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $3_1 = ((HEAPU16[(($1186() | 0) + ($2_1 << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1186() {
  return HEAP32[($535() | 0) >> 2] | 0 | 0;
 }
 
 function $1187($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $4_1 = 0;
    label$3 : {
     if ((HEAP32[$1_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$3
     }
     $4_1 = HEAPU16[(($1186() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
    }
    HEAP16[$3_1 >> 1] = $4_1;
    $3_1 = $3_1 + 2 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1188($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$2_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$2
     }
     if (!((HEAPU16[(($1186() | 0) + ((HEAP32[$2_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0)) {
      break label$2
     }
     $3_1 = $2_1;
    }
    return $3_1 | 0;
   }
   $2_1 = $2_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $1189($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[$2_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$3
     }
     if (!((HEAPU16[(($1186() | 0) + ((HEAP32[$2_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + 4 | 0;
     continue label$2;
    }
    break label$2;
   };
   $3_1 = $2_1;
  }
  return $3_1 | 0;
 }
 
 function $1190($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($1191() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $1191() {
  return HEAP32[($536() | 0) >> 2] | 0 | 0;
 }
 
 function $1192($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($1191() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1193($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($1194() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $1194() {
  return HEAP32[($537() | 0) >> 2] | 0 | 0;
 }
 
 function $1195($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($1194() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1197($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP32[$3_1 >> 2] = HEAP8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1198($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 >>> 0 < 128 >>> 0 ? $1_1 : $2_1) << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1199($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP8[$4_1 >> 0] = $5_1 >>> 0 < 128 >>> 0 ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1200($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1201($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 134231812;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   if (!(HEAPU8[($0_1 + 12 | 0) >> 0] | 0)) {
    break label$1
   }
   $1568($1_1 | 0);
  }
  $563($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1202($0_1) {
  $0_1 = $0_1 | 0;
  $1567($1201($0_1 | 0) | 0 | 0);
 }
 
 function $1203($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($1191() | 0) + (($1_1 & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  return ($1_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1204($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($1191() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1205($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($1194() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return ($1_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1206($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($1194() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1207($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1208($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1209($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 | 0) > (-1 | 0) ? $1_1 : $2_1) | 0;
 }
 
 function $1210($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    HEAP8[$4_1 >> 0] = ($5_1 | 0) > (-1 | 0) ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1211($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1212($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $1213($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $1214($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1215($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1216($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1217($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1 - $2_1 | 0;
  $3_1 = HEAP32[($135($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1218($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1219($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1220($0_1) {
  $0_1 = $0_1 | 0;
  $1567($1047($0_1 | 0) | 0 | 0);
 }
 
 function $1221($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $11_1 = 0, $10_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAP32[$9_1 >> 2] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 4 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $10_1 = 1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          $11_1 = $1222($5_1 | 0, $4_1 | 0, ($9_1 - $2_1 | 0) >> 2 | 0 | 0, $6_1 - $5_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
          $12_1 = $11_1 + 1 | 0;
          if ($12_1 >>> 0 > 1 >>> 0) {
           break label$11
          }
          label$12 : {
           switch ($12_1 | 0) {
           case 1:
            break label$6;
           default:
            break label$12;
           };
          }
          HEAP32[$7_1 >> 2] = $5_1;
          label$13 : {
           label$14 : while (1) {
            if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
             break label$13
            }
            $9_1 = $1223($5_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
            if (($9_1 | 0) == (-1 | 0)) {
             break label$13
            }
            $5_1 = (HEAP32[$7_1 >> 2] | 0) + $9_1 | 0;
            HEAP32[$7_1 >> 2] = $5_1;
            $2_1 = $2_1 + 4 | 0;
            continue label$14;
           };
          }
          HEAP32[$4_1 >> 2] = $2_1;
          break label$10;
         }
         $5_1 = (HEAP32[$7_1 >> 2] | 0) + $11_1 | 0;
         HEAP32[$7_1 >> 2] = $5_1;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break label$8
         }
         label$15 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$15
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          $9_1 = $3_1;
          continue label$4;
         }
         $9_1 = $1223($8_1 + 4 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
         if (($9_1 | 0) != (-1 | 0)) {
          break label$9
         }
        }
        $10_1 = 2;
        break label$6;
       }
       $5_1 = $8_1 + 4 | 0;
       label$16 : {
        if ($9_1 >>> 0 <= ($6_1 - (HEAP32[$7_1 >> 2] | 0) | 0) >>> 0) {
         break label$16
        }
        $10_1 = 1;
        break label$6;
       }
       label$17 : {
        label$18 : while (1) {
         if (!$9_1) {
          break label$17
         }
         $2_1 = HEAPU8[$5_1 >> 0] | 0;
         $11_1 = HEAP32[$7_1 >> 2] | 0;
         HEAP32[$7_1 >> 2] = $11_1 + 1 | 0;
         HEAP8[$11_1 >> 0] = $2_1;
         $9_1 = $9_1 + -1 | 0;
         $5_1 = $5_1 + 1 | 0;
         continue label$18;
        };
       }
       $2_1 = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = $2_1;
       label$19 : while (1) {
        label$20 : {
         if (($9_1 | 0) != ($3_1 | 0)) {
          break label$20
         }
         $9_1 = $3_1;
         break label$5;
        }
        if (!(HEAP32[$9_1 >> 2] | 0)) {
         break label$5
        }
        $9_1 = $9_1 + 4 | 0;
        continue label$19;
       };
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $10_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $10_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $1222($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $642($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $0_1 = $539($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $643($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1223($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $642($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $506($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $643($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1224($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAPU8[$9_1 >> 0] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $10_1 = $1225($5_1 | 0, $4_1 | 0, $9_1 - $2_1 | 0 | 0, ($6_1 - $5_1 | 0) >> 2 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           if (($10_1 | 0) != (-1 | 0)) {
            break label$12
           }
           label$13 : {
            label$14 : while (1) {
             HEAP32[$7_1 >> 2] = $5_1;
             if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
              break label$13
             }
             label$15 : {
              $5_1 = $1226($5_1 | 0, $2_1 | 0, $9_1 - $2_1 | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
              $6_1 = $5_1 + 2 | 0;
              if ($6_1 >>> 0 > 2 >>> 0) {
               break label$15
              }
              $5_1 = 1;
              label$16 : {
               switch ($6_1 | 0) {
               case 2:
                break label$15;
               case 1:
                break label$16;
               default:
                break label$9;
               };
              }
              HEAP32[$4_1 >> 2] = $2_1;
              break label$11;
             }
             $2_1 = $2_1 + $5_1 | 0;
             $5_1 = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
             continue label$14;
            };
           }
           HEAP32[$4_1 >> 2] = $2_1;
           break label$7;
          }
          $5_1 = (HEAP32[$7_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
          HEAP32[$7_1 >> 2] = $5_1;
          if (($5_1 | 0) == ($6_1 | 0)) {
           break label$8
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          label$17 : {
           if (($9_1 | 0) != ($3_1 | 0)) {
            break label$17
           }
           $9_1 = $3_1;
           continue label$4;
          }
          if (!($1226($5_1 | 0, $2_1 | 0, 1 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
           break label$10
          }
         }
         $9_1 = 2;
         break label$6;
        }
        HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
        $2_1 = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
        HEAP32[$4_1 >> 2] = $2_1;
        $9_1 = $2_1;
        label$18 : while (1) {
         label$19 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$19
          }
          $9_1 = $3_1;
          break label$5;
         }
         if (!(HEAPU8[$9_1 >> 0] | 0)) {
          break label$5
         }
         $9_1 = $9_1 + 1 | 0;
         continue label$18;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = 1;
       break label$6;
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $9_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $9_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $1225($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $642($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $0_1 = $542($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $643($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1226($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $642($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $483($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $643($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1227($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $2_1 = 2;
  label$1 : {
   $1_1 = $1223($5_1 + 12 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   if (($1_1 + 1 | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $2_1 = 1;
   $1_1 = $1_1 + -1 | 0;
   if ($1_1 >>> 0 > ($3_1 - (HEAP32[$4_1 >> 2] | 0) | 0) >>> 0) {
    break label$1
   }
   $2_1 = $5_1 + 12 | 0;
   label$2 : while (1) {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     $2_1 = 0;
     break label$1;
    }
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    $1_1 = $1_1 + -1 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1228($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = -1;
  label$1 : {
   label$2 : {
    if ($1229(0 | 0, 0 | 0, 4 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
     break label$2
    }
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if ($0_1) {
     break label$1
    }
    $1_1 = 1;
   }
   return $1_1 | 0;
  }
  return ($1230($0_1 | 0) | 0 | 0) == (1 | 0) | 0;
 }
 
 function $1229($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $642($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $543($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $643($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1230($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $642($1_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
  $2_1 = $545() | 0;
  $643($0_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1231($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1232($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    if ($6_1 >>> 0 >= $4_1 >>> 0) {
     break label$1
    }
    label$3 : {
     $7_1 = $1233($2_1 | 0, $3_1 - $2_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     $8_1 = $7_1 + 2 | 0;
     if ($8_1 >>> 0 > 2 >>> 0) {
      break label$3
     }
     $7_1 = 1;
     switch ($8_1 | 0) {
     case 2:
      break label$3;
     default:
      break label$1;
     };
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $7_1 + $5_1 | 0;
    $2_1 = $2_1 + $7_1 | 0;
    continue label$2;
   };
  }
  return $5_1 | 0;
 }
 
 function $1233($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $642($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $547($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $643($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1234($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return $1230($0_1 | 0) | 0 | 0;
 }
 
 function $1235($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1236($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1237($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1237($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    $0_1 = 1;
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if ($7_1 >>> 0 < $1_1 >>> 0) {
       break label$5
      }
      $0_1 = 0;
      break label$1;
     }
     $0_1 = 2;
     $3_1 = HEAPU16[$7_1 >> 1] | 0;
     if ($3_1 >>> 0 > $6_1 >>> 0) {
      break label$1
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if ($3_1 >>> 0 > 127 >>> 0) {
         break label$8
        }
        $0_1 = 1;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (1 | 0)) {
         break label$1
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1;
        break label$7;
       }
       label$9 : {
        if ($3_1 >>> 0 > 2047 >>> 0) {
         break label$9
        }
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (2 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$10 : {
        if ($3_1 >>> 0 > 55295 >>> 0) {
         break label$10
        }
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (3 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$11 : {
        if ($3_1 >>> 0 > 56319 >>> 0) {
         break label$11
        }
        $0_1 = 1;
        if (($1_1 - $7_1 | 0 | 0) < (4 | 0)) {
         break label$1
        }
        $8_1 = HEAPU16[($7_1 + 2 | 0) >> 1] | 0;
        if (($8_1 & 64512 | 0 | 0) != (56320 | 0)) {
         break label$6
        }
        if (($4_1 - (HEAP32[$5_1 >> 2] | 0) | 0 | 0) < (4 | 0)) {
         break label$1
        }
        $0_1 = $3_1 & 960 | 0;
        if ((($0_1 << 10 | 0 | (($3_1 << 10 | 0) & 64512 | 0) | 0 | ($8_1 & 1023 | 0) | 0) + 65536 | 0) >>> 0 > $6_1 >>> 0) {
         break label$6
        }
        HEAP32[$2_1 >> 2] = $7_1 + 2 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        $0_1 = ($0_1 >>> 6 | 0) + 1 | 0;
        HEAP8[$7_1 >> 0] = $0_1 >>> 2 | 0 | 240 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($0_1 << 4 | 0) & 48 | 0 | (($3_1 >>> 2 | 0) & 15 | 0) | 0 | 128 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($8_1 >>> 6 | 0) & 15 | 0 | (($3_1 << 4 | 0) & 48 | 0) | 0 | 128 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
        HEAP8[$3_1 >> 0] = $8_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       if ($3_1 >>> 0 < 57344 >>> 0) {
        break label$1
       }
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (3 | 0)) {
        break label$3
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
      }
      $7_1 = (HEAP32[$2_1 >> 2] | 0) + 2 | 0;
      HEAP32[$2_1 >> 2] = $7_1;
      continue label$4;
     }
     break label$4;
    };
    return 2 | 0;
   }
   return 1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1238($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1239($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1239($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $7_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $7_1 + 3 | 0;
  }
  label$2 : {
   label$3 : while (1) {
    label$4 : {
     $3_1 = HEAP32[$2_1 >> 2] | 0;
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$4
     }
     $8_1 = 0;
     break label$2;
    }
    $8_1 = 1;
    $0_1 = HEAP32[$5_1 >> 2] | 0;
    if ($0_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$5 : {
     $7_1 = HEAPU8[$3_1 >> 0] | 0;
     if ($7_1 >>> 0 > $6_1 >>> 0) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if ((($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0)) {
        break label$7
       }
       HEAP16[$0_1 >> 1] = $7_1;
       $7_1 = $3_1 + 1 | 0;
       break label$6;
      }
      if ($7_1 >>> 0 < 194 >>> 0) {
       break label$5
      }
      label$8 : {
       if ($7_1 >>> 0 > 223 >>> 0) {
        break label$8
       }
       if (($1_1 - $3_1 | 0 | 0) < (2 | 0)) {
        break label$2
       }
       $9_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$5
       }
       $8_1 = 2;
       $7_1 = $9_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break label$2
       }
       HEAP16[$0_1 >> 1] = $7_1;
       $7_1 = $3_1 + 2 | 0;
       break label$6;
      }
      label$9 : {
       if ($7_1 >>> 0 > 239 >>> 0) {
        break label$9
       }
       if (($1_1 - $3_1 | 0 | 0) < (3 | 0)) {
        break label$2
       }
       $10_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
       $9_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
       label$10 : {
        label$11 : {
         label$12 : {
          if (($7_1 | 0) == (237 | 0)) {
           break label$12
          }
          if (($7_1 | 0) != (224 | 0)) {
           break label$11
          }
          if (($9_1 & 224 | 0 | 0) != (160 | 0)) {
           break label$5
          }
          break label$10;
         }
         if (($9_1 & 224 | 0 | 0) != (128 | 0)) {
          break label$5
         }
         break label$10;
        }
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$5
        }
       }
       if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$5
       }
       $8_1 = 2;
       $7_1 = ($9_1 & 63 | 0) << 6 | 0 | ($7_1 << 12 | 0) | 0 | ($10_1 & 63 | 0) | 0;
       if (($7_1 & 65535 | 0) >>> 0 > $6_1 >>> 0) {
        break label$2
       }
       HEAP16[$0_1 >> 1] = $7_1;
       $7_1 = $3_1 + 3 | 0;
       break label$6;
      }
      if ($7_1 >>> 0 > 244 >>> 0) {
       break label$5
      }
      if (($1_1 - $3_1 | 0 | 0) < (4 | 0)) {
       break label$2
      }
      $10_1 = HEAPU8[($3_1 + 3 | 0) >> 0] | 0;
      $9_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
      $3_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
      label$13 : {
       label$14 : {
        $11_1 = $7_1 + -240 | 0;
        if ($11_1 >>> 0 > 4 >>> 0) {
         break label$14
        }
        label$15 : {
         switch ($11_1 | 0) {
         default:
          if ((($3_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
           break label$5
          }
          break label$13;
         case 1:
         case 2:
         case 3:
          break label$14;
         case 4:
          break label$15;
         };
        }
        if (($3_1 & 240 | 0 | 0) != (128 | 0)) {
         break label$5
        }
        break label$13;
       }
       if (($3_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$5
       }
      }
      if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$5
      }
      if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$5
      }
      if (($4_1 - $0_1 | 0 | 0) < (4 | 0)) {
       break label$2
      }
      $8_1 = 2;
      $7_1 = $7_1 & 7 | 0;
      $11_1 = $9_1 << 6 | 0;
      $10_1 = $10_1 & 63 | 0;
      if ((($3_1 << 12 | 0) & 258048 | 0 | ($7_1 << 18 | 0) | 0 | ($11_1 & 4032 | 0) | 0 | $10_1 | 0) >>> 0 > $6_1 >>> 0) {
       break label$2
      }
      HEAP16[$0_1 >> 1] = ((($3_1 >>> 4 | 0) & 3 | 0 | ($7_1 << 2 | 0) | 0) << 6 | 0 | (($9_1 >>> 4 | 0) & 3 | 0 | (($3_1 << 2 | 0) & 60 | 0) | 0) | 0) + 16320 | 0 | 55296 | 0;
      HEAP32[$5_1 >> 2] = $0_1 + 2 | 0;
      HEAP16[($0_1 + 2 | 0) >> 1] = $11_1 & 960 | 0 | $10_1 | 0 | 56320 | 0;
      $7_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
     }
     HEAP32[$2_1 >> 2] = $7_1;
     HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 2 | 0;
     continue label$3;
    }
    break label$3;
   };
   return 2 | 0;
  }
  return $8_1 | 0;
 }
 
 function $1240($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1241($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1242($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1243($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1244($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1244($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? $0_1 + 3 | 0 : $0_1;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $4_1 = HEAPU8[$5_1 >> 0] | 0;
    if ($4_1 >>> 0 > $3_1 >>> 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if ((($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0)) {
       break label$5
      }
      $5_1 = $5_1 + 1 | 0;
      break label$4;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      if (($7_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $5_1 = $5_1 + 2 | 0;
      break label$4;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if ($4_1 >>> 0 > 239 >>> 0) {
         break label$9
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($4_1 | 0) == (237 | 0)) {
         break label$8
        }
        label$10 : {
         if (($4_1 | 0) != (224 | 0)) {
          break label$10
         }
         if (($7_1 & 224 | 0 | 0) == (160 | 0)) {
          break label$7
         }
         break label$2;
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        break label$7;
       }
       if ($4_1 >>> 0 > 244 >>> 0) {
        break label$2
       }
       if (($2_1 - $6_1 | 0) >>> 0 < 2 >>> 0) {
        break label$2
       }
       if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
       $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       label$11 : {
        label$12 : {
         $10_1 = $4_1 + -240 | 0;
         if ($10_1 >>> 0 > 4 >>> 0) {
          break label$12
         }
         label$13 : {
          switch ($10_1 | 0) {
          default:
           if ((($7_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
            break label$11
           }
           break label$2;
          case 1:
          case 2:
          case 3:
           break label$12;
          case 4:
           break label$13;
          };
         }
         if (($7_1 & 240 | 0 | 0) == (128 | 0)) {
          break label$11
         }
         break label$2;
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
       }
       if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if ((($7_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
       }
       $5_1 = $5_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       break label$4;
      }
      if (($7_1 & 224 | 0 | 0) != (128 | 0)) {
       break label$2
      }
     }
     if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     if ((($7_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
     $5_1 = $5_1 + 3 | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $1245($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1246($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1247($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1248($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1248($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    $7_1 = 1;
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : while (1) {
    label$4 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$4
     }
     $7_1 = 0;
     break label$1;
    }
    $7_1 = 2;
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ($3_1 >>> 0 > $6_1 >>> 0) {
     break label$1
    }
    if (($3_1 & -2048 | 0 | 0) == (55296 | 0)) {
     break label$1
    }
    label$5 : {
     label$6 : {
      label$7 : {
       if ($3_1 >>> 0 > 127 >>> 0) {
        break label$7
       }
       $7_1 = 1;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $0_1 | 0 | 0) < (1 | 0)) {
        break label$1
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1;
       break label$6;
      }
      label$8 : {
       if ($3_1 >>> 0 > 2047 >>> 0) {
        break label$8
       }
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (2 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      $0_1 = $4_1 - $7_1 | 0;
      label$9 : {
       if ($3_1 >>> 0 > 65535 >>> 0) {
        break label$9
       }
       if (($0_1 | 0) < (3 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      if (($0_1 | 0) < (4 | 0)) {
       break label$5
      }
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = $3_1 >>> 18 | 0 | 240 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = ($3_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
     }
     $3_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     continue label$3;
    }
    break label$3;
   };
   return 1 | 0;
  }
  return $7_1 | 0;
 }
 
 function $1249($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $1250($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $1250($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $8_1 = 0, $11_1 = 0, $9_1 = 0, $12_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $7_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $7_1 + 3 | 0;
  }
  label$2 : while (1) {
   label$3 : {
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if ($3_1 >>> 0 < $1_1 >>> 0) {
     break label$3
    }
    return 0 | 0;
   }
   $8_1 = 1;
   label$4 : {
    label$5 : {
     label$6 : {
      $9_1 = HEAP32[$5_1 >> 2] | 0;
      if ($9_1 >>> 0 >= $4_1 >>> 0) {
       break label$6
      }
      $0_1 = HEAP8[$3_1 >> 0] | 0;
      $7_1 = $0_1 & 255 | 0;
      label$7 : {
       if (($0_1 | 0) < (0 | 0)) {
        break label$7
       }
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break label$4
       }
       $0_1 = 1;
       break label$5;
      }
      if ($7_1 >>> 0 < 194 >>> 0) {
       break label$4
      }
      label$8 : {
       if ($7_1 >>> 0 > 223 >>> 0) {
        break label$8
       }
       if (($1_1 - $3_1 | 0 | 0) < (2 | 0)) {
        break label$6
       }
       $8_1 = 2;
       $10_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
       if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$6
       }
       $0_1 = 2;
       $8_1 = 2;
       $7_1 = $10_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
       if ($7_1 >>> 0 <= $6_1 >>> 0) {
        break label$5
       }
       break label$6;
      }
      label$9 : {
       label$10 : {
        if ($7_1 >>> 0 > 239 >>> 0) {
         break label$10
        }
        if (($1_1 - $3_1 | 0 | 0) < (3 | 0)) {
         break label$6
        }
        $11_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
        $10_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
        label$11 : {
         label$12 : {
          label$13 : {
           if (($7_1 | 0) == (237 | 0)) {
            break label$13
           }
           if (($7_1 | 0) != (224 | 0)) {
            break label$12
           }
           if (($10_1 & 224 | 0 | 0) == (160 | 0)) {
            break label$11
           }
           break label$4;
          }
          if (($10_1 & 224 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$4;
         }
         if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$4
         }
        }
        if (($11_1 & 192 | 0 | 0) == (128 | 0)) {
         break label$9
        }
        break label$4;
       }
       if ($7_1 >>> 0 > 244 >>> 0) {
        break label$4
       }
       if (($1_1 - $3_1 | 0 | 0) < (4 | 0)) {
        break label$6
       }
       $12_1 = HEAPU8[($3_1 + 3 | 0) >> 0] | 0;
       $11_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
       $10_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
       label$14 : {
        label$15 : {
         $0_1 = $7_1 + -240 | 0;
         if ($0_1 >>> 0 > 4 >>> 0) {
          break label$15
         }
         label$16 : {
          switch ($0_1 | 0) {
          default:
           if ((($10_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
            break label$4
           }
           break label$14;
          case 1:
          case 2:
          case 3:
           break label$15;
          case 4:
           break label$16;
          };
         }
         if (($10_1 & 240 | 0 | 0) != (128 | 0)) {
          break label$4
         }
         break label$14;
        }
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$4
        }
       }
       if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$4
       }
       if (($12_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$4
       }
       $0_1 = 4;
       $8_1 = 2;
       $7_1 = ($10_1 & 63 | 0) << 12 | 0 | (($7_1 << 18 | 0) & 1835008 | 0) | 0 | (($11_1 << 6 | 0) & 4032 | 0) | 0 | ($12_1 & 63 | 0) | 0;
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break label$6
       }
       break label$5;
      }
      $0_1 = 3;
      $8_1 = 2;
      $7_1 = ($10_1 & 63 | 0) << 6 | 0 | (($7_1 << 12 | 0) & 61440 | 0) | 0 | ($11_1 & 63 | 0) | 0;
      if ($7_1 >>> 0 <= $6_1 >>> 0) {
       break label$5
      }
     }
     return $8_1 | 0;
    }
    HEAP32[$9_1 >> 2] = $7_1;
    HEAP32[$2_1 >> 2] = $3_1 + $0_1 | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 4 | 0;
    continue label$2;
   }
   break label$2;
  };
  return 2 | 0;
 }
 
 function $1251($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1252($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1253($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1254($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1255($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1255($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, $10_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? $0_1 + 3 | 0 : $0_1;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $7_1 = HEAP8[$5_1 >> 0] | 0;
    $4_1 = $7_1 & 255 | 0;
    label$4 : {
     label$5 : {
      if (($7_1 | 0) < (0 | 0)) {
       break label$5
      }
      if ($4_1 >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $5_1 = $5_1 + 1 | 0;
      break label$4;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      if (($7_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $5_1 = $5_1 + 2 | 0;
      break label$4;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if ($4_1 >>> 0 > 239 >>> 0) {
         break label$9
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($4_1 | 0) == (237 | 0)) {
         break label$8
        }
        label$10 : {
         if (($4_1 | 0) != (224 | 0)) {
          break label$10
         }
         if (($7_1 & 224 | 0 | 0) == (160 | 0)) {
          break label$7
         }
         break label$2;
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        break label$7;
       }
       if ($4_1 >>> 0 > 244 >>> 0) {
        break label$2
       }
       if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
       $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       label$11 : {
        label$12 : {
         $10_1 = $4_1 + -240 | 0;
         if ($10_1 >>> 0 > 4 >>> 0) {
          break label$12
         }
         label$13 : {
          switch ($10_1 | 0) {
          default:
           if ((($7_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
            break label$11
           }
           break label$2;
          case 1:
          case 2:
          case 3:
           break label$12;
          case 4:
           break label$13;
          };
         }
         if (($7_1 & 240 | 0 | 0) == (128 | 0)) {
          break label$11
         }
         break label$2;
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
       }
       if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if ((($7_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
       }
       $5_1 = $5_1 + 4 | 0;
       break label$4;
      }
      if (($7_1 & 224 | 0 | 0) != (128 | 0)) {
       break label$2
      }
     }
     if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     if ((($7_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
     $5_1 = $5_1 + 3 | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $1256($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1257($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1258($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1259($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 134231912;
  $1584($0_1 + 12 | 0 | 0) | 0;
  $563($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1260($0_1) {
  $0_1 = $0_1 | 0;
  $1567($1259($0_1 | 0) | 0 | 0);
 }
 
 function $1261($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 134231952;
  $1584($0_1 + 16 | 0 | 0) | 0;
  $563($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1262($0_1) {
  $0_1 = $0_1 | 0;
  $1567($1261($0_1 | 0) | 0 | 0);
 }
 
 function $1263($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 8 | 0) >> 0] | 0 | 0;
 }
 
 function $1264($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1265($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 9 | 0) >> 0] | 0 | 0;
 }
 
 function $1266($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1267($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1577($0_1 | 0, $1_1 + 12 | 0 | 0) | 0;
 }
 
 function $1268($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1577($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
 }
 
 function $1269($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $381($0_1 | 0, 134231984 | 0) | 0;
 }
 
 function $1270($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1271($0_1 | 0, 134231992 | 0) | 0;
 }
 
 function $1271($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $575($0_1 | 0) | 0;
  $1597($0_1 | 0, $1_1 | 0, $1272($1_1 | 0) | 0 | 0);
  return $0_1 | 0;
 }
 
 function $1272($0_1) {
  $0_1 = $0_1 | 0;
  return $534($0_1 | 0) | 0 | 0;
 }
 
 function $1273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $381($0_1 | 0, 134232012 | 0) | 0;
 }
 
 function $1274($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1271($0_1 | 0, 134232020 | 0) | 0;
 }
 
 function $1275($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1595($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1480($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 4 | 0;
    continue label$2;
   };
  }
 }
 
 function $1277($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222324 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222324 | 0) | 0)) {
    break label$1
   }
   $1278();
   HEAP32[(0 + 134222320 | 0) >> 2] = 134222496;
   $1611(134222324 | 0);
  }
  return HEAP32[(0 + 134222320 | 0) >> 2] | 0 | 0;
 }
 
 function $1278() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222664 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222664 | 0) | 0)) {
    break label$1
   }
   $0_1 = 134222496;
   label$2 : while (1) {
    $0_1 = ($598($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (134222664 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $1611(134222664 | 0);
  }
  $1275(134222496 | 0, 134236472 | 0) | 0;
  $1275(134222508 | 0, 134236479 | 0) | 0;
  $1275(134222520 | 0, 134236486 | 0) | 0;
  $1275(134222532 | 0, 134236494 | 0) | 0;
  $1275(134222544 | 0, 134236504 | 0) | 0;
  $1275(134222556 | 0, 134236513 | 0) | 0;
  $1275(134222568 | 0, 134236520 | 0) | 0;
  $1275(134222580 | 0, 134236529 | 0) | 0;
  $1275(134222592 | 0, 134236533 | 0) | 0;
  $1275(134222604 | 0, 134236537 | 0) | 0;
  $1275(134222616 | 0, 134236541 | 0) | 0;
  $1275(134222628 | 0, 134236545 | 0) | 0;
  $1275(134222640 | 0, 134236549 | 0) | 0;
  $1275(134222652 | 0, 134236553 | 0) | 0;
 }
 
 function $1279($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 134222664;
  label$1 : while (1) {
   $1_1 = $1584($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (134222496 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1280($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222332 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222332 | 0) | 0)) {
    break label$1
   }
   $1281();
   HEAP32[(0 + 134222328 | 0) >> 2] = 134222672;
   $1611(134222332 | 0);
  }
  return HEAP32[(0 + 134222328 | 0) >> 2] | 0 | 0;
 }
 
 function $1281() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222840 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222840 | 0) | 0)) {
    break label$1
   }
   $0_1 = 134222672;
   label$2 : while (1) {
    $0_1 = ($849($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (134222840 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $1611(134222840 | 0);
  }
  $1283(134222672 | 0, 134236560 | 0) | 0;
  $1283(134222684 | 0, 134236588 | 0) | 0;
  $1283(134222696 | 0, 134236616 | 0) | 0;
  $1283(134222708 | 0, 134236648 | 0) | 0;
  $1283(134222720 | 0, 134236688 | 0) | 0;
  $1283(134222732 | 0, 134236724 | 0) | 0;
  $1283(134222744 | 0, 134236752 | 0) | 0;
  $1283(134222756 | 0, 134236788 | 0) | 0;
  $1283(134222768 | 0, 134236804 | 0) | 0;
  $1283(134222780 | 0, 134236820 | 0) | 0;
  $1283(134222792 | 0, 134236836 | 0) | 0;
  $1283(134222804 | 0, 134236852 | 0) | 0;
  $1283(134222816 | 0, 134236868 | 0) | 0;
  $1283(134222828 | 0, 134236884 | 0) | 0;
 }
 
 function $1282($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 134222840;
  label$1 : while (1) {
   $1_1 = $1598($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (134222672 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1606($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1284($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222340 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222340 | 0) | 0)) {
    break label$1
   }
   $1285();
   HEAP32[(0 + 134222336 | 0) >> 2] = 134222848;
   $1611(134222340 | 0);
  }
  return HEAP32[(0 + 134222336 | 0) >> 2] | 0 | 0;
 }
 
 function $1285() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 134223136 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134223136 | 0) | 0)) {
    break label$1
   }
   $0_1 = 134222848;
   label$2 : while (1) {
    $0_1 = ($598($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (134223136 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $1611(134223136 | 0);
  }
  $1275(134222848 | 0, 134236900 | 0) | 0;
  $1275(134222860 | 0, 134236908 | 0) | 0;
  $1275(134222872 | 0, 134236917 | 0) | 0;
  $1275(134222884 | 0, 134236923 | 0) | 0;
  $1275(134222896 | 0, 134236929 | 0) | 0;
  $1275(134222908 | 0, 134236933 | 0) | 0;
  $1275(134222920 | 0, 134236938 | 0) | 0;
  $1275(134222932 | 0, 134236943 | 0) | 0;
  $1275(134222944 | 0, 134236950 | 0) | 0;
  $1275(134222956 | 0, 134236960 | 0) | 0;
  $1275(134222968 | 0, 134236968 | 0) | 0;
  $1275(134222980 | 0, 134236977 | 0) | 0;
  $1275(134222992 | 0, 134236986 | 0) | 0;
  $1275(134223004 | 0, 134236990 | 0) | 0;
  $1275(134223016 | 0, 134236994 | 0) | 0;
  $1275(134223028 | 0, 134236998 | 0) | 0;
  $1275(134223040 | 0, 134236929 | 0) | 0;
  $1275(134223052 | 0, 134237002 | 0) | 0;
  $1275(134223064 | 0, 134237006 | 0) | 0;
  $1275(134223076 | 0, 134237010 | 0) | 0;
  $1275(134223088 | 0, 134237014 | 0) | 0;
  $1275(134223100 | 0, 134237018 | 0) | 0;
  $1275(134223112 | 0, 134237022 | 0) | 0;
  $1275(134223124 | 0, 134237026 | 0) | 0;
 }
 
 function $1286($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 134223136;
  label$1 : while (1) {
   $1_1 = $1584($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (134222848 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1287($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222348 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222348 | 0) | 0)) {
    break label$1
   }
   $1288();
   HEAP32[(0 + 134222344 | 0) >> 2] = 134223152;
   $1611(134222348 | 0);
  }
  return HEAP32[(0 + 134222344 | 0) >> 2] | 0 | 0;
 }
 
 function $1288() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 134223440 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134223440 | 0) | 0)) {
    break label$1
   }
   $0_1 = 134223152;
   label$2 : while (1) {
    $0_1 = ($849($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (134223440 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $1611(134223440 | 0);
  }
  $1283(134223152 | 0, 134237032 | 0) | 0;
  $1283(134223164 | 0, 134237064 | 0) | 0;
  $1283(134223176 | 0, 134237100 | 0) | 0;
  $1283(134223188 | 0, 134237124 | 0) | 0;
  $1283(134223200 | 0, 134237148 | 0) | 0;
  $1283(134223212 | 0, 134237164 | 0) | 0;
  $1283(134223224 | 0, 134237184 | 0) | 0;
  $1283(134223236 | 0, 134237204 | 0) | 0;
  $1283(134223248 | 0, 134237232 | 0) | 0;
  $1283(134223260 | 0, 134237272 | 0) | 0;
  $1283(134223272 | 0, 134237304 | 0) | 0;
  $1283(134223284 | 0, 134237340 | 0) | 0;
  $1283(134223296 | 0, 134237376 | 0) | 0;
  $1283(134223308 | 0, 134237392 | 0) | 0;
  $1283(134223320 | 0, 134237408 | 0) | 0;
  $1283(134223332 | 0, 134237424 | 0) | 0;
  $1283(134223344 | 0, 134237148 | 0) | 0;
  $1283(134223356 | 0, 134237440 | 0) | 0;
  $1283(134223368 | 0, 134237456 | 0) | 0;
  $1283(134223380 | 0, 134237472 | 0) | 0;
  $1283(134223392 | 0, 134237488 | 0) | 0;
  $1283(134223404 | 0, 134237504 | 0) | 0;
  $1283(134223416 | 0, 134237520 | 0) | 0;
  $1283(134223428 | 0, 134237536 | 0) | 0;
 }
 
 function $1289($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 134223440;
  label$1 : while (1) {
   $1_1 = $1598($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (134223152 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1290($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222356 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222356 | 0) | 0)) {
    break label$1
   }
   $1291();
   HEAP32[(0 + 134222352 | 0) >> 2] = 134223456;
   $1611(134222356 | 0);
  }
  return HEAP32[(0 + 134222352 | 0) >> 2] | 0 | 0;
 }
 
 function $1291() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 134223480 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134223480 | 0) | 0)) {
    break label$1
   }
   $0_1 = 134223456;
   label$2 : while (1) {
    $0_1 = ($598($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (134223480 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $1611(134223480 | 0);
  }
  $1275(134223456 | 0, 134237552 | 0) | 0;
  $1275(134223468 | 0, 134237555 | 0) | 0;
 }
 
 function $1292($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 134223480;
  label$1 : while (1) {
   $1_1 = $1584($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (134223456 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1293($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222364 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222364 | 0) | 0)) {
    break label$1
   }
   $1294();
   HEAP32[(0 + 134222360 | 0) >> 2] = 134223488;
   $1611(134222364 | 0);
  }
  return HEAP32[(0 + 134222360 | 0) >> 2] | 0 | 0;
 }
 
 function $1294() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 134223512 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134223512 | 0) | 0)) {
    break label$1
   }
   $0_1 = 134223488;
   label$2 : while (1) {
    $0_1 = ($849($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (134223512 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $1611(134223512 | 0);
  }
  $1283(134223488 | 0, 134237560 | 0) | 0;
  $1283(134223500 | 0, 134237572 | 0) | 0;
 }
 
 function $1295($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 134223512;
  label$1 : while (1) {
   $1_1 = $1598($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (134223488 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1296($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222380 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222380 | 0) | 0)) {
    break label$1
   }
   $381(134222368 | 0, 134232044 | 0) | 0;
   $1611(134222380 | 0);
  }
  return 134222368 | 0;
 }
 
 function $1297($0_1) {
  $0_1 = $0_1 | 0;
  $1584(134222368 | 0) | 0;
 }
 
 function $1298($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222396 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222396 | 0) | 0)) {
    break label$1
   }
   $1271(134222384 | 0, 134232056 | 0) | 0;
   $1611(134222396 | 0);
  }
  return 134222384 | 0;
 }
 
 function $1299($0_1) {
  $0_1 = $0_1 | 0;
  $1598(134222384 | 0) | 0;
 }
 
 function $1300($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222412 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222412 | 0) | 0)) {
    break label$1
   }
   $381(134222400 | 0, 134232092 | 0) | 0;
   $1611(134222412 | 0);
  }
  return 134222400 | 0;
 }
 
 function $1301($0_1) {
  $0_1 = $0_1 | 0;
  $1584(134222400 | 0) | 0;
 }
 
 function $1302($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222428 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222428 | 0) | 0)) {
    break label$1
   }
   $1271(134222416 | 0, 134232104 | 0) | 0;
   $1611(134222428 | 0);
  }
  return 134222416 | 0;
 }
 
 function $1303($0_1) {
  $0_1 = $0_1 | 0;
  $1598(134222416 | 0) | 0;
 }
 
 function $1304($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222444 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222444 | 0) | 0)) {
    break label$1
   }
   $381(134222432 | 0, 134232140 | 0) | 0;
   $1611(134222444 | 0);
  }
  return 134222432 | 0;
 }
 
 function $1305($0_1) {
  $0_1 = $0_1 | 0;
  $1584(134222432 | 0) | 0;
 }
 
 function $1306($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222460 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222460 | 0) | 0)) {
    break label$1
   }
   $1271(134222448 | 0, 134232164 | 0) | 0;
   $1611(134222460 | 0);
  }
  return 134222448 | 0;
 }
 
 function $1307($0_1) {
  $0_1 = $0_1 | 0;
  $1598(134222448 | 0) | 0;
 }
 
 function $1308($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222476 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222476 | 0) | 0)) {
    break label$1
   }
   $381(134222464 | 0, 134232248 | 0) | 0;
   $1611(134222476 | 0);
  }
  return 134222464 | 0;
 }
 
 function $1309($0_1) {
  $0_1 = $0_1 | 0;
  $1584(134222464 | 0) | 0;
 }
 
 function $1310($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 134222492 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1609(134222492 | 0) | 0)) {
    break label$1
   }
   $1271(134222480 | 0, 134232260 | 0) | 0;
   $1611(134222492 | 0);
  }
  return 134222480 | 0;
 }
 
 function $1311($0_1) {
  $0_1 = $0_1 | 0;
  $1598(134222480 | 0) | 0;
 }
 
 function $1312($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1491($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1313($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  label$1 : {
   if (!($784($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($1354($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $1314($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1315($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($784($0_1 | 0) | 0)) {
    break label$1
   }
   $955($0_1 | 0, $1_1 | 0);
   return;
  }
  $957($0_1 | 0, $1_1 | 0);
 }
 
 function $1316($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($634() | 0 | 0)) {
    break label$1
   }
   $533(HEAP32[$0_1 >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1317($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1318($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1319($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1320($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1321($0_1) {
  $0_1 = $0_1 | 0;
  $1322($0_1 + 8 | 0 | 0) | 0;
  $563($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1322($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1323($0_1) {
  $0_1 = $0_1 | 0;
  $1567($1321($0_1 | 0) | 0 | 0);
 }
 
 function $1324($0_1) {
  $0_1 = $0_1 | 0;
  $1325($0_1 + 8 | 0 | 0) | 0;
  $563($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1325($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1326($0_1) {
  $0_1 = $0_1 | 0;
  $1567($1324($0_1 | 0) | 0 | 0);
 }
 
 function $1327($0_1) {
  $0_1 = $0_1 | 0;
  $1567($1328($0_1 | 0) | 0 | 0);
 }
 
 function $1328($0_1) {
  $0_1 = $0_1 | 0;
  $1316($0_1 + 8 | 0 | 0) | 0;
  $563($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1329($0_1) {
  $0_1 = $0_1 | 0;
  $1567($1330($0_1 | 0) | 0 | 0);
 }
 
 function $1330($0_1) {
  $0_1 = $0_1 | 0;
  $1316($0_1 + 8 | 0 | 0) | 0;
  $563($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1331($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1332($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1333($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1334($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1335($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1336($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1337($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1338($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1339($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1340($0_1) {
  $0_1 = $0_1 | 0;
  $563($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1341($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1342($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1342($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $85($1_1 | 0, $2_1 | 0, 1 | 0);
 }
 
 function $1343($0_1) {
  $0_1 = $0_1 | 0;
  return $1344($0_1 | 0) | 0 | 0;
 }
 
 function $1344($0_1) {
  $0_1 = $0_1 | 0;
  return $1346($0_1 | 0) | 0 | 0;
 }
 
 function $1345($0_1) {
  $0_1 = $0_1 | 0;
  return $1347($0_1 | 0) | 0 | 0;
 }
 
 function $1346($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1347($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1348($0_1) {
  $0_1 = $0_1 | 0;
  return $1355($0_1 | 0) | 0 | 0;
 }
 
 function $1349($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1350($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1350($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $85($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1351($0_1) {
  $0_1 = $0_1 | 0;
  return $1352($0_1 | 0) | 0 | 0;
 }
 
 function $1352($0_1) {
  $0_1 = $0_1 | 0;
  return $1356($0_1 | 0) | 0 | 0;
 }
 
 function $1353($0_1) {
  $0_1 = $0_1 | 0;
  return $1357($0_1 | 0) | 0 | 0;
 }
 
 function $1354($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($1348($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $1355($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1356($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1357($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1358($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1369($0_1 | 0, $1368($1_1 | 0) | 0 | 0) | 0;
  $1370($0_1 + 16 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1359($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $1373($1372($0_1 | 0) | 0 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $134() | 0;
  $0_1 = HEAP32[($135($1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1360($0_1) {
  $0_1 = $0_1 | 0;
  return $1375($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1361($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1374($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1362($0_1) {
  $0_1 = $0_1 | 0;
  return $1376($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1363($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1379($0_1 | 0, $1377($0_1 | 0) | 0 | 0, ($1377($0_1 | 0) | 0) + (($1378($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1377($0_1 | 0) | 0) + (($1378($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1377($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0);
 }
 
 function $1364($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $1365($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1366($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1390($0_1 | 0, $1_1 | 0);
 }
 
 function $1367($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1368($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1369($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1368($1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1370($0_1) {
  $0_1 = $0_1 | 0;
  $1371($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1371($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 112 | 0) >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $1372($0_1) {
  $0_1 = $0_1 | 0;
  return $1381($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1373($0_1) {
  $0_1 = $0_1 | 0;
  return $1380($0_1 | 0) | 0 | 0;
 }
 
 function $1374($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 28 >>> 0) {
    break label$1
   }
   if ((HEAPU8[($0_1 + 112 | 0) >> 0] | 0) & 255 | 0) {
    break label$1
   }
   HEAP8[($0_1 + 112 | 0) >> 0] = 1;
   return $0_1 | 0;
  }
  return $150($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1375($0_1) {
  $0_1 = $0_1 | 0;
  return $1384($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1376($0_1) {
  $0_1 = $0_1 | 0;
  return $1385($0_1 | 0) | 0 | 0;
 }
 
 function $1377($0_1) {
  $0_1 = $0_1 | 0;
  return $1365(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1378($0_1) {
  $0_1 = $0_1 | 0;
  return $1386($0_1 | 0) | 0 | 0;
 }
 
 function $1379($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
 }
 
 function $1380($0_1) {
  $0_1 = $0_1 | 0;
  return $1382($0_1 | 0) | 0 | 0;
 }
 
 function $1381($0_1) {
  $0_1 = $0_1 | 0;
  return $1383($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1382($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1383($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1384($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1385($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1386($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1387($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1387($0_1) {
  $0_1 = $0_1 | 0;
  return $1388($0_1 + 16 | 0 | 0) | 0 | 0;
 }
 
 function $1388($0_1) {
  $0_1 = $0_1 | 0;
  return $1389($0_1 | 0) | 0 | 0;
 }
 
 function $1389($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1390($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$1_1 >> 2] = 0;
 }
 
 function $1391($0_1) {
  $0_1 = $0_1 | 0;
  return ($1393($1392($0_1 | 0) | 0 | 0) | 0) + -16 | 0 | 0;
 }
 
 function $1392($0_1) {
  $0_1 = $0_1 | 0;
  return $1403($0_1 | 0) | 0 | 0;
 }
 
 function $1393($0_1) {
  $0_1 = $0_1 | 0;
  return $1402($0_1 | 0) | 0 | 0;
 }
 
 function $1394($0_1) {
  $0_1 = $0_1 | 0;
  return $1406($0_1 | 0) | 0 | 0;
 }
 
 function $1395($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 10;
  label$1 : {
   if ($0_1 >>> 0 < 11 >>> 0) {
    break label$1
   }
   $0_1 = $1396($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1396($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 15 | 0) & -16 | 0 | 0;
 }
 
 function $1397($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1398($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1398($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (($1404($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $149(134237584 | 0);
   abort();
  }
  return $150($1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1399($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1345($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1400($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1345($0_1 | 0) | 0) + 8 | 0) >> 2] = $1_1 | -2147483648 | 0;
 }
 
 function $1401($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1402($0_1) {
  $0_1 = $0_1 | 0;
  return $1404($0_1 | 0) | 0 | 0;
 }
 
 function $1403($0_1) {
  $0_1 = $0_1 | 0;
  return $1405($0_1 | 0) | 0 | 0;
 }
 
 function $1404($0_1) {
  $0_1 = $0_1 | 0;
  return -1 | 0;
 }
 
 function $1405($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1406($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1407($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1409($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1408($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = $2_1 + -4 | 0;
    $1410($1360($0_1 | 0) | 0 | 0, $1365($2_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $1409($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$1
   }
   HEAP8[($0_1 + 112 | 0) >> 0] = 0;
   return;
  }
  $85($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1410($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1411($0_1 | 0, $1_1 | 0);
 }
 
 function $1411($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1412($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1413($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1414($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1415($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1416($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1417($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 134237660;
  return $0_1 | 0;
 }
 
 function $1418($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 134237696;
  return $0_1 | 0;
 }
 
 function $1419($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = $634() | 0;
  return $0_1 | 0;
 }
 
 function $1420($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   $3_1 = $1359($0_1 | 0) | 0;
   if ($3_1 >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    $0_1 = $1378($0_1 | 0) | 0;
    if ($0_1 >>> 0 >= ($3_1 >>> 1 | 0) >>> 0) {
     break label$2
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 << 1 | 0;
    $3_1 = HEAP32[($121($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
   }
   global$0 = $2_1 + 16 | 0;
   return $3_1 | 0;
  }
  $1608($0_1 | 0);
  abort();
 }
 
 function $1422($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1423($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1424($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1423($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1425($0_1) {
  $0_1 = $0_1 | 0;
  $1155($0_1 | 0) | 0;
 }
 
 function $1426($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1427($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $1431($0_1 + 12 | 0 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $5_1 = $1361($1432($0_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $5_1;
  $2_1 = $5_1 + ($2_1 << 2 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($1433($0_1 | 0) | 0) >> 2] = $5_1 + ($1_1 << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1428($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = $1432($0_1 | 0) | 0;
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$1 : while (1) {
   $1366($2_1 | 0, $1365($3_1 | 0) | 0 | 0);
   $3_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
   $1_1 = $1_1 + -1 | 0;
   if ($1_1) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $1429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1161($0_1 | 0);
  $2_1 = $1_1 + 4 | 0;
  $1434($1360($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0);
  $1435($0_1 | 0, $2_1 | 0);
  $1435($0_1 + 4 | 0 | 0, $1_1 + 8 | 0 | 0);
  $1435($1362($0_1 | 0) | 0 | 0, $1433($1_1 | 0) | 0 | 0);
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $1363($0_1 | 0, $1112($0_1 | 0) | 0 | 0);
  $1115($0_1 | 0);
 }
 
 function $1430($0_1) {
  $0_1 = $0_1 | 0;
  $1436($0_1 | 0);
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $1407($1432($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1437($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1431($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1369($0_1 | 0, $1368($1_1 | 0) | 0 | 0) | 0;
  $1439($0_1 + 4 | 0 | 0, $1438($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1432($0_1) {
  $0_1 = $0_1 | 0;
  return $1440($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1433($0_1) {
  $0_1 = $0_1 | 0;
  return $1441($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1434($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $2_1 = $2_1 - $1_1 | 0;
  $4_1 = (HEAP32[$3_1 >> 2] | 0) - $2_1 | 0;
  HEAP32[$3_1 >> 2] = $4_1;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $1679($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
 }
 
 function $1435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1443($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1443($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1443($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1436($0_1) {
  $0_1 = $0_1 | 0;
  $1444($0_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $1437($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1445($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1438($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1439($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1438($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1440($0_1) {
  $0_1 = $0_1 | 0;
  return $1442($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1441($0_1) {
  $0_1 = $0_1 | 0;
  return $1385($0_1 | 0) | 0 | 0;
 }
 
 function $1442($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1443($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1444($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1446($0_1 | 0, $1_1 | 0);
 }
 
 function $1445($0_1) {
  $0_1 = $0_1 | 0;
  return $1447($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1446($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = $1432($0_1 | 0) | 0;
    $3_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    $1410($2_1 | 0, $1365($3_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
 }
 
 function $1447($0_1) {
  $0_1 = $0_1 | 0;
  return $1389($0_1 | 0) | 0 | 0;
 }
 
 function $1448($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1450($0_1 | 0, $1179($1_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1449($0_1) {
  $0_1 = $0_1 | 0;
  $1451($0_1 | 0);
 }
 
 function $1450($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1179($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1451($0_1) {
  $0_1 = $0_1 | 0;
  $1454($1453($1452(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0) | 0 | 0);
 }
 
 function $1452($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1453($0_1) {
  $0_1 = $0_1 | 0;
  return $1456($0_1 | 0) | 0 | 0;
 }
 
 function $1454($0_1) {
  $0_1 = $0_1 | 0;
  $1455($1179($0_1 | 0) | 0 | 0);
 }
 
 function $1455($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $2_1 = (HEAP32[$0_1 >> 2] | 0) + ($1_1 >> 1 | 0) | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!($1_1 & 1 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $0_1 | 0) >> 2] | 0;
  }
  FUNCTION_TABLE[$0_1]($2_1);
 }
 
 function $1456($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1457($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1458($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1458($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1459($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1460($0_1) {
  $0_1 = $0_1 | 0;
  $1467($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1461($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1468($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1462($0_1) {
  $0_1 = $0_1 | 0;
  return ($1470($1469($0_1 | 0) | 0 | 0) | 0) + -16 | 0 | 0;
 }
 
 function $1463($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 1;
  label$1 : {
   if ($0_1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   $0_1 = $1472($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (2 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1464($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1473($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1465($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1353($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1466($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1353($0_1 | 0) | 0) + 8 | 0) >> 2] = $1_1 | -2147483648 | 0;
 }
 
 function $1467($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1468($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1469($0_1) {
  $0_1 = $0_1 | 0;
  return $1475($0_1 | 0) | 0 | 0;
 }
 
 function $1470($0_1) {
  $0_1 = $0_1 | 0;
  return $1474($0_1 | 0) | 0 | 0;
 }
 
 function $1471($0_1) {
  $0_1 = $0_1 | 0;
  return $1478($0_1 | 0) | 0 | 0;
 }
 
 function $1472($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 3 | 0) & -4 | 0 | 0;
 }
 
 function $1473($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (($1476($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $149(134237584 | 0);
   abort();
  }
  return $150($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1474($0_1) {
  $0_1 = $0_1 | 0;
  return $1476($0_1 | 0) | 0 | 0;
 }
 
 function $1475($0_1) {
  $0_1 = $0_1 | 0;
  return $1477($0_1 | 0) | 0 | 0;
 }
 
 function $1476($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1477($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1478($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1479($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1480($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $252($0_1 | 0, $1_1 | 0);
 }
 
 function $1481($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1485($0_1 | 0, $1484($1_1 | 0) | 0 | 0) | 0;
  $390($0_1 + 4 | 0 | 0, $389($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1482($0_1) {
  $0_1 = $0_1 | 0;
  return $1486($0_1 | 0) | 0 | 0;
 }
 
 function $1483($0_1) {
  $0_1 = $0_1 | 0;
  return $391($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1484($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1485($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1484($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1486($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1487($0_1) {
  $0_1 = $0_1 | 0;
  $887($0_1 | 0);
  label$1 : {
   if (!($217($0_1 | 0) | 0)) {
    break label$1
   }
   $1341($1343($0_1 | 0) | 0 | 0, $890($0_1 | 0) | 0 | 0, ($599($0_1 | 0) | 0) + 1 | 0 | 0);
   $1400($0_1 | 0, 0 | 0);
   $894($0_1 | 0, 0 | 0);
  }
 }
 
 function $1488($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1489($0_1 | 0, $1_1 | 0);
 }
 
 function $1489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1490($1343($1_1 | 0) | 0 | 0) | 0;
  $1343($0_1 | 0) | 0;
 }
 
 function $1490($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1491($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1492($0_1) {
  $0_1 = $0_1 | 0;
  $950($0_1 | 0);
  label$1 : {
   if (!($784($0_1 | 0) | 0)) {
    break label$1
   }
   $1349($1351($0_1 | 0) | 0 | 0, $953($0_1 | 0) | 0 | 0, ($1313($0_1 | 0) | 0) + 1 | 0 | 0);
   $1466($0_1 | 0, 0 | 0);
   $957($0_1 | 0, 0 | 0);
  }
 }
 
 function $1493($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1494($0_1 | 0, $1_1 | 0);
 }
 
 function $1494($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1495($1351($1_1 | 0) | 0 | 0) | 0;
  $1351($0_1 | 0) | 0;
 }
 
 function $1495($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1496($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1497($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1498($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1499($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1500() {
  return $1501() | 0 | 0;
 }
 
 function $1501() {
  return -2147483648 | 0;
 }
 
 function $1502() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1504() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1503() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1505() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1504() {
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0 | 0;
 }
 
 function $1505() {
  i64toi32_i32$HIGH_BITS = 2147483647;
  return -1 | 0;
 }
 
 function $1506() {
  return $1507() | 0 | 0;
 }
 
 function $1507() {
  return 65535 | 0;
 }
 
 function $1508() {
  return -1 | 0;
 }
 
 function $1509() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1510() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1510() {
  i64toi32_i32$HIGH_BITS = -1;
  return -1 | 0;
 }
 
 function $1511($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround($559($0_1 | 0, $1_1 | 0, $634() | 0 | 0)));
 }
 
 function $1512($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return +(+$560($0_1 | 0, $1_1 | 0, $634() | 0 | 0));
 }
 
 function $1513($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $4$hi = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $561($3_1 | 0, $1_1 | 0, $2_1 | 0, $634() | 0 | 0);
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1514($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1515($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1516($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1515($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1517($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1518($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1519($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1518($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1520($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1521($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $239($0_1 | 0, $1_1 | 0);
 }
 
 function $1522($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $241($0_1 | 0, $1_1 | 0);
 }
 
 function $1523($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1348($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1524($0_1) {
  $0_1 = $0_1 | 0;
  return $1525($1348($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1525($0_1) {
  $0_1 = $0_1 | 0;
  return $1526($0_1 | 0) | 0 | 0;
 }
 
 function $1526($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1527($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1528($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1532($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1529($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1_1 >>> 0 <= $0_1 >>> 0 & $0_1 >>> 0 < $2_1 >>> 0 | 0 | 0;
 }
 
 function $1530($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1533($0_1 | 0, $3_1 | 0) | 0;
  $1534($0_1 | 0, $1_1 | 0, $2_1 | 0);
  return $0_1 | 0;
 }
 
 function $1531($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($217($0_1 | 0) | 0)) {
    break label$1
   }
   $892($0_1 | 0, $1_1 | 0);
   return;
  }
  $894($0_1 | 0, $1_1 | 0);
 }
 
 function $1532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1533($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $214($0_1 | 0) | 0;
  $1536($0_1 | 0, $1535($1_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1534($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1528($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1391($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $894($0_1 | 0, $4_1 | 0);
     $5_1 = $893($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1395($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1397($1343($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1399($0_1 | 0, $5_1 | 0);
    $1400($0_1 | 0, $6_1 | 0);
    $892($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $891($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $891($5_1 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1576($0_1 | 0);
  abort();
 }
 
 function $1535($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1536($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1535($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1537($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1538($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1537($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1539($0_1) {
  $0_1 = $0_1 | 0;
  return $1541($0_1 | 0) | 0 | 0;
 }
 
 function $1540($0_1) {
  $0_1 = $0_1 | 0;
  return $391($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1541($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1542($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1543($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAPU8[$1_1 >> 0] | 0 | 0) == (HEAPU8[$2_1 >> 0] | 0 | 0) | 0;
 }
 
 function $1544($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1545($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1_1 >>> 0 <= $0_1 >>> 0 & $0_1 >>> 0 < $2_1 >>> 0 | 0 | 0;
 }
 
 function $1546($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1547($0_1 | 0, $3_1 | 0) | 0;
  $1548($0_1 | 0, $1_1 | 0, $2_1 | 0);
  return $0_1 | 0;
 }
 
 function $1547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1459($0_1 | 0) | 0;
  $1550($0_1 | 0, $1549($1_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1548($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1312($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1462($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $957($0_1 | 0, $4_1 | 0);
     $5_1 = $956($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1463($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1464($1351($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1465($0_1 | 0, $5_1 | 0);
    $1466($0_1 | 0, $6_1 | 0);
    $955($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $954($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $954($5_1 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1576($0_1 | 0);
  abort();
 }
 
 function $1549($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1550($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1549($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1551($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1552($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1553($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1553($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($920($0_1 | 0) | 0 | 0) == ($920($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1554($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1555($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1555($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($981($0_1 | 0) | 0 | 0) == ($981($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1556($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1557($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1558($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1559($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $1560($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $255(134224032 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    $1561(134224060 | 0, 134224032 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    break label$3
   }
   $1562($0_1 | 0);
   $256(134224032 | 0) | 0;
   FUNCTION_TABLE[$2_1]($1_1);
   $255(134224032 | 0) | 0;
   $1563($0_1 | 0);
   $256(134224032 | 0) | 0;
   $1564(134224060 | 0) | 0;
   return;
  }
  $256(134224032 | 0) | 0;
 }
 
 function $1561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return fimport$20($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1562($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 1;
 }
 
 function $1563($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = -1;
 }
 
 function $1564($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$19($0_1 | 0) | 0 | 0;
 }
 
 function $1565() {
  fimport$17();
  abort();
 }
 
 function $1566($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $1652($1_1 | 0) | 0;
    if ($2_1) {
     break label$1
    }
    $0_1 = $1615() | 0;
    if (!$0_1) {
     break label$1
    }
    FUNCTION_TABLE[$0_1]();
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $1567($0_1) {
  $0_1 = $0_1 | 0;
  $1653($0_1 | 0);
 }
 
 function $1568($0_1) {
  $0_1 = $0_1 | 0;
  $1567($0_1 | 0);
 }
 
 function $1569($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 134237824;
  return $0_1 | 0;
 }
 
 function $1570($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $238($1_1 | 0) | 0;
  $3_1 = $1566($2_1 + 13 | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1679($1571($3_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1571($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 12 | 0 | 0;
 }
 
 function $1572($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1569($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 134237868;
  $1570($0_1 + 4 | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1573($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1574($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP32[$3_1 >> 2] = $1_1;
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1575($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    if ((($0_1 - $1_1 | 0) >> 2 | 0) >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    label$3 : while (1) {
     $2_1 = $2_1 + -1 | 0;
     $3_1 = $2_1 << 2 | 0;
     HEAP32[($0_1 + $3_1 | 0) >> 2] = HEAP32[($1_1 + $3_1 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$4 : while (1) {
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$4
    }
    break label$4;
   };
  }
  return $0_1 | 0;
 }
 
 function $1576($0_1) {
  $0_1 = $0_1 | 0;
  $149(134237780 | 0);
  abort();
 }
 
 function $1577($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1578($1392($1_1 | 0) | 0 | 0);
  $3_1 = $1579($0_1 | 0, $2_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($217($1_1 | 0) | 0) {
     break label$2
    }
    $1_1 = $220($1_1 | 0) | 0;
    $3_1 = $1345($3_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   $1580($0_1 | 0, $213($218($1_1 | 0) | 0 | 0) | 0 | 0, $639($1_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1578($0_1) {
  $0_1 = $0_1 | 0;
  $1581($0_1 | 0);
 }
 
 function $1579($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $214($0_1 | 0) | 0;
  $1583($0_1 | 0, $1582($1_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1580($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1391($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $894($0_1 | 0, $2_1 | 0);
     $4_1 = $893($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1395($2_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1397($1343($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1399($0_1 | 0, $4_1 | 0);
    $1400($0_1 | 0, $5_1 | 0);
    $892($0_1 | 0, $2_1 | 0);
   }
   $278($1401($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $891($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1576($0_1 | 0);
  abort();
 }
 
 function $1581($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1582($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1583($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1582($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1584($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($217($0_1 | 0) | 0)) {
    break label$1
   }
   $1341($1343($0_1 | 0) | 0 | 0, $890($0_1 | 0) | 0 | 0, $637($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1585($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $599($0_1 | 0) | 0;
    if ($4_1 >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $4_1 = $1401($638($0_1 | 0) | 0 | 0) | 0;
    $1586($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $891($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    $1531($0_1 | 0, $2_1 | 0);
    $1497($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $5_1 = $589($0_1 | 0) | 0;
   $1587($0_1 | 0, $4_1 | 0, $2_1 - $4_1 | 0 | 0, $5_1 | 0, 0 | 0, $5_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1586($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1681($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1587($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $1391($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $638($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1395(HEAP32[($121($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $9_1 = $2_1 + 1 | 0;
   $2_1 = $1397($1343($0_1 | 0) | 0 | 0, $9_1 | 0) | 0;
   $889($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $278($1401($2_1 | 0) | 0 | 0, $1401($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    if (!$6_1) {
     break label$5
    }
    $278(($1401($2_1 | 0) | 0) + $4_1 | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   label$6 : {
    $3_1 = $3_1 - $5_1 | 0;
    $7_1 = $3_1 - $4_1 | 0;
    if (!$7_1) {
     break label$6
    }
    $278((($1401($2_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($1401($10_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $7_1 | 0) | 0;
   }
   label$7 : {
    $4_1 = $1_1 + 1 | 0;
    if (($4_1 | 0) == (11 | 0)) {
     break label$7
    }
    $1341($1343($0_1 | 0) | 0 | 0, $10_1 | 0, $4_1 | 0);
   }
   $1399($0_1 | 0, $2_1 | 0);
   $1400($0_1 | 0, $9_1 | 0);
   $4_1 = $3_1 + $6_1 | 0;
   $892($0_1 | 0, $4_1 | 0);
   HEAP8[($8_1 + 7 | 0) >> 0] = 0;
   $891($2_1 + $4_1 | 0 | 0, $8_1 + 7 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1576($0_1 | 0);
  abort();
 }
 
 function $1588($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = $589($0_1 | 0) | 0;
   if ($3_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1589($0_1 | 0, $1_1 - $3_1 | 0 | 0, $2_1 | 0) | 0;
   return;
  }
  $1590($0_1 | 0, $1_1 | 0);
 }
 
 function $1589($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $4_1 = $599($0_1 | 0) | 0;
   $5_1 = $589($0_1 | 0) | 0;
   $6_1 = $5_1 + $1_1 | 0;
   label$2 : {
    if (($4_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $1591($0_1 | 0, $4_1 | 0, $6_1 - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, 0 | 0);
   }
   $4_1 = $638($0_1 | 0) | 0;
   $1592(($1401($4_1 | 0) | 0) + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   $1531($0_1 | 0, $6_1 | 0);
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $891($4_1 + $6_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1590($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!($217($0_1 | 0) | 0)) {
     break label$2
    }
    $3_1 = $890($0_1 | 0) | 0;
    HEAP8[($2_1 + 15 | 0) >> 0] = 0;
    $891($3_1 + $1_1 | 0 | 0, $2_1 + 15 | 0 | 0);
    $892($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $3_1 = $893($0_1 | 0) | 0;
   HEAP8[($2_1 + 14 | 0) >> 0] = 0;
   $891($3_1 + $1_1 | 0 | 0, $2_1 + 14 | 0 | 0);
   $894($0_1 | 0, $1_1 | 0);
  }
  $1497($0_1 | 0, $1_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1591($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $1391($0_1 | 0) | 0;
   if (($8_1 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $9_1 = $638($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($8_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1395(HEAP32[($121($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $8_1 + -1 | 0;
   }
   $8_1 = $2_1 + 1 | 0;
   $2_1 = $1397($1343($0_1 | 0) | 0 | 0, $8_1 | 0) | 0;
   $889($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $278($1401($2_1 | 0) | 0 | 0, $1401($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    $3_1 = ($3_1 - $5_1 | 0) - $4_1 | 0;
    if (!$3_1) {
     break label$5
    }
    $278((($1401($2_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($1401($9_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $3_1 | 0) | 0;
   }
   label$6 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break label$6
    }
    $1341($1343($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1399($0_1 | 0, $2_1 | 0);
   $1400($0_1 | 0, $8_1 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1576($0_1 | 0);
  abort();
 }
 
 function $1592($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1680($0_1 | 0, $284($2_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1593($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $599($0_1 | 0) | 0;
    $5_1 = $589($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $4_1 = $1401($638($0_1 | 0) | 0 | 0) | 0;
    $278($4_1 + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1531($0_1 | 0, $2_1 | 0);
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $891($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    break label$1;
   }
   $1587($0_1 | 0, $4_1 | 0, ($5_1 + $2_1 | 0) - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1594($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    $3_1 = $217($0_1 | 0) | 0;
    if ($3_1) {
     break label$2
    }
    $1_1 = $640($0_1 | 0) | 0;
    $4_1 = 10;
    break label$1;
   }
   $4_1 = ($637($0_1 | 0) | 0) + -1 | 0;
   $1_1 = $639($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (($1_1 | 0) != ($4_1 | 0)) {
       break label$6
      }
      $1591($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
      if (!($217($0_1 | 0) | 0)) {
       break label$5
      }
      break label$4;
     }
     if ($3_1) {
      break label$4
     }
    }
    $4_1 = $893($0_1 | 0) | 0;
    $894($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$3;
   }
   $4_1 = $890($0_1 | 0) | 0;
   $892($0_1 | 0, $1_1 + 1 | 0 | 0);
  }
  $0_1 = $4_1 + $1_1 | 0;
  $891($0_1 | 0, $2_1 + 15 | 0 | 0);
  HEAP8[($2_1 + 14 | 0) >> 0] = 0;
  $891($0_1 + 1 | 0 | 0, $2_1 + 14 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1595($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1585($0_1 | 0, $1_1 | 0, $44($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1596($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1391($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $894($0_1 | 0, $1_1 | 0);
     $4_1 = $893($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1395($1_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1397($1343($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1399($0_1 | 0, $4_1 | 0);
    $1400($0_1 | 0, $5_1 | 0);
    $892($0_1 | 0, $1_1 | 0);
   }
   $1592($1401($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $891($4_1 + $1_1 | 0 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1576($0_1 | 0);
  abort();
 }
 
 function $1597($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1462($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $957($0_1 | 0, $2_1 | 0);
     $4_1 = $956($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1463($2_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1464($1351($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1465($0_1 | 0, $4_1 | 0);
    $1466($0_1 | 0, $5_1 | 0);
    $955($0_1 | 0, $2_1 | 0);
   }
   $298($1479($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $954($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1576($0_1 | 0);
  abort();
 }
 
 function $1598($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($784($0_1 | 0) | 0)) {
    break label$1
   }
   $1349($1351($0_1 | 0) | 0 | 0, $953($0_1 | 0) | 0 | 0, $1354($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1599($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $1313($0_1 | 0) | 0;
    if ($4_1 >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $4_1 = $1479($727($0_1 | 0) | 0 | 0) | 0;
    $1600($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $954($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    $1315($0_1 | 0, $2_1 | 0);
    $1314($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $5_1 = $651($0_1 | 0) | 0;
   $1601($0_1 | 0, $4_1 | 0, $2_1 - $4_1 | 0 | 0, $5_1 | 0, 0 | 0, $5_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1600($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0_1 = $1575($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1601($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $1462($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $727($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1463(HEAP32[($121($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $9_1 = $2_1 + 1 | 0;
   $2_1 = $1464($1351($0_1 | 0) | 0 | 0, $9_1 | 0) | 0;
   $952($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $298($1479($2_1 | 0) | 0 | 0, $1479($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    if (!$6_1) {
     break label$5
    }
    $298(($1479($2_1 | 0) | 0) + ($4_1 << 2 | 0) | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   label$6 : {
    $3_1 = $3_1 - $5_1 | 0;
    $7_1 = $3_1 - $4_1 | 0;
    if (!$7_1) {
     break label$6
    }
    $4_1 = $4_1 << 2 | 0;
    $298((($1479($2_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1479($10_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $7_1 | 0) | 0;
   }
   label$7 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$7
    }
    $1349($1351($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $1465($0_1 | 0, $2_1 | 0);
   $1466($0_1 | 0, $9_1 | 0);
   $1_1 = $3_1 + $6_1 | 0;
   $955($0_1 | 0, $1_1 | 0);
   HEAP32[($8_1 + 4 | 0) >> 2] = 0;
   $954($2_1 + ($1_1 << 2 | 0) | 0 | 0, $8_1 + 4 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1576($0_1 | 0);
  abort();
 }
 
 function $1602($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $1462($0_1 | 0) | 0;
   if (($8_1 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $9_1 = $727($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($8_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1463(HEAP32[($121($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $8_1 + -1 | 0;
   }
   $8_1 = $2_1 + 1 | 0;
   $2_1 = $1464($1351($0_1 | 0) | 0 | 0, $8_1 | 0) | 0;
   $952($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $298($1479($2_1 | 0) | 0 | 0, $1479($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    $3_1 = ($3_1 - $5_1 | 0) - $4_1 | 0;
    if (!$3_1) {
     break label$5
    }
    $4_1 = $4_1 << 2 | 0;
    $298((($1479($2_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1479($9_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $3_1 | 0) | 0;
   }
   label$6 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$6
    }
    $1349($1351($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1465($0_1 | 0, $2_1 | 0);
   $1466($0_1 | 0, $8_1 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1576($0_1 | 0);
  abort();
 }
 
 function $1603($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $0_1 = $1574($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1604($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $1313($0_1 | 0) | 0;
    $5_1 = $651($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $4_1 = $1479($727($0_1 | 0) | 0 | 0) | 0;
    $298($4_1 + ($5_1 << 2 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1315($0_1 | 0, $2_1 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $954($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    break label$1;
   }
   $1601($0_1 | 0, $4_1 | 0, ($5_1 + $2_1 | 0) - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1605($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    $3_1 = $784($0_1 | 0) | 0;
    if ($3_1) {
     break label$2
    }
    $1_1 = $786($0_1 | 0) | 0;
    $4_1 = 1;
    break label$1;
   }
   $4_1 = ($1354($0_1 | 0) | 0) + -1 | 0;
   $1_1 = $785($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (($1_1 | 0) != ($4_1 | 0)) {
       break label$6
      }
      $1602($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
      if (!($784($0_1 | 0) | 0)) {
       break label$5
      }
      break label$4;
     }
     if ($3_1) {
      break label$4
     }
    }
    $4_1 = $956($0_1 | 0) | 0;
    $957($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$3;
   }
   $4_1 = $953($0_1 | 0) | 0;
   $955($0_1 | 0, $1_1 + 1 | 0 | 0);
  }
  $0_1 = $4_1 + ($1_1 << 2 | 0) | 0;
  $954($0_1 | 0, $2_1 + 12 | 0 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  $954($0_1 + 4 | 0 | 0, $2_1 + 8 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1606($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1599($0_1 | 0, $1_1 | 0, $1272($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1607($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1462($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $957($0_1 | 0, $1_1 | 0);
     $4_1 = $956($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1463($1_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1464($1351($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1465($0_1 | 0, $4_1 | 0);
    $1466($0_1 | 0, $5_1 | 0);
    $955($0_1 | 0, $1_1 | 0);
   }
   $1603($1479($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $954($4_1 + ($1_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1576($0_1 | 0);
  abort();
 }
 
 function $1608($0_1) {
  $0_1 = $0_1 | 0;
  $149(134237793 | 0);
  abort();
 }
 
 function $1609($0_1) {
  $0_1 = $0_1 | 0;
  return ($1610($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1610($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[$0_1 >> 0] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1611($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  $1612($0_1 | 0);
 }
 
 function $1612($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 1 | 0;
 }
 
 function $1613($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1614($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1615() {
  return $1614(134224108 | 0) | 0 | 0;
 }
 
 function $1616($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1617($0_1) {
  $0_1 = $0_1 | 0;
  $1567($0_1 | 0);
 }
 
 function $1618($0_1) {
  $0_1 = $0_1 | 0;
  return 134237800 | 0;
 }
 
 function $1619($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 134237868;
  $1620($0_1 + 4 | 0 | 0) | 0;
  $1616($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1620($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!($1573($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = $1621(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($1622($1_1 + 8 | 0 | 0) | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   $1567($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1621($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + -12 | 0 | 0;
 }
 
 function $1622($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1623($0_1) {
  $0_1 = $0_1 | 0;
  $1567($1619($0_1 | 0) | 0 | 0);
 }
 
 function $1624($0_1) {
  $0_1 = $0_1 | 0;
  return $1625($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1625($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1626($0_1) {
  $0_1 = $0_1 | 0;
  $1619($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1627($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1628($0_1) {
  $0_1 = $0_1 | 0;
  $1627($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1629($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1630($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1631($0_1) {
  $0_1 = $0_1 | 0;
  $1628($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1632($0_1) {
  $0_1 = $0_1 | 0;
  $1628($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1633($0_1) {
  $0_1 = $0_1 | 0;
  $1628($0_1 | 0) | 0;
  $1567($0_1 | 0);
 }
 
 function $1634($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return ($0_1 | 0) == ($1_1 | 0) | 0;
  }
  return !($499($1613($0_1 | 0) | 0 | 0, $1613($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $1635($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if ($1634($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $4_1 = 0;
   $1_1 = $1636($1_1 | 0, 134238020 | 0, 134238068 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($3_1 + 20 | 0) >> 2] = -1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   $4_1 = 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   $1680($3_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
   if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   $4_1 = 1;
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $1636($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($5_1 + -8 | 0) >> 2] | 0;
  $5_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
  $1_1 = 0;
  $1680($4_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
  $0_1 = $0_1 + $6_1 | 0;
  label$1 : {
   label$2 : {
    if (!($1634($5_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($5_1, $4_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $1_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($5_1, $4_1 + 8 | 0, $0_1, 1, 0);
   $0_1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
   if ($0_1 >>> 0 > 1 >>> 0) {
    break label$1
   }
   label$3 : {
    switch ($0_1 | 0) {
    default:
     $1_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4_1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    };
   }
   label$5 : {
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($4_1 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $1_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 64 | 0;
  return $1_1 | 0;
 }
 
 function $1637($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $1638($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($1634($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1637($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $1639($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($1634($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1637($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $1640($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $5_1 = $4_1 >> 8 | 0;
   if (!($4_1 & 1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $5_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $1_1, $2_1 + $5_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
 }
 
 function $1641($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($1634($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1637($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $1640($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  label$2 : {
   if (($4_1 | 0) < (2 | 0)) {
    break label$2
   }
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   $0_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    $1640($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $1642($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = 1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
    if (($4_1 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   label$3 : {
    if (($3_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    label$4 : {
     $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     if (($3_1 | 0) != (2 | 0)) {
      break label$4
     }
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     $3_1 = $4_1;
    }
    if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $1643($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $1644($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!($1634($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1643($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($1634($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         if ($5_1 >>> 0 >= $3_1 >>> 0) {
          break label$9
         }
         HEAP16[($1_1 + 52 | 0) >> 1] = 0;
         $1645($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
         if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
          break label$9
         }
         label$11 : {
          if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
           break label$11
          }
          label$12 : {
           if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
            break label$12
           }
           $8_1 = 1;
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$8
           }
           $6_1 = 1;
           $7_1 = 1;
           $8_1 = 1;
           if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
            break label$11
           }
           break label$8;
          }
          $6_1 = 1;
          $8_1 = $7_1;
          if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
           break label$8
          }
         }
         $5_1 = $5_1 + 8 | 0;
         continue label$10;
        };
       }
       $5_1 = 4;
       $8_1 = $7_1;
       if (!($6_1 & 1 | 0)) {
        break label$7
       }
      }
      $5_1 = 3;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
     if ($8_1 & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $8_1 = $0_1 + 16 | 0;
   $1646($8_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   if (($5_1 | 0) < (2 | 0)) {
    break label$2
   }
   $8_1 = $8_1 + ($5_1 << 3 | 0) | 0;
   $5_1 = $0_1 + 24 | 0;
   label$13 : {
    label$14 : {
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($0_1 & 2 | 0) {
      break label$14
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$13
     }
    }
    label$15 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     $1646($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$15
     }
     break label$2;
    };
   }
   label$16 : {
    if ($0_1 & 1 | 0) {
     break label$16
    }
    label$17 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     $1646($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$17
     }
     break label$2;
    };
   }
   label$18 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$19 : {
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$19
     }
     if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
    }
    $1646($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    $5_1 = $5_1 + 8 | 0;
    if ($5_1 >>> 0 < $8_1 >>> 0) {
     continue label$18
    }
    break label$18;
   };
  }
 }
 
 function $1645($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = $6_1 >> 8 | 0;
  label$1 : {
   if (!($6_1 & 1 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[((HEAP32[$3_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $1646($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $5_1 >> 8 | 0;
  label$1 : {
   if (!($5_1 & 1 | 0)) {
    break label$1
   }
   $6_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
 }
 
 function $1647($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($1634($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1643($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($1634($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $1648($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($1634($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1643($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($1634($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$4
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $1649($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   if (!($1634($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1642($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $1645($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $11_1 | 0;
  label$2 : {
   if (($7_1 | 0) < (2 | 0)) {
    break label$2
   }
   $9_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   $7_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (!($11_1 & 255 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      break label$2;
     }
     if (!($10_1 & 255 | 0)) {
      break label$4
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $1645($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = $10_1 | $6_1 | 0;
    $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = $11_1 | $8_1 | 0;
    $7_1 = $7_1 + 8 | 0;
    if ($7_1 >>> 0 < $9_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = ($6_1 & 255 | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 52 | 0) >> 0] = ($8_1 & 255 | 0 | 0) != (0 | 0);
 }
 
 function $1650($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($1634($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1642($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $1651($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($1634($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1642($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $1652($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $11_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $1_1 = 0, $82_1 = 0, $95_1 = 0, $106_1 = 0, $114_1 = 0, $122_1 = 0, $216_1 = 0, $227_1 = 0, $235_1 = 0, $243_1 = 0, $278_1 = 0, $356_1 = 0, $363_1 = 0, $456_1 = 0, $467_1 = 0, $475_1 = 0, $483_1 = 0, $1194_1 = 0, $1201_1 = 0, $1323_1 = 0, $1325_1 = 0, $1395_1 = 0, $1402_1 = 0, $1646_1 = 0, $1653_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if ($0_1 >>> 0 > 244 >>> 0) {
               break label$12
              }
              label$13 : {
               $2_1 = HEAP32[(0 + 134224112 | 0) >> 2] | 0;
               $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
               $4_1 = $3_1 >>> 3 | 0;
               $0_1 = $2_1 >>> $4_1 | 0;
               if (!($0_1 & 3 | 0)) {
                break label$13
               }
               $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
               $5_1 = $3_1 << 3 | 0;
               $4_1 = HEAP32[($5_1 + 134224160 | 0) >> 2] | 0;
               $0_1 = $4_1 + 8 | 0;
               label$14 : {
                label$15 : {
                 $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $5_1 = $5_1 + 134224152 | 0;
                 if (($6_1 | 0) != ($5_1 | 0)) {
                  break label$15
                 }
                 HEAP32[(0 + 134224112 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
                 break label$14;
                }
                HEAP32[(0 + 134224128 | 0) >> 2] | 0;
                HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
               }
               $6_1 = $3_1 << 3 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
               $4_1 = $4_1 + $6_1 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$1;
              }
              $7_1 = HEAP32[(0 + 134224120 | 0) >> 2] | 0;
              if ($3_1 >>> 0 <= $7_1 >>> 0) {
               break label$11
              }
              label$16 : {
               if (!$0_1) {
                break label$16
               }
               label$17 : {
                label$18 : {
                 $82_1 = $0_1 << $4_1 | 0;
                 $0_1 = 2 << $4_1 | 0;
                 $0_1 = $82_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $95_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $4_1 = $95_1 >>> $0_1 | 0;
                 $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                 $106_1 = $6_1 | $0_1 | 0;
                 $0_1 = $4_1 >>> $6_1 | 0;
                 $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $114_1 = $106_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $122_1 = $114_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $6_1 = ($122_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                 $5_1 = $6_1 << 3 | 0;
                 $4_1 = HEAP32[($5_1 + 134224160 | 0) >> 2] | 0;
                 $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $5_1 = $5_1 + 134224152 | 0;
                 if (($0_1 | 0) != ($5_1 | 0)) {
                  break label$18
                 }
                 $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
                 HEAP32[(0 + 134224112 | 0) >> 2] = $2_1;
                 break label$17;
                }
                HEAP32[(0 + 134224128 | 0) >> 2] | 0;
                HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
               }
               $0_1 = $4_1 + 8 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               $5_1 = $4_1 + $3_1 | 0;
               $8_1 = $6_1 << 3 | 0;
               $6_1 = $8_1 - $3_1 | 0;
               HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
               HEAP32[($4_1 + $8_1 | 0) >> 2] = $6_1;
               label$19 : {
                if (!$7_1) {
                 break label$19
                }
                $8_1 = $7_1 >>> 3 | 0;
                $3_1 = ($8_1 << 3 | 0) + 134224152 | 0;
                $4_1 = HEAP32[(0 + 134224132 | 0) >> 2] | 0;
                label$20 : {
                 label$21 : {
                  $8_1 = 1 << $8_1 | 0;
                  if ($2_1 & $8_1 | 0) {
                   break label$21
                  }
                  HEAP32[(0 + 134224112 | 0) >> 2] = $2_1 | $8_1 | 0;
                  $8_1 = $3_1;
                  break label$20;
                 }
                 $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
               }
               HEAP32[(0 + 134224132 | 0) >> 2] = $5_1;
               HEAP32[(0 + 134224120 | 0) >> 2] = $6_1;
               break label$1;
              }
              $9_1 = HEAP32[(0 + 134224116 | 0) >> 2] | 0;
              if (!$9_1) {
               break label$11
              }
              $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
              $216_1 = $0_1;
              $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
              $4_1 = $216_1 >>> $0_1 | 0;
              $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
              $227_1 = $6_1 | $0_1 | 0;
              $0_1 = $4_1 >>> $6_1 | 0;
              $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
              $235_1 = $227_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
              $243_1 = $235_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
              $5_1 = HEAP32[(((($243_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 134224416 | 0) >> 2] | 0;
              $4_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $6_1 = $5_1;
              label$22 : {
               label$23 : while (1) {
                label$24 : {
                 $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                 if ($0_1) {
                  break label$24
                 }
                 $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                 if (!$0_1) {
                  break label$22
                 }
                }
                $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $278_1 = $6_1;
                $6_1 = $6_1 >>> 0 < $4_1 >>> 0;
                $4_1 = $6_1 ? $278_1 : $4_1;
                $5_1 = $6_1 ? $0_1 : $5_1;
                $6_1 = $0_1;
                continue label$23;
               };
              }
              $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
              label$25 : {
               $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($8_1 | 0) == ($5_1 | 0)) {
                break label$25
               }
               label$26 : {
                $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ((HEAP32[(0 + 134224128 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                 break label$26
                }
                HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
               HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
               break label$2;
              }
              label$27 : {
               $6_1 = $5_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                break label$27
               }
               $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$10
               }
               $6_1 = $5_1 + 16 | 0;
              }
              label$28 : while (1) {
               $11_1 = $6_1;
               $8_1 = $0_1;
               $6_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                continue label$28
               }
               $6_1 = $8_1 + 16 | 0;
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$28
               }
               break label$28;
              };
              HEAP32[$11_1 >> 2] = 0;
              break label$2;
             }
             $3_1 = -1;
             if ($0_1 >>> 0 > -65 >>> 0) {
              break label$11
             }
             $0_1 = $0_1 + 11 | 0;
             $3_1 = $0_1 & -8 | 0;
             $7_1 = HEAP32[(0 + 134224116 | 0) >> 2] | 0;
             if (!$7_1) {
              break label$11
             }
             $11_1 = 0;
             label$29 : {
              $0_1 = $0_1 >>> 8 | 0;
              if (!$0_1) {
               break label$29
              }
              $11_1 = 31;
              if ($3_1 >>> 0 > 16777215 >>> 0) {
               break label$29
              }
              $4_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $0_1 = $0_1 << $4_1 | 0;
              $356_1 = $0_1;
              $0_1 = (($0_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $6_1 = $356_1 << $0_1 | 0;
              $363_1 = $6_1;
              $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0_1 = (($363_1 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
              $11_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $6_1 = 0 - $3_1 | 0;
             label$30 : {
              label$31 : {
               label$32 : {
                label$33 : {
                 $4_1 = HEAP32[(($11_1 << 2 | 0) + 134224416 | 0) >> 2] | 0;
                 if ($4_1) {
                  break label$33
                 }
                 $0_1 = 0;
                 $8_1 = 0;
                 break label$32;
                }
                $5_1 = $3_1 << (($11_1 | 0) == (31 | 0) ? 0 : 25 - ($11_1 >>> 1 | 0) | 0) | 0;
                $0_1 = 0;
                $8_1 = 0;
                label$34 : while (1) {
                 label$35 : {
                  $2_1 = ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                  if ($2_1 >>> 0 >= $6_1 >>> 0) {
                   break label$35
                  }
                  $6_1 = $2_1;
                  $8_1 = $4_1;
                  if ($6_1) {
                   break label$35
                  }
                  $6_1 = 0;
                  $8_1 = $4_1;
                  $0_1 = $4_1;
                  break label$31;
                 }
                 $2_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
                 $4_1 = HEAP32[(($4_1 + (($5_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0_1 = $2_1 ? (($2_1 | 0) == ($4_1 | 0) ? $0_1 : $2_1) : $0_1;
                 $5_1 = $5_1 << (($4_1 | 0) != (0 | 0)) | 0;
                 if ($4_1) {
                  continue label$34
                 }
                 break label$34;
                };
               }
               label$36 : {
                if ($0_1 | $8_1 | 0) {
                 break label$36
                }
                $0_1 = 2 << $11_1 | 0;
                $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                if (!$0_1) {
                 break label$11
                }
                $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                $456_1 = $0_1;
                $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                $4_1 = $456_1 >>> $0_1 | 0;
                $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                $467_1 = $5_1 | $0_1 | 0;
                $0_1 = $4_1 >>> $5_1 | 0;
                $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                $475_1 = $467_1 | $4_1 | 0;
                $0_1 = $0_1 >>> $4_1 | 0;
                $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                $483_1 = $475_1 | $4_1 | 0;
                $0_1 = $0_1 >>> $4_1 | 0;
                $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                $0_1 = HEAP32[(((($483_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 134224416 | 0) >> 2] | 0;
               }
               if (!$0_1) {
                break label$30
               }
              }
              label$37 : while (1) {
               $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $5_1 = $2_1 >>> 0 < $6_1 >>> 0;
               label$38 : {
                $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if ($4_1) {
                 break label$38
                }
                $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               }
               $6_1 = $5_1 ? $2_1 : $6_1;
               $8_1 = $5_1 ? $0_1 : $8_1;
               $0_1 = $4_1;
               if ($0_1) {
                continue label$37
               }
               break label$37;
              };
             }
             if (!$8_1) {
              break label$11
             }
             if ($6_1 >>> 0 >= ((HEAP32[(0 + 134224120 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
              break label$11
             }
             $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
             label$39 : {
              $5_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
              if (($5_1 | 0) == ($8_1 | 0)) {
               break label$39
              }
              label$40 : {
               $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
               if ((HEAP32[(0 + 134224128 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                break label$40
               }
               HEAP32[($0_1 + 12 | 0) >> 2] | 0;
              }
              HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
              HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
              break label$3;
             }
             label$41 : {
              $4_1 = $8_1 + 20 | 0;
              $0_1 = HEAP32[$4_1 >> 2] | 0;
              if ($0_1) {
               break label$41
              }
              $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$9
              }
              $4_1 = $8_1 + 16 | 0;
             }
             label$42 : while (1) {
              $2_1 = $4_1;
              $5_1 = $0_1;
              $4_1 = $0_1 + 20 | 0;
              $0_1 = HEAP32[$4_1 >> 2] | 0;
              if ($0_1) {
               continue label$42
              }
              $4_1 = $5_1 + 16 | 0;
              $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if ($0_1) {
               continue label$42
              }
              break label$42;
             };
             HEAP32[$2_1 >> 2] = 0;
             break label$3;
            }
            label$43 : {
             $0_1 = HEAP32[(0 + 134224120 | 0) >> 2] | 0;
             if ($0_1 >>> 0 < $3_1 >>> 0) {
              break label$43
             }
             $4_1 = HEAP32[(0 + 134224132 | 0) >> 2] | 0;
             label$44 : {
              label$45 : {
               $6_1 = $0_1 - $3_1 | 0;
               if ($6_1 >>> 0 < 16 >>> 0) {
                break label$45
               }
               HEAP32[(0 + 134224120 | 0) >> 2] = $6_1;
               $5_1 = $4_1 + $3_1 | 0;
               HEAP32[(0 + 134224132 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
               HEAP32[($4_1 + $0_1 | 0) >> 2] = $6_1;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               break label$44;
              }
              HEAP32[(0 + 134224132 | 0) >> 2] = 0;
              HEAP32[(0 + 134224120 | 0) >> 2] = 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
              $0_1 = $4_1 + $0_1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             }
             $0_1 = $4_1 + 8 | 0;
             break label$1;
            }
            label$46 : {
             $5_1 = HEAP32[(0 + 134224124 | 0) >> 2] | 0;
             if ($5_1 >>> 0 <= $3_1 >>> 0) {
              break label$46
             }
             $4_1 = $5_1 - $3_1 | 0;
             HEAP32[(0 + 134224124 | 0) >> 2] = $4_1;
             $0_1 = HEAP32[(0 + 134224136 | 0) >> 2] | 0;
             $6_1 = $0_1 + $3_1 | 0;
             HEAP32[(0 + 134224136 | 0) >> 2] = $6_1;
             HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
             $0_1 = $0_1 + 8 | 0;
             break label$1;
            }
            label$47 : {
             label$48 : {
              if (!(HEAP32[(0 + 134224584 | 0) >> 2] | 0)) {
               break label$48
              }
              $4_1 = HEAP32[(0 + 134224592 | 0) >> 2] | 0;
              break label$47;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 134224596 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 134224600 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 4096;
             HEAP32[(i64toi32_i32$1 + 134224588 | 0) >> 2] = 4096;
             HEAP32[(i64toi32_i32$1 + 134224592 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 134224584 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 134224604 | 0) >> 2] = 0;
             HEAP32[(0 + 134224556 | 0) >> 2] = 0;
             $4_1 = 4096;
            }
            $0_1 = 0;
            $7_1 = $3_1 + 47 | 0;
            $2_1 = $4_1 + $7_1 | 0;
            $11_1 = 0 - $4_1 | 0;
            $8_1 = $2_1 & $11_1 | 0;
            if ($8_1 >>> 0 <= $3_1 >>> 0) {
             break label$1
            }
            $0_1 = 0;
            label$49 : {
             $4_1 = HEAP32[(0 + 134224552 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$49
             }
             $6_1 = HEAP32[(0 + 134224544 | 0) >> 2] | 0;
             $9_1 = $6_1 + $8_1 | 0;
             if ($9_1 >>> 0 <= $6_1 >>> 0) {
              break label$1
             }
             if ($9_1 >>> 0 > $4_1 >>> 0) {
              break label$1
             }
            }
            if ((HEAPU8[(0 + 134224556 | 0) >> 0] | 0) & 4 | 0) {
             break label$6
            }
            label$50 : {
             label$51 : {
              label$52 : {
               $4_1 = HEAP32[(0 + 134224136 | 0) >> 2] | 0;
               if (!$4_1) {
                break label$52
               }
               $0_1 = 134224560;
               label$53 : while (1) {
                label$54 : {
                 $6_1 = HEAP32[$0_1 >> 2] | 0;
                 if ($6_1 >>> 0 > $4_1 >>> 0) {
                  break label$54
                 }
                 if (($6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                  break label$51
                 }
                }
                $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$53
                }
                break label$53;
               };
              }
              $5_1 = fimport$21(0 | 0) | 0;
              if (($5_1 | 0) == (-1 | 0)) {
               break label$7
              }
              $2_1 = $8_1;
              label$55 : {
               $0_1 = HEAP32[(0 + 134224588 | 0) >> 2] | 0;
               $4_1 = $0_1 + -1 | 0;
               if (!($4_1 & $5_1 | 0)) {
                break label$55
               }
               $2_1 = ($8_1 - $5_1 | 0) + (($4_1 + $5_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
              }
              if ($2_1 >>> 0 <= $3_1 >>> 0) {
               break label$7
              }
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              label$56 : {
               $0_1 = HEAP32[(0 + 134224552 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$56
               }
               $4_1 = HEAP32[(0 + 134224544 | 0) >> 2] | 0;
               $6_1 = $4_1 + $2_1 | 0;
               if ($6_1 >>> 0 <= $4_1 >>> 0) {
                break label$7
               }
               if ($6_1 >>> 0 > $0_1 >>> 0) {
                break label$7
               }
              }
              $0_1 = fimport$21($2_1 | 0) | 0;
              if (($0_1 | 0) != ($5_1 | 0)) {
               break label$50
              }
              break label$5;
             }
             $2_1 = ($2_1 - $5_1 | 0) & $11_1 | 0;
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$7
             }
             $5_1 = fimport$21($2_1 | 0) | 0;
             if (($5_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$8
             }
             $0_1 = $5_1;
            }
            $5_1 = $0_1;
            label$57 : {
             if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
              break label$57
             }
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$57
             }
             if (($5_1 | 0) == (-1 | 0)) {
              break label$57
             }
             $0_1 = HEAP32[(0 + 134224592 | 0) >> 2] | 0;
             $0_1 = (($7_1 - $2_1 | 0) + $0_1 | 0) & (0 - $0_1 | 0) | 0;
             if ($0_1 >>> 0 > 2147483646 >>> 0) {
              break label$5
             }
             label$58 : {
              if ((fimport$21($0_1 | 0) | 0 | 0) == (-1 | 0)) {
               break label$58
              }
              $2_1 = $0_1 + $2_1 | 0;
              break label$5;
             }
             fimport$21(0 - $2_1 | 0 | 0) | 0;
             break label$7;
            }
            if (($5_1 | 0) != (-1 | 0)) {
             break label$5
            }
            break label$7;
           }
           $8_1 = 0;
           break label$2;
          }
          $5_1 = 0;
          break label$3;
         }
         if (($5_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 134224556 | 0) >> 2] = HEAP32[(0 + 134224556 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $5_1 = fimport$21($8_1 | 0) | 0;
       $0_1 = fimport$21(0 | 0) | 0;
       if ($5_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       if (($5_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       $2_1 = $0_1 - $5_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 134224544 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 134224544 | 0) >> 2] = $0_1;
      label$59 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 134224548 | 0) >> 2] | 0) >>> 0) {
        break label$59
       }
       HEAP32[(0 + 134224548 | 0) >> 2] = $0_1;
      }
      label$60 : {
       label$61 : {
        label$62 : {
         label$63 : {
          $4_1 = HEAP32[(0 + 134224136 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$63
          }
          $0_1 = 134224560;
          label$64 : while (1) {
           $6_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == ($6_1 + $8_1 | 0 | 0)) {
            break label$62
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$64
           }
           break label$61;
          };
         }
         label$65 : {
          label$66 : {
           $0_1 = HEAP32[(0 + 134224128 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$66
           }
           if ($5_1 >>> 0 >= $0_1 >>> 0) {
            break label$65
           }
          }
          HEAP32[(0 + 134224128 | 0) >> 2] = $5_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 134224564 | 0) >> 2] = $2_1;
         HEAP32[(0 + 134224560 | 0) >> 2] = $5_1;
         HEAP32[(0 + 134224144 | 0) >> 2] = -1;
         HEAP32[(0 + 134224148 | 0) >> 2] = HEAP32[(0 + 134224584 | 0) >> 2] | 0;
         HEAP32[(0 + 134224572 | 0) >> 2] = 0;
         label$67 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $6_1 = $4_1 + 134224152 | 0;
          HEAP32[($4_1 + 134224160 | 0) >> 2] = $6_1;
          HEAP32[($4_1 + 134224164 | 0) >> 2] = $6_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$67
          }
          break label$67;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
         $6_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 134224124 | 0) >> 2] = $6_1;
         $4_1 = $5_1 + $4_1 | 0;
         HEAP32[(0 + 134224136 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
         HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 134224140 | 0) >> 2] = HEAP32[(0 + 134224600 | 0) >> 2] | 0;
         break label$60;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$61
        }
        if ($5_1 >>> 0 <= $4_1 >>> 0) {
         break label$61
        }
        if ($6_1 >>> 0 > $4_1 >>> 0) {
         break label$61
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $6_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 134224136 | 0) >> 2] = $6_1;
        $5_1 = (HEAP32[(0 + 134224124 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $5_1 - $0_1 | 0;
        HEAP32[(0 + 134224124 | 0) >> 2] = $0_1;
        HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $5_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 134224140 | 0) >> 2] = HEAP32[(0 + 134224600 | 0) >> 2] | 0;
        break label$60;
       }
       label$68 : {
        $8_1 = HEAP32[(0 + 134224128 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $8_1 >>> 0) {
         break label$68
        }
        HEAP32[(0 + 134224128 | 0) >> 2] = $5_1;
        $8_1 = $5_1;
       }
       $6_1 = $5_1 + $2_1 | 0;
       $0_1 = 134224560;
       label$69 : {
        label$70 : {
         label$71 : {
          label$72 : {
           label$73 : {
            label$74 : {
             label$75 : {
              label$76 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($6_1 | 0)) {
                break label$75
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$76
               }
               break label$74;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$73
             }
            }
            $0_1 = 134224560;
            label$77 : while (1) {
             label$78 : {
              $6_1 = HEAP32[$0_1 >> 2] | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$78
              }
              $6_1 = $6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$72
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$77;
            };
           }
           HEAP32[$0_1 >> 2] = $5_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $11_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $5_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           $0_1 = ($5_1 - $11_1 | 0) - $3_1 | 0;
           $6_1 = $11_1 + $3_1 | 0;
           label$79 : {
            if (($4_1 | 0) != ($5_1 | 0)) {
             break label$79
            }
            HEAP32[(0 + 134224136 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 134224124 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 134224124 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$70;
           }
           label$80 : {
            if ((HEAP32[(0 + 134224132 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
             break label$80
            }
            HEAP32[(0 + 134224132 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 134224120 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 134224120 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
            break label$70;
           }
           label$81 : {
            $4_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
            if (($4_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$81
            }
            $7_1 = $4_1 & -8 | 0;
            label$82 : {
             label$83 : {
              if ($4_1 >>> 0 > 255 >>> 0) {
               break label$83
              }
              $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              label$84 : {
               $2_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
               $9_1 = $4_1 >>> 3 | 0;
               $4_1 = ($9_1 << 3 | 0) + 134224152 | 0;
               if (($2_1 | 0) == ($4_1 | 0)) {
                break label$84
               }
              }
              label$85 : {
               if (($3_1 | 0) != ($2_1 | 0)) {
                break label$85
               }
               HEAP32[(0 + 134224112 | 0) >> 2] = (HEAP32[(0 + 134224112 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
               break label$82;
              }
              label$86 : {
               if (($3_1 | 0) == ($4_1 | 0)) {
                break label$86
               }
              }
              HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
              HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
              break label$82;
             }
             $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
             label$87 : {
              label$88 : {
               $2_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($2_1 | 0) == ($5_1 | 0)) {
                break label$88
               }
               label$89 : {
                $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ($8_1 >>> 0 > $4_1 >>> 0) {
                 break label$89
                }
                HEAP32[($4_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
               HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
               break label$87;
              }
              label$90 : {
               $4_1 = $5_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$90
               }
               $4_1 = $5_1 + 16 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$90
               }
               $2_1 = 0;
               break label$87;
              }
              label$91 : while (1) {
               $8_1 = $4_1;
               $2_1 = $3_1;
               $4_1 = $3_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                continue label$91
               }
               $4_1 = $2_1 + 16 | 0;
               $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
               if ($3_1) {
                continue label$91
               }
               break label$91;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$82
             }
             label$92 : {
              label$93 : {
               $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
               $4_1 = ($3_1 << 2 | 0) + 134224416 | 0;
               if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
                break label$93
               }
               HEAP32[$4_1 >> 2] = $2_1;
               if ($2_1) {
                break label$92
               }
               HEAP32[(0 + 134224116 | 0) >> 2] = (HEAP32[(0 + 134224116 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
               break label$82;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
              if (!$2_1) {
               break label$82
              }
             }
             HEAP32[($2_1 + 24 | 0) >> 2] = $9_1;
             label$94 : {
              $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$94
              }
              HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
             }
             $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$82
             }
             HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
             HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
            }
            $0_1 = $7_1 + $0_1 | 0;
            $5_1 = $5_1 + $7_1 | 0;
           }
           HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
           label$95 : {
            if ($0_1 >>> 0 > 255 >>> 0) {
             break label$95
            }
            $4_1 = $0_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 134224152 | 0;
            label$96 : {
             label$97 : {
              $3_1 = HEAP32[(0 + 134224112 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($3_1 & $4_1 | 0) {
               break label$97
              }
              HEAP32[(0 + 134224112 | 0) >> 2] = $3_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$96;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
            HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
            break label$70;
           }
           $4_1 = 0;
           label$98 : {
            $3_1 = $0_1 >>> 8 | 0;
            if (!$3_1) {
             break label$98
            }
            $4_1 = 31;
            if ($0_1 >>> 0 > 16777215 >>> 0) {
             break label$98
            }
            $4_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $3_1 = $3_1 << $4_1 | 0;
            $1194_1 = $3_1;
            $3_1 = (($3_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5_1 = $1194_1 << $3_1 | 0;
            $1201_1 = $5_1;
            $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $4_1 = (($1201_1 << $5_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $5_1 | 0) | 0;
            $4_1 = ($4_1 << 1 | 0 | (($0_1 >>> ($4_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($6_1 + 28 | 0) >> 2] = $4_1;
           i64toi32_i32$1 = $6_1;
           i64toi32_i32$0 = 0;
           HEAP32[($6_1 + 16 | 0) >> 2] = 0;
           HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $3_1 = ($4_1 << 2 | 0) + 134224416 | 0;
           label$99 : {
            label$100 : {
             $5_1 = HEAP32[(0 + 134224116 | 0) >> 2] | 0;
             $8_1 = 1 << $4_1 | 0;
             if ($5_1 & $8_1 | 0) {
              break label$100
             }
             HEAP32[(0 + 134224116 | 0) >> 2] = $5_1 | $8_1 | 0;
             HEAP32[$3_1 >> 2] = $6_1;
             HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
             break label$99;
            }
            $4_1 = $0_1 << (($4_1 | 0) == (31 | 0) ? 0 : 25 - ($4_1 >>> 1 | 0) | 0) | 0;
            $5_1 = HEAP32[$3_1 >> 2] | 0;
            label$101 : while (1) {
             $3_1 = $5_1;
             if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
              break label$71
             }
             $5_1 = $4_1 >>> 29 | 0;
             $4_1 = $4_1 << 1 | 0;
             $8_1 = ($3_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
             $5_1 = HEAP32[$8_1 >> 2] | 0;
             if ($5_1) {
              continue label$101
             }
             break label$101;
            };
            HEAP32[$8_1 >> 2] = $6_1;
            HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
           }
           HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
           HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
           break label$70;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
          $11_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 134224124 | 0) >> 2] = $11_1;
          $8_1 = $5_1 + $8_1 | 0;
          HEAP32[(0 + 134224136 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
          HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 134224140 | 0) >> 2] = HEAP32[(0 + 134224600 | 0) >> 2] | 0;
          $0_1 = ($6_1 + (($6_1 + -39 | 0) & 7 | 0 ? (39 - $6_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134224568 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134224572 | 0) >> 2] | 0;
          $1323_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1323_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 134224560 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 134224564 | 0) >> 2] | 0;
          $1325_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1325_1;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 134224568 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 134224564 | 0) >> 2] = $2_1;
          HEAP32[(0 + 134224560 | 0) >> 2] = $5_1;
          HEAP32[(0 + 134224572 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$102 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $5_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($5_1 >>> 0 < $6_1 >>> 0) {
            continue label$102
           }
           break label$102;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$60
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$103 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$103
           }
           $6_1 = $2_1 >>> 3 | 0;
           $0_1 = ($6_1 << 3 | 0) + 134224152 | 0;
           label$104 : {
            label$105 : {
             $5_1 = HEAP32[(0 + 134224112 | 0) >> 2] | 0;
             $6_1 = 1 << $6_1 | 0;
             if ($5_1 & $6_1 | 0) {
              break label$105
             }
             HEAP32[(0 + 134224112 | 0) >> 2] = $5_1 | $6_1 | 0;
             $6_1 = $0_1;
             break label$104;
            }
            $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
           break label$60;
          }
          $0_1 = 0;
          label$106 : {
           $6_1 = $2_1 >>> 8 | 0;
           if (!$6_1) {
            break label$106
           }
           $0_1 = 31;
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$106
           }
           $0_1 = (($6_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $6_1 = $6_1 << $0_1 | 0;
           $1395_1 = $6_1;
           $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $5_1 = $1395_1 << $6_1 | 0;
           $1402_1 = $5_1;
           $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1402_1 << $5_1 | 0) >>> 15 | 0) - ($6_1 | $0_1 | 0 | $5_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $6_1 = ($0_1 << 2 | 0) + 134224416 | 0;
          label$107 : {
           label$108 : {
            $5_1 = HEAP32[(0 + 134224116 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($5_1 & $8_1 | 0) {
             break label$108
            }
            HEAP32[(0 + 134224116 | 0) >> 2] = $5_1 | $8_1 | 0;
            HEAP32[$6_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
            break label$107;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $5_1 = HEAP32[$6_1 >> 2] | 0;
           label$109 : while (1) {
            $6_1 = $5_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$69
            }
            $5_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($6_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
            $5_1 = HEAP32[$8_1 >> 2] | 0;
            if ($5_1) {
             continue label$109
            }
            break label$109;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$60;
         }
         $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
         HEAP32[($6_1 + 24 | 0) >> 2] = 0;
         HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $11_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 134224124 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 134224124 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 134224136 | 0) >> 2] | 0;
      $6_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 134224136 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[($392() | 0) >> 2] = 12;
     $0_1 = 0;
     break label$1;
    }
    label$110 : {
     if (!$11_1) {
      break label$110
     }
     label$111 : {
      label$112 : {
       $4_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($4_1 << 2 | 0) + 134224416 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$112
       }
       HEAP32[$0_1 >> 2] = $5_1;
       if ($5_1) {
        break label$111
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       HEAP32[(0 + 134224116 | 0) >> 2] = $7_1;
       break label$110;
      }
      HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$110
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $11_1;
     label$113 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$113
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$110
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    label$114 : {
     label$115 : {
      if ($6_1 >>> 0 > 15 >>> 0) {
       break label$115
      }
      $0_1 = $6_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$114;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     $5_1 = $8_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
     HEAP32[($5_1 + $6_1 | 0) >> 2] = $6_1;
     label$116 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$116
      }
      $4_1 = $6_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 134224152 | 0;
      label$117 : {
       label$118 : {
        $6_1 = HEAP32[(0 + 134224112 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($6_1 & $4_1 | 0) {
         break label$118
        }
        HEAP32[(0 + 134224112 | 0) >> 2] = $6_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$117;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
      break label$114;
     }
     label$119 : {
      label$120 : {
       $4_1 = $6_1 >>> 8 | 0;
       if ($4_1) {
        break label$120
       }
       $0_1 = 0;
       break label$119;
      }
      $0_1 = 31;
      if ($6_1 >>> 0 > 16777215 >>> 0) {
       break label$119
      }
      $0_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $4_1 = $4_1 << $0_1 | 0;
      $1646_1 = $4_1;
      $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1646_1 << $4_1 | 0;
      $1653_1 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1653_1 << $3_1 | 0) >>> 15 | 0) - ($4_1 | $0_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($6_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$0 = 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = 0;
     HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = ($0_1 << 2 | 0) + 134224416 | 0;
     label$121 : {
      label$122 : {
       label$123 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$123
        }
        HEAP32[(0 + 134224116 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$4_1 >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $4_1;
        break label$122;
       }
       $0_1 = $6_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$4_1 >> 2] | 0;
       label$124 : while (1) {
        $4_1 = $3_1;
        if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($6_1 | 0)) {
         break label$121
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $2_1 = ($4_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if ($3_1) {
         continue label$124
        }
        break label$124;
       };
       HEAP32[$2_1 >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $4_1;
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $5_1;
      break label$114;
     }
     $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$125 : {
    if (!$10_1) {
     break label$125
    }
    label$126 : {
     label$127 : {
      $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($6_1 << 2 | 0) + 134224416 | 0;
      if (($5_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$127
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$126
      }
      HEAP32[(0 + 134224116 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
      break label$125;
     }
     HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$125
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $10_1;
    label$128 : {
     $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$128
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$125
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$129 : {
    label$130 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$130
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $5_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$129;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    $6_1 = $5_1 + $3_1 | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($6_1 + $4_1 | 0) >> 2] = $4_1;
    label$131 : {
     if (!$7_1) {
      break label$131
     }
     $8_1 = $7_1 >>> 3 | 0;
     $3_1 = ($8_1 << 3 | 0) + 134224152 | 0;
     $0_1 = HEAP32[(0 + 134224132 | 0) >> 2] | 0;
     label$132 : {
      label$133 : {
       $8_1 = 1 << $8_1 | 0;
       if ($8_1 & $2_1 | 0) {
        break label$133
       }
       HEAP32[(0 + 134224112 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $3_1;
       break label$132;
      }
      $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 134224132 | 0) >> 2] = $6_1;
    HEAP32[(0 + 134224120 | 0) >> 2] = $4_1;
   }
   $0_1 = $5_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1653($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $5_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $408_1 = 0, $415_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 134224128 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 134224132 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       $7_1 = $2_1 >>> 3 | 0;
       $2_1 = ($7_1 << 3 | 0) + 134224152 | 0;
       if (($6_1 | 0) == ($2_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 134224112 | 0) >> 2] = (HEAP32[(0 + 134224112 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($1_1 | 0)) {
        break label$9
       }
       label$10 : {
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $2_1 >>> 0) {
         break label$10
        }
        HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
       break label$8;
      }
      label$11 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $5_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $6_1 = $2_1;
       $5_1 = $4_1;
       $2_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       $2_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 134224416 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$14
       }
       HEAP32[$2_1 >> 2] = $5_1;
       if ($5_1) {
        break label$13
       }
       HEAP32[(0 + 134224116 | 0) >> 2] = (HEAP32[(0 + 134224116 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$2
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$15
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 134224120 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$16 : {
    label$17 : {
     if ($2_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 134224136 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 134224136 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 134224124 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 134224124 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 134224132 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 134224120 | 0) >> 2] = 0;
      HEAP32[(0 + 134224132 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 134224132 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 134224132 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 134224120 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 134224120 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$20 : {
      label$21 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        $3_1 = $2_1 >>> 3 | 0;
        $2_1 = ($3_1 << 3 | 0) + 134224152 | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$22
        }
        HEAP32[(0 + 134224128 | 0) >> 2] | 0;
       }
       label$23 : {
        if (($4_1 | 0) != ($5_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 134224112 | 0) >> 2] = (HEAP32[(0 + 134224112 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($4_1 | 0) == ($2_1 | 0)) {
         break label$24
        }
        HEAP32[(0 + 134224128 | 0) >> 2] | 0;
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
       break label$20;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$26
        }
        label$27 : {
         $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 134224128 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
          break label$27
         }
         HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
        break label$25;
       }
       label$28 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $5_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $6_1 = $2_1;
        $5_1 = $4_1;
        $2_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        $2_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 134224416 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$31
        }
        HEAP32[$2_1 >> 2] = $5_1;
        if ($5_1) {
         break label$30
        }
        HEAP32[(0 + 134224116 | 0) >> 2] = (HEAP32[(0 + 134224116 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
       if (!$5_1) {
        break label$20
       }
      }
      HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$32
       }
       HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$20
      }
      HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 134224132 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 134224120 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$33 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 134224152 | 0;
    label$34 : {
     label$35 : {
      $4_1 = HEAP32[(0 + 134224112 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 134224112 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$34;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 0;
   label$36 : {
    $4_1 = $0_1 >>> 8 | 0;
    if (!$4_1) {
     break label$36
    }
    $2_1 = 31;
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $2_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $4_1 << $2_1 | 0;
    $408_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $5_1 = $408_1 << $4_1 | 0;
    $415_1 = $5_1;
    $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($415_1 << $5_1 | 0) >>> 15 | 0) - ($4_1 | $2_1 | 0 | $5_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 134224416 | 0;
   label$37 : {
    label$38 : {
     $5_1 = HEAP32[(0 + 134224116 | 0) >> 2] | 0;
     $3_1 = 1 << $2_1 | 0;
     if ($5_1 & $3_1 | 0) {
      break label$38
     }
     HEAP32[(0 + 134224116 | 0) >> 2] = $5_1 | $3_1 | 0;
     HEAP32[$4_1 >> 2] = $1_1;
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$37;
    }
    $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    label$39 : {
     label$40 : while (1) {
      $4_1 = $5_1;
      if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
       break label$39
      }
      $5_1 = $2_1 >>> 29 | 0;
      $2_1 = $2_1 << 1 | 0;
      $3_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
      $5_1 = HEAP32[$3_1 >> 2] | 0;
      if ($5_1) {
       continue label$40
      }
      break label$40;
     };
     HEAP32[$3_1 >> 2] = $1_1;
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$37;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 134224144 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 134224144 | 0) >> 2] = $1_1;
   if ($1_1) {
    break label$1
   }
   $1_1 = 134224568;
   label$41 : while (1) {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $0_1 + 8 | 0;
    if ($0_1) {
     continue label$41
    }
    break label$41;
   };
   HEAP32[(0 + 134224144 | 0) >> 2] = -1;
  }
 }
 
 function $1654($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $1652($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($392() | 0) >> 2] = 12;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $1655($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $1652($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & -8 | 0) - ($3_1 & 3 | 0 ? 4 : 8) | 0;
  $1679($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $1653($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $1655($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0, $2_1 = 0, $5_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & -8 | 0;
  $4_1 = $0_1 + $3_1 | 0;
  $5_1 = HEAP32[(0 + 134224128 | 0) >> 2] | 0;
  label$1 : {
   $6_1 = $2_1 & 3 | 0;
   if (($6_1 | 0) == (1 | 0)) {
    break label$1
   }
   if ($5_1 >>> 0 > $0_1 >>> 0) {
    break label$1
   }
  }
  label$2 : {
   label$3 : {
    if ($6_1) {
     break label$3
    }
    $6_1 = 0;
    if ($1_1 >>> 0 < 256 >>> 0) {
     break label$2
    }
    label$4 : {
     if ($3_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $6_1 = $0_1;
     if (($3_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 134224592 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$2
     }
    }
    return 0 | 0;
   }
   label$5 : {
    label$6 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $3_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $1656($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $6_1 = 0;
    label$7 : {
     if ((HEAP32[(0 + 134224136 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
      break label$7
     }
     $4_1 = (HEAP32[(0 + 134224124 | 0) >> 2] | 0) + $3_1 | 0;
     if ($4_1 >>> 0 <= $1_1 >>> 0) {
      break label$2
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $3_1 = $0_1 + $1_1 | 0;
     $1_1 = $4_1 - $1_1 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 134224124 | 0) >> 2] = $1_1;
     HEAP32[(0 + 134224136 | 0) >> 2] = $3_1;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 134224132 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
      break label$8
     }
     $6_1 = 0;
     $4_1 = (HEAP32[(0 + 134224120 | 0) >> 2] | 0) + $3_1 | 0;
     if ($4_1 >>> 0 < $1_1 >>> 0) {
      break label$2
     }
     label$9 : {
      label$10 : {
       $3_1 = $4_1 - $1_1 | 0;
       if ($3_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
       $4_1 = $0_1 + $4_1 | 0;
       HEAP32[$4_1 >> 2] = $3_1;
       HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $4_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $4_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $3_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 134224132 | 0) >> 2] = $1_1;
     HEAP32[(0 + 134224120 | 0) >> 2] = $3_1;
     break label$5;
    }
    $6_1 = 0;
    $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    if ($7_1 & 2 | 0) {
     break label$2
    }
    $8_1 = ($7_1 & -8 | 0) + $3_1 | 0;
    if ($8_1 >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $9_1 = $8_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($7_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      label$13 : {
       $4_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       $7_1 = $7_1 >>> 3 | 0;
       $6_1 = ($7_1 << 3 | 0) + 134224152 | 0;
       if (($4_1 | 0) == ($6_1 | 0)) {
        break label$13
       }
      }
      label$14 : {
       if (($3_1 | 0) != ($4_1 | 0)) {
        break label$14
       }
       HEAP32[(0 + 134224112 | 0) >> 2] = (HEAP32[(0 + 134224112 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$11;
      }
      label$15 : {
       if (($3_1 | 0) == ($6_1 | 0)) {
        break label$15
       }
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
      break label$11;
     }
     $10_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($4_1 | 0)) {
        break label$17
       }
       label$18 : {
        $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        if ($5_1 >>> 0 > $3_1 >>> 0) {
         break label$18
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $7_1;
       HEAP32[($7_1 + 8 | 0) >> 2] = $3_1;
       break label$16;
      }
      label$19 : {
       $3_1 = $4_1 + 20 | 0;
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if ($6_1) {
        break label$19
       }
       $3_1 = $4_1 + 16 | 0;
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if ($6_1) {
        break label$19
       }
       $7_1 = 0;
       break label$16;
      }
      label$20 : while (1) {
       $5_1 = $3_1;
       $7_1 = $6_1;
       $3_1 = $7_1 + 20 | 0;
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if ($6_1) {
        continue label$20
       }
       $3_1 = $7_1 + 16 | 0;
       $6_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
       if ($6_1) {
        continue label$20
       }
       break label$20;
      };
      HEAP32[$5_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$21 : {
      label$22 : {
       $6_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($6_1 << 2 | 0) + 134224416 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($4_1 | 0)) {
        break label$22
       }
       HEAP32[$3_1 >> 2] = $7_1;
       if ($7_1) {
        break label$21
       }
       HEAP32[(0 + 134224116 | 0) >> 2] = (HEAP32[(0 + 134224116 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($4_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
      if (!$7_1) {
       break label$11
      }
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = $10_1;
     label$23 : {
      $3_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$23
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $7_1;
     }
     $4_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$11
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $7_1;
    }
    label$24 : {
     if ($9_1 >>> 0 > 15 >>> 0) {
      break label$24
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $8_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $8_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $9_1 | 3 | 0;
    $4_1 = $0_1 + $8_1 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $1656($1_1 | 0, $9_1 | 0);
   }
   $6_1 = $0_1;
  }
  return $6_1 | 0;
 }
 
 function $1656($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $391_1 = 0, $398_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     $0_1 = $0_1 - $3_1 | 0;
     if ((HEAP32[(0 + 134224132 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[(0 + 134224128 | 0) >> 2] | 0;
     label$4 : {
      if ($3_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $7_1 = $3_1 >>> 3 | 0;
       $3_1 = ($7_1 << 3 | 0) + 134224152 | 0;
       if (($6_1 | 0) == ($3_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 134224112 | 0) >> 2] = (HEAP32[(0 + 134224112 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($3_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($0_1 | 0)) {
        break label$9
       }
       label$10 : {
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $3_1 >>> 0) {
         break label$10
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$8;
      }
      label$11 : {
       $3_1 = $0_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $3_1 = $0_1 + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $6_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $4_1 = $3_1;
       $6_1 = $5_1;
       $3_1 = $6_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       $3_1 = $6_1 + 16 | 0;
       $5_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$4_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($5_1 << 2 | 0) + 134224416 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
        break label$14
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$13
       }
       HEAP32[(0 + 134224116 | 0) >> 2] = (HEAP32[(0 + 134224116 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$15
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 134224120 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[$2_1 >> 2] = $1_1;
    return;
   }
   label$16 : {
    label$17 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 134224136 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 134224136 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 134224124 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 134224124 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 134224132 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 134224120 | 0) >> 2] = 0;
      HEAP32[(0 + 134224132 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 134224132 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 134224132 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 134224120 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 134224120 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $4_1 = HEAP32[(0 + 134224128 | 0) >> 2] | 0;
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$20 : {
      label$21 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        $2_1 = $3_1 >>> 3 | 0;
        $3_1 = ($2_1 << 3 | 0) + 134224152 | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$22
        }
       }
       label$23 : {
        if (($5_1 | 0) != ($6_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 134224112 | 0) >> 2] = (HEAP32[(0 + 134224112 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$24
        }
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
       break label$20;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$26
        }
        label$27 : {
         $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         if ($4_1 >>> 0 > $3_1 >>> 0) {
          break label$27
         }
         HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$25;
       }
       label$28 : {
        $3_1 = $2_1 + 20 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         break label$28
        }
        $3_1 = $2_1 + 16 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         break label$28
        }
        $6_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $4_1 = $3_1;
        $6_1 = $5_1;
        $3_1 = $6_1 + 20 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         continue label$29
        }
        $3_1 = $6_1 + 16 | 0;
        $5_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($5_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$4_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($5_1 << 2 | 0) + 134224416 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$31
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$30
        }
        HEAP32[(0 + 134224116 | 0) >> 2] = (HEAP32[(0 + 134224116 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$20
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$32
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 134224132 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 134224120 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$33 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $3_1 = $1_1 >>> 3 | 0;
    $1_1 = ($3_1 << 3 | 0) + 134224152 | 0;
    label$34 : {
     label$35 : {
      $5_1 = HEAP32[(0 + 134224112 | 0) >> 2] | 0;
      $3_1 = 1 << $3_1 | 0;
      if ($5_1 & $3_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 134224112 | 0) >> 2] = $5_1 | $3_1 | 0;
      $3_1 = $1_1;
      break label$34;
     }
     $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    return;
   }
   $3_1 = 0;
   label$36 : {
    $5_1 = $1_1 >>> 8 | 0;
    if (!$5_1) {
     break label$36
    }
    $3_1 = 31;
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $3_1 = (($5_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $5_1 = $5_1 << $3_1 | 0;
    $391_1 = $5_1;
    $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $391_1 << $5_1 | 0;
    $398_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($398_1 << $6_1 | 0) >>> 15 | 0) - ($5_1 | $3_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   $5_1 = ($3_1 << 2 | 0) + 134224416 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      $6_1 = HEAP32[(0 + 134224116 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$39
      }
      HEAP32[(0 + 134224116 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$5_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
      break label$38;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     label$40 : while (1) {
      $5_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$37
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$40
      }
      break label$40;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $1657($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1658($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1659($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $8_1 = 0, $123_1 = 0, $125_1 = 0, $126_1 = 0, $127_1 = 0, $128_1 = 0, $129_1 = 0, $130_1 = 0, $131_1 = 0, $132_1 = 0, $12_1 = 0, $133_1 = 0, $134_1 = 0, $135_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $144_1 = 0, $21_1 = 0, $27_1 = 0, $28$hi = 0, $32_1 = 0, $39_1 = 0, $43_1 = 0, $44$hi = 0, $48_1 = 0, $53_1 = 0, $55_1 = 0, $63_1 = 0, $65_1 = 0, $73_1 = 0, $73$hi = 0, $79_1 = 0, $79$hi = 0, $83_1 = 0, $83$hi = 0, $93_1 = 0, $93$hi = 0, $121_1 = 0, $124_1 = 0, $151_1 = 0, $152_1 = 0, $152$hi = 0, $153_1 = 0, $153$hi = 0, $160$hi = 0, $163$hi = 0, $183_1 = 0, $184_1 = 0, $184$hi = 0, $185_1 = 0, $185$hi = 0, $192$hi = 0, $195$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $214_1 = 0, $214$hi = 0, $216$hi = 0, $242_1 = 0, $242$hi = 0, $244_1 = 0, $244$hi = 0, $248_1 = 0, $248$hi = 0, $250_1 = 0, $251$hi = 0, $269$hi = 0, $272_1 = 0, $273$hi = 0, $282_1 = 0, $283_1 = 0, $283$hi = 0, $284_1 = 0, $284$hi = 0, $291$hi = 0, $294$hi = 0, $309_1 = 0, $309$hi = 0, $315_1 = 0, $316$hi = 0, $322_1 = 0, $322$hi = 0, $324$hi = 0, $325_1 = 0, $325$hi = 0, $327_1 = 0, $327$hi = 0, $354_1 = 0, $354$hi = 0, $356_1 = 0, $356$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $363$hi = 0, $370$hi = 0, $372_1 = 0, $372$hi = 0, $375$hi = 0, $376_1 = 0, $376$hi = 0, $378_1 = 0, $378$hi = 0, $380$hi = 0, $388$hi = 0, $392_1 = 0, $393$hi = 0, $394_1 = 0, $394$hi = 0, $145_1 = 0, $405_1 = 0, $406$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $21_1 = (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     $27_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$3 = $27_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $32_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $21_1 : $32_1) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $39_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $43_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $44$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$3 = $44$hi;
     i64toi32_i32$5 = $43_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $48_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $39_1 : $48_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $55_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $53_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $63_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $65_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $63_1 : $65_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $73_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $73$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $73$hi;
     i64toi32_i32$2 = $73_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $79_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $79$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $83_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $79$hi;
     i64toi32_i32$2 = $79_1;
     i64toi32_i32$5 = $83$hi;
     i64toi32_i32$4 = $83_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1_1;
     i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
    $93_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $93$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $93$hi;
    i64toi32_i32$0 = $93_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   $121_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = $11_1;
   $124_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $11_1;
   $7_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $121_1 : $124_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $123_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $123_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $8_1 = $123_1 & 32767 | 0;
   label$8 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $125_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $125_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $6_1 = $125_1 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $151_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $152_1 = $9_1;
    $152$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $153_1 = $10_1;
    $153$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ? $9_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $126_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $126_1 = i64toi32_i32$5
    }
    $160$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $163$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$1 = $126_1;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$1 = $153$hi;
    $1660($151_1 | 0, $152_1 | 0, i64toi32_i32$3 | 0, $153_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$3;
    $9$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$2 ? $1_1 : $3_1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $1$hi = i64toi32_i32$5;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $183_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $184_1 = $3_1;
    $184$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $185_1 = $1_1;
    $185$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $1$hi;
    $7_1 = !($1_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3_1 : $1_1;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $127_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $127_1 = i64toi32_i32$5
    }
    $192$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $192$hi;
    i64toi32_i32$1 = $127_1;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    i64toi32_i32$4 = $184$hi;
    i64toi32_i32$1 = $185$hi;
    $1660($183_1 | 0, $184_1 | 0, i64toi32_i32$4 | 0, $185_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5_1 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $128_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $128_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $208_1 = $128_1;
   $208$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $129_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $129_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $210$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $208$hi;
   i64toi32_i32$4 = $208_1;
   i64toi32_i32$1 = $210$hi;
   i64toi32_i32$5 = $129_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $130_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $130_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $214_1 = $130_1;
   $214$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $131_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $131_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $216$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $214$hi;
   i64toi32_i32$3 = $214_1;
   i64toi32_i32$4 = $216$hi;
   i64toi32_i32$5 = $131_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $132_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $132_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $3_1 = $132_1;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$4 = $11_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $10$hi = i64toi32_i32$1;
   label$10 : {
    $7_1 = $6_1 - $8_1 | 0;
    if (!$7_1) {
     break label$10
    }
    label$11 : {
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $3_1 = 1;
     $3$hi = i64toi32_i32$1;
     break label$10;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    $1660($5_1 + 64 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $1670($5_1 + 48 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$1;
    $242$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $244_1 = i64toi32_i32$4;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $248_1 = i64toi32_i32$1;
    $248$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $244$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$1 = $248$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $250_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $251$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$1 = $251$hi;
    i64toi32_i32$3 = $250_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $133_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $133_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2_1 = $133_1;
   $2$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $134_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $135_1 = 0
       } else {
        $135_1 = 1
       }
       $136_1 = $135_1;
      } else {
       $136_1 = 0
      }
      $134_1 = $136_1;
     }
     if ($134_1) {
      break label$13
     }
     label$14 : {
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3_1;
      $272_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $273$hi;
      i64toi32_i32$1 = $272_1;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $3_1 = i64toi32_i32$3;
      $3$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
       break label$14
      }
      i64toi32_i32$5 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$5;
      break label$1;
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$2 = 524287;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $282_1 = $5_1 + 32 | 0;
     i64toi32_i32$4 = $1$hi;
     $283_1 = $1_1;
     $283$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     $284_1 = $3_1;
     $284$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     $7_1 = !($3_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$0 ? $1_1 : $3_1;
     i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $137_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $137_1 = i64toi32_i32$4
     }
     $291$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $294$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $291$hi;
     i64toi32_i32$2 = $137_1;
     i64toi32_i32$1 = $294$hi;
     i64toi32_i32$4 = $7_1 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $7_1 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$2 = $284$hi;
     $1660($282_1 | 0, $283_1 | 0, i64toi32_i32$3 | 0, $284_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$0 = $5_1 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$2;
     break label$12;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = $12_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $309_1 = i64toi32_i32$1;
    $309$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $316$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $309$hi;
    i64toi32_i32$4 = $309_1;
    i64toi32_i32$1 = $316$hi;
    i64toi32_i32$2 = $315_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = 1048576;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$2 | 0 | i64toi32_i32$4 | 0)) {
     break label$12
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $138_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $138_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $322_1 = $138_1;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $139_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $139_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $324$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $322$hi;
    i64toi32_i32$5 = $322_1;
    i64toi32_i32$4 = $324$hi;
    i64toi32_i32$2 = $139_1;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $325_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $325$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $327_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $327$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $325$hi;
    i64toi32_i32$4 = $325_1;
    i64toi32_i32$3 = $327$hi;
    i64toi32_i32$2 = $327_1;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$3;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $140_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $140_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $3_1 = $140_1;
    $3$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$3;
    break label$1;
   }
   $7_1 = 0;
   label$16 : {
    label$17 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$17
     }
     $7_1 = $6_1;
     break label$16;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $3$hi;
    $1660($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $1670($5_1 | 0, $1_1 | 0, i64toi32_i32$4 | 0, $3_1 | 0, i64toi32_i32$3 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $354_1 = i64toi32_i32$3;
    $354$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $356_1 = i64toi32_i32$4;
    $356$hi = i64toi32_i32$3;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360_1 = i64toi32_i32$3;
    $360$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $356$hi;
    i64toi32_i32$5 = $356_1;
    i64toi32_i32$3 = $360$hi;
    i64toi32_i32$2 = $360_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $362_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = 0;
    $363$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $354$hi;
    i64toi32_i32$2 = $354_1;
    i64toi32_i32$3 = $363$hi;
    i64toi32_i32$5 = $362_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $141_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $141_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$2 = $141_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $370$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $370$hi;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $372_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $372$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $142_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $142_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $375$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $372$hi;
   i64toi32_i32$2 = $372_1;
   i64toi32_i32$4 = $375$hi;
   i64toi32_i32$5 = $142_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $376_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $376$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $143_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    $143_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
   }
   $378_1 = $143_1;
   $378$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $144_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $144_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $380$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $378$hi;
   i64toi32_i32$2 = $378_1;
   i64toi32_i32$4 = $380$hi;
   i64toi32_i32$5 = $144_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   $6_1 = $1_1 & 7 | 0;
   i64toi32_i32$4 = 0;
   $388$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = $388$hi;
   i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = $4_1;
   $392_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $393$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $376$hi;
   i64toi32_i32$5 = $376_1;
   i64toi32_i32$0 = $393$hi;
   i64toi32_i32$3 = $392_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $394_1 = i64toi32_i32$2;
   $394$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = ($6_1 | 0) == (4 | 0);
   $145_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 ? $145_1 : 0;
   i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $3_1 = i64toi32_i32$4;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   $405_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $406$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $394$hi;
   i64toi32_i32$5 = $394_1;
   i64toi32_i32$2 = $406$hi;
   i64toi32_i32$0 = $405_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$4;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $1660($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($3_1 & 64 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$3 = $3_1 + -64 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $18_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $2_1 = $18_1;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    if (!$3_1) {
     break label$1
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = 0;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$3 = 64 - $3_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $19_1 = $20_1;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = 0;
    $4_1 = $3_1;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $21_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $24$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $21_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $22_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $1_1 = $22_1;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1661($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $1662($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $1663($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $1664($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $1665($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $13$hi = 0, $17$hi = 0, $13_1 = 0, $15$hi = 0, $17_1 = 0, $18$hi = 0, i64toi32_i32$6 = 0, $5_1 = 0, $19$hi = 0, $15_1 = 0, $16$hi = 0, $11$hi = 0, $18_1 = 0, $11_1 = 0, $19_1 = 0, $16_1 = 0, $20$hi = 0, $12$hi = 0, $12_1 = 0, $20_1 = 0, $10$hi = 0, $6_1 = 0, $10_1 = 0, $8_1 = 0, $21$hi = 0, $14_1 = 0, $14$hi = 0, $21_1 = 0, $9_1 = 0, $456_1 = 0, $457_1 = 0, $7_1 = 0, $458_1 = 0, $459_1 = 0, $460_1 = 0, $462_1 = 0, $463_1 = 0, $464_1 = 0, $466_1 = 0, $467_1 = 0, $468_1 = 0, $470_1 = 0, $471_1 = 0, $472_1 = 0, $476_1 = 0, $477_1 = 0, $479_1 = 0, $480_1 = 0, $481_1 = 0, $482_1 = 0, $483_1 = 0, $485_1 = 0, $486_1 = 0, $487_1 = 0, $489_1 = 0, $490_1 = 0, $491_1 = 0, $492_1 = 0, $495_1 = 0, $496_1 = 0, $497_1 = 0, $498_1 = 0, $499_1 = 0, $500_1 = 0, $502_1 = 0, $503_1 = 0, $504_1 = 0, $506_1 = 0, $508_1 = 0, $509_1 = 0, $513_1 = 0, $514_1 = 0, $515_1 = 0, $516_1 = 0, $517_1 = 0, $519_1 = 0, $522_1 = 0, $523_1 = 0, $524_1 = 0, $525_1 = 0, $526_1 = 0, $527_1 = 0, $528_1 = 0, $529_1 = 0, $531_1 = 0, $532_1 = 0, $533_1 = 0, $538_1 = 0, $539_1 = 0, $540_1 = 0, $541_1 = 0, $543_1 = 0, $544_1 = 0, $545_1 = 0, $547_1 = 0, $548_1 = 0, $549_1 = 0, $550_1 = 0, $551_1 = 0, $553_1 = 0, $556_1 = 0, $557_1 = 0, $558_1 = 0, $559_1 = 0, $560_1 = 0, $48_1 = 0, $52_1 = 0, $59_1 = 0, $63_1 = 0, $72_1 = 0, $72$hi = 0, $77_1 = 0, $77$hi = 0, $85_1 = 0, $85$hi = 0, $101_1 = 0, $102_1 = 0, $102$hi = 0, $103_1 = 0, $103$hi = 0, $110$hi = 0, $113$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $155_1 = 0, $157_1 = 0, $157$hi = 0, $161$hi = 0, $172_1 = 0, $172$hi = 0, $173$hi = 0, $176_1 = 0, $179_1 = 0, $179$hi = 0, $184$hi = 0, $194_1 = 0, $194$hi = 0, $195$hi = 0, $197_1 = 0, $200_1 = 0, $200$hi = 0, $205$hi = 0, $215_1 = 0, $215$hi = 0, $216$hi = 0, $218_1 = 0, $221_1 = 0, $221$hi = 0, $226$hi = 0, $236_1 = 0, $236$hi = 0, $237$hi = 0, $239_1 = 0, $242_1 = 0, $242$hi = 0, $247$hi = 0, $256_1 = 0, $256$hi = 0, $257$hi = 0, $265_1 = 0, $265$hi = 0, $269$hi = 0, $274_1 = 0, $274$hi = 0, $280_1 = 0, $280$hi = 0, $287_1 = 0, $287$hi = 0, $294_1 = 0, $294$hi = 0, $298_1 = 0, $299_1 = 0, $299$hi = 0, $301_1 = 0, $301$hi = 0, $304_1 = 0, $306$hi = 0, $307_1 = 0, $307$hi = 0, $310_1 = 0, $310$hi = 0, $311$hi = 0, $312_1 = 0, $312$hi = 0, $313_1 = 0, $313$hi = 0, $314_1 = 0, $314$hi = 0, $320_1 = 0, $320$hi = 0, $321_1 = 0, $321$hi = 0, $326_1 = 0, $326$hi = 0, $333_1 = 0, $333$hi = 0, $334$hi = 0, $336_1 = 0, $337_1 = 0, $337$hi = 0, $339_1 = 0, $339$hi = 0, $342_1 = 0, $344$hi = 0, $345_1 = 0, $345$hi = 0, $348_1 = 0, $348$hi = 0, $349$hi = 0, $350$hi = 0, $354_1 = 0, $355$hi = 0, $356$hi = 0, $358_1 = 0, $359$hi = 0, $360$hi = 0, $367_1 = 0, $367$hi = 0, $371_1 = 0, $371$hi = 0, $372_1 = 0, $372$hi = 0, $376_1 = 0, $376$hi = 0, $379$hi = 0, $384_1 = 0, $384$hi = 0, $386_1 = 0, $386$hi = 0, $389_1 = 0, $391$hi = 0, $392_1 = 0, $392$hi = 0, $395_1 = 0, $395$hi = 0, $396$hi = 0, $397_1 = 0, $397$hi = 0, $398_1 = 0, $398$hi = 0, $411_1 = 0, $411$hi = 0, $418_1 = 0, $418$hi = 0, $419$hi = 0, $421_1 = 0, $422_1 = 0, $422$hi = 0, $424_1 = 0, $424$hi = 0, $427_1 = 0, $429$hi = 0, $430_1 = 0, $430$hi = 0, $433_1 = 0, $433$hi = 0, $434$hi = 0, $435$hi = 0, $439_1 = 0, $440$hi = 0, $441_1 = 0, $441$hi = 0, $446_1 = 0, $447$hi = 0, $452_1 = 0, $452$hi = 0, $454_1 = 0, $454$hi = 0, $456$hi = 0, $461_1 = 0, $461$hi = 0, $465_1 = 0, $465$hi = 0, $469_1 = 0, $469$hi = 0, $473_1 = 0, $474_1 = 0, $474$hi = 0, $475_1 = 0, $475$hi = 0, $478_1 = 0, $478$hi = 0, $484_1 = 0, $484$hi = 0, $488_1 = 0, $489$hi = 0, $490$hi = 0, $493_1 = 0, $493$hi = 0, $494_1 = 0, $494$hi = 0, $501_1 = 0, $501$hi = 0, $505_1 = 0, $507_1 = 0, $507$hi = 0, $509$hi = 0, $510_1 = 0, $510$hi = 0, $511_1 = 0, $511$hi = 0, $512_1 = 0, $512$hi = 0, $514$hi = 0, $518_1 = 0, $519$hi = 0, $520_1 = 0, $520$hi = 0, $521_1 = 0, $521$hi = 0, $530_1 = 0, $530$hi = 0, $534_1 = 0, $535_1 = 0, $535$hi = 0, $536_1 = 0, $536$hi = 0, $537_1 = 0, $537$hi = 0, $542_1 = 0, $542$hi = 0, $546_1 = 0, $547$hi = 0, $548$hi = 0, $552_1 = 0, $553$hi = 0, $554_1 = 0, $554$hi = 0, $555_1 = 0, $555$hi = 0, $562_1 = 0, $562$hi = 0, $567_1 = 0, $567$hi = 0, $572_1 = 0, $572$hi = 0, $575_1 = 0, $575$hi = 0, $578_1 = 0, $579$hi = 0, $582_1 = 0, $583$hi = 0, $584$hi = 0, $587_1 = 0, $588$hi = 0, $590$hi = 0, $591_1 = 0, $591$hi = 0, $595_1 = 0, $596$hi = 0, $597_1 = 0, $597$hi = 0, $598_1 = 0, $598$hi = 0, $599_1 = 0, $599$hi = 0, $606_1 = 0, $606$hi = 0, $609_1 = 0, $609$hi = 0, $612_1 = 0, $614$hi = 0, $615_1 = 0, $615$hi = 0, $620_1 = 0, $620$hi = 0, $621_1 = 0, $621$hi = 0, $623$hi = 0, $624$hi = 0, $626_1 = 0, $627$hi = 0, $628$hi = 0, $632_1 = 0, $633$hi = 0, $638$hi = 0, $647_1 = 0, $648$hi = 0, $649_1 = 0, $649$hi = 0, $652_1 = 0, $652$hi = 0, $658_1 = 0, $658$hi = 0, $659_1 = 0, $659$hi = 0, $663_1 = 0, $663$hi = 0, $668_1 = 0, $669$hi = 0, $670_1 = 0, $670$hi = 0, $672$hi = 0, $561_1 = 0, $674_1 = 0, $674$hi = 0, $677_1 = 0, $677$hi = 0, $678_1 = 0, $678$hi = 0, $679$hi = 0, $682_1 = 0, $682$hi = 0, $683_1 = 0, $683$hi = 0, $685_1 = 0, $685$hi = 0, $688_1 = 0, $690$hi = 0, $691_1 = 0, $691$hi = 0, $692_1 = 0, $692$hi = 0, $693_1 = 0, $693$hi = 0, $695$hi = 0, $696_1 = 0, $696$hi = 0, $697_1 = 0, $697$hi = 0, $699$hi = 0, $700_1 = 0, $700$hi = 0, $701$hi = 0, $704_1 = 0, $704$hi = 0, $705$hi = 0, $708_1 = 0, $708$hi = 0, $710$hi = 0, $711$hi = 0, $721_1 = 0, $721$hi = 0, $724_1 = 0, $724$hi = 0, $726$hi = 0, $736_1 = 0, $737$hi = 0, $738_1 = 0, $738$hi = 0, $741_1 = 0, $741$hi = 0, $742_1 = 0, $742$hi = 0, $747_1 = 0, $747$hi = 0, $748_1 = 0, $748$hi = 0, $750$hi = 0, $756_1 = 0, $756$hi = 0, $761_1 = 0, $762$hi = 0, $763_1 = 0, $763$hi = 0, $766_1 = 0, $766$hi = 0, $770$hi = 0, $563_1 = 0, $772_1 = 0, $772$hi = 0, $773$hi = 0, $776_1 = 0, $776$hi = 0, $777_1 = 0, $777$hi = 0, $778_1 = 0, $778$hi = 0, $780_1 = 0, $780$hi = 0, $783_1 = 0, $785$hi = 0, $786_1 = 0, $786$hi = 0, $787_1 = 0, $787$hi = 0, $788_1 = 0, $788$hi = 0, $790$hi = 0, $791_1 = 0, $791$hi = 0, $792_1 = 0, $792$hi = 0, $794$hi = 0, $795_1 = 0, $795$hi = 0, $796$hi = 0, $799_1 = 0, $799$hi = 0, $800$hi = 0, $803_1 = 0, $803$hi = 0, $805$hi = 0, $806$hi = 0, $822$hi = 0, $824_1 = 0, $824$hi = 0, $825_1 = 0, $825$hi = 0, $826_1 = 0, $826$hi = 0, $828$hi = 0, $830_1 = 0, $832_1 = 0, $832$hi = 0, $834$hi = 0, $838_1 = 0, $842_1 = 0, $843$hi = 0, $847_1 = 0, $848$hi = 0, $849$hi = 0, $865_1 = 0;
  $5_1 = global$0 - 192 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $456_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $456_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $456_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $457_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $457_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $457_1 & 32767 | 0;
      if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
       break label$4
      }
      $8_1 = 0;
      if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
       break label$3
      }
     }
     label$5 : {
      i64toi32_i32$0 = $1$hi;
      $48_1 = !($1_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      $52_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $52_1) {
       break label$5
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $12$hi = i64toi32_i32$0;
      break label$2;
     }
     label$6 : {
      i64toi32_i32$0 = $3$hi;
      $59_1 = !($3_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $63_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $59_1 : $63_1) {
       break label$6
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $12$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      $1_1 = $3_1;
      $1$hi = i64toi32_i32$0;
      break label$2;
     }
     label$7 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $72_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $72$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$1 = $72$hi;
      i64toi32_i32$2 = $72_1;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
       break label$7
      }
      label$8 : {
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $2$hi;
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = 2147418112;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $77$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $77$hi;
       i64toi32_i32$0 = $77_1;
       i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
       if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
        break label$8
       }
       i64toi32_i32$2 = 0;
       $1_1 = 0;
       $1$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 2147450880;
       $12_1 = 0;
       $12$hi = i64toi32_i32$2;
       break label$2;
      }
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$3;
      break label$2;
     }
     label$9 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $85_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $85$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $85$hi;
      i64toi32_i32$0 = $85_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$9
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$2;
     }
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     label$10 : {
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$10
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $12_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$2;
     }
     $8_1 = 0;
     label$11 : {
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$11
      }
      $101_1 = $5_1 + 176 | 0;
      i64toi32_i32$1 = $1$hi;
      $102_1 = $1_1;
      $102$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      $103_1 = $11_1;
      $103$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $11$hi;
      $8_1 = !($11_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = i64toi32_i32$4 ? $1_1 : $11_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
      i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$1 | 0) == (32 | 0)) {
       $458_1 = Math_clz32(i64toi32_i32$0) + 32 | 0
      } else {
       $458_1 = i64toi32_i32$1
      }
      $110$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $113$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $110$hi;
      i64toi32_i32$0 = $458_1;
      i64toi32_i32$3 = $113$hi;
      i64toi32_i32$1 = $8_1 << 6 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8_1 = i64toi32_i32$2;
      i64toi32_i32$5 = $102$hi;
      i64toi32_i32$0 = $103$hi;
      $1660($101_1 | 0, $102_1 | 0, i64toi32_i32$5 | 0, $103_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 + -15 | 0 | 0);
      $8_1 = 16 - i64toi32_i32$2 | 0;
      i64toi32_i32$4 = $5_1 + 184 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     $128_1 = $5_1 + 160 | 0;
     i64toi32_i32$4 = $3$hi;
     $129_1 = $3_1;
     $129$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $10$hi;
     $130_1 = $10_1;
     $130$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $10$hi;
     $9_1 = !($10_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $3_1 : $10_1;
     i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$4 : i64toi32_i32$0;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $459_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $459_1 = i64toi32_i32$4
     }
     $137$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $140$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $137$hi;
     i64toi32_i32$5 = $459_1;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$4 = $9_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $9_1 = i64toi32_i32$0;
     i64toi32_i32$2 = $129$hi;
     i64toi32_i32$5 = $130$hi;
     $1660($128_1 | 0, $129_1 | 0, i64toi32_i32$2 | 0, $130_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = (i64toi32_i32$0 + $8_1 | 0) + -16 | 0;
     i64toi32_i32$3 = $5_1 + 168 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$5;
    }
    $155_1 = $5_1 + 144 | 0;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 49;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $460_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $460_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $157_1 = $460_1;
    $157$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$3 = 65536;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $14$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
     $462_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $462_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    }
    $161$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $157$hi;
    i64toi32_i32$3 = $157_1;
    i64toi32_i32$2 = $161$hi;
    i64toi32_i32$4 = $462_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 1963258675;
    i64toi32_i32$5 = -102865788;
    i64toi32_i32$3 = $13$hi;
    i64toi32_i32$4 = $13_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = 0;
    $1672($155_1 | 0, $13_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($5_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $172_1 = i64toi32_i32$4;
    $172$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $172$hi;
    i64toi32_i32$0 = $172_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    $173$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $173$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = 0;
    $1672($5_1 + 128 | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $176_1 = $5_1 + 112 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 132 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $463_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $463_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $179_1 = $463_1;
    $179$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $464_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $464_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $184$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $179$hi;
    i64toi32_i32$5 = $179_1;
    i64toi32_i32$2 = $184$hi;
    i64toi32_i32$1 = $464_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$1 = 0;
    $1672($176_1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $194_1 = i64toi32_i32$1;
    $194$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $194$hi;
    i64toi32_i32$2 = $194_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$2 = 0;
    $1672($5_1 + 96 | 0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $197_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $466_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     $466_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $200_1 = $466_1;
    $200$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $467_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $467_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $205$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $200$hi;
    i64toi32_i32$5 = $200_1;
    i64toi32_i32$0 = $205$hi;
    i64toi32_i32$3 = $467_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$3 = 0;
    $1672($197_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 80 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $215_1 = i64toi32_i32$3;
    $215$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $215$hi;
    i64toi32_i32$0 = $215_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $216$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $216$hi;
    i64toi32_i32$0 = 0;
    $1672($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $218_1 = $5_1 + 48 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $468_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $468_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $221_1 = $468_1;
    $221$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $470_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $470_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $226$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $221$hi;
    i64toi32_i32$5 = $221_1;
    i64toi32_i32$2 = $226$hi;
    i64toi32_i32$4 = $470_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$4 = 0;
    $1672($218_1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $236_1 = i64toi32_i32$4;
    $236$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $236$hi;
    i64toi32_i32$2 = $236_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $237$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $237$hi;
    i64toi32_i32$2 = 0;
    $1672($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $239_1 = $5_1 + 16 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $471_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $471_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $242_1 = $471_1;
    $242$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $472_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $472_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $247$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$0 = $247$hi;
    i64toi32_i32$1 = $472_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$1 = 0;
    $1672($239_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $256_1 = i64toi32_i32$1;
    $256$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $256$hi;
    i64toi32_i32$0 = $256_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $257$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $257$hi;
    i64toi32_i32$0 = 0;
    $1672($5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
    label$12 : {
     label$13 : {
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 63;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $476_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $476_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $265_1 = $476_1;
      $265$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $477_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $477_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $265$hi;
      i64toi32_i32$5 = $265_1;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$3 = $477_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $4_1 = i64toi32_i32$1;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $2$hi = i64toi32_i32$0;
      $274_1 = $2_1;
      $274$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$4 = $14_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 17;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $479_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $479_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      i64toi32_i32$0 = $479_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      $15_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $274$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = __wasm_i64_mul($274_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$4;
      $280_1 = i64toi32_i32$0;
      $280$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $480_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       $480_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      $4_1 = $480_1;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $17_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $287_1 = i64toi32_i32$4;
      $287$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $280$hi;
      i64toi32_i32$0 = $280_1;
      i64toi32_i32$4 = $287$hi;
      i64toi32_i32$3 = $287_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $13_1 = i64toi32_i32$5;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $481_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $481_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $18_1 = $481_1;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $294_1 = i64toi32_i32$2;
      $294$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$1 = $18_1;
      i64toi32_i32$2 = $294$hi;
      i64toi32_i32$3 = $294_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $17_1 = i64toi32_i32$4;
      $17$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $18_1;
      $298_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $299_1 = $298_1;
      $299$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $482_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
       $482_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $301_1 = $482_1;
      $301$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$1 = $16_1;
      $304_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = $304_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
       $483_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
       $483_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      }
      $306$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $301$hi;
      i64toi32_i32$0 = $301_1;
      i64toi32_i32$1 = $306$hi;
      i64toi32_i32$3 = $483_1;
      i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $307_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $307$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $15_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $310_1 = i64toi32_i32$0;
      $310$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $307$hi;
      i64toi32_i32$5 = $307_1;
      i64toi32_i32$0 = $310$hi;
      i64toi32_i32$3 = $310_1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $311$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $299$hi;
      i64toi32_i32$1 = $299_1;
      i64toi32_i32$5 = $311$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $312_1 = i64toi32_i32$0;
      $312$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $17$hi;
      $313_1 = $17_1;
      $313$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      $314_1 = $2_1;
      $314$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$4 = $3_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 17;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $485_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
       $485_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      i64toi32_i32$2 = $485_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
      $15_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $314$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = __wasm_i64_mul($314_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$4;
      $320_1 = i64toi32_i32$2;
      $320$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      $321_1 = $4_1;
      $321$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 15;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
       $486_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
       $486_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      }
      i64toi32_i32$4 = $486_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -32768;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $18_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $321$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($321_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $326_1 = i64toi32_i32$4;
      $326$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $320$hi;
      i64toi32_i32$2 = $320_1;
      i64toi32_i32$4 = $326$hi;
      i64toi32_i32$3 = $326_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $13_1 = i64toi32_i32$5;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $487_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $487_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $19_1 = $487_1;
      $19$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $333_1 = i64toi32_i32$1;
      $333$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$1 = $333$hi;
      i64toi32_i32$3 = $333_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $334$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $334$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$3 = $19_1;
      $336_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $337_1 = $336_1;
      $337$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $489_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $489_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $339_1 = $489_1;
      $339$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$2 = $13_1;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$0 = $16_1;
      $342_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = $342_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
       $490_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
       $490_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      }
      $344$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $339$hi;
      i64toi32_i32$2 = $339_1;
      i64toi32_i32$0 = $344$hi;
      i64toi32_i32$3 = $490_1;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      $345_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $345$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $348_1 = i64toi32_i32$2;
      $348$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $345$hi;
      i64toi32_i32$5 = $345_1;
      i64toi32_i32$2 = $348$hi;
      i64toi32_i32$3 = $348_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $349$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $337$hi;
      i64toi32_i32$0 = $337_1;
      i64toi32_i32$5 = $349$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $350$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $313$hi;
      i64toi32_i32$4 = $313_1;
      i64toi32_i32$0 = $350$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $13_1 = i64toi32_i32$5;
      $13$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$3 = $17_1;
      $354_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $355$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $312$hi;
      i64toi32_i32$3 = $312_1;
      i64toi32_i32$2 = $355$hi;
      i64toi32_i32$4 = $354_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $356$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 0;
      $358_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = 0;
      $359$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $356$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$5 = $359$hi;
      i64toi32_i32$3 = $358_1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $360$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = $360$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $15_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$1;
      $367_1 = i64toi32_i32$0;
      $367$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$1;
      $371_1 = i64toi32_i32$0;
      $371$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      $372_1 = $2_1;
      $372$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $491_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $491_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $19_1 = $491_1;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $372$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = __wasm_i64_mul($372_1 | 0, i64toi32_i32$0 | 0, $19_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $376_1 = i64toi32_i32$2;
      $376$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $371$hi;
      i64toi32_i32$1 = $371_1;
      i64toi32_i32$2 = $376$hi;
      i64toi32_i32$3 = $376_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $17_1 = i64toi32_i32$4;
      $17$hi = i64toi32_i32$5;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $492_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
       $492_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $379$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $367$hi;
      i64toi32_i32$5 = $367_1;
      i64toi32_i32$0 = $379$hi;
      i64toi32_i32$3 = $492_1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $15_1 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$3 = $16_1;
      i64toi32_i32$1 = 0;
      $384_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      $384$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $495_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $495_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
      }
      $386_1 = $495_1;
      $386$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$5 = $18_1;
      $389_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = $389_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
       $496_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
       $496_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      }
      $391$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $386$hi;
      i64toi32_i32$1 = $386_1;
      i64toi32_i32$5 = $391$hi;
      i64toi32_i32$3 = $496_1;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $392_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $392$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $395_1 = i64toi32_i32$1;
      $395$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $392$hi;
      i64toi32_i32$4 = $392_1;
      i64toi32_i32$1 = $395$hi;
      i64toi32_i32$3 = $395_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $396$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $384$hi;
      i64toi32_i32$5 = $384_1;
      i64toi32_i32$4 = $396$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $397_1 = i64toi32_i32$1;
      $397$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      $398_1 = $15_1;
      $398$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
      $13_1 = i64toi32_i32$4;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $497_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
       $497_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      $17_1 = $497_1;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $411_1 = i64toi32_i32$1;
      $411$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$2 = $16_1;
      i64toi32_i32$1 = $411$hi;
      i64toi32_i32$3 = $411_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $13_1 = i64toi32_i32$5;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
       $498_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $498_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      }
      $19_1 = $498_1;
      $19$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $418_1 = i64toi32_i32$0;
      $418$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$4 = $19_1;
      i64toi32_i32$0 = $418$hi;
      i64toi32_i32$3 = $418_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $419$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $419$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$3 = $19_1;
      $421_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $422_1 = $421_1;
      $422$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $499_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       $499_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
      }
      $424_1 = $499_1;
      $424$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$2 = $13_1;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$4 = $16_1;
      $427_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = $427_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
       $500_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $500_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      }
      $429$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $424$hi;
      i64toi32_i32$2 = $424_1;
      i64toi32_i32$4 = $429$hi;
      i64toi32_i32$3 = $500_1;
      i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $430_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $430$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $433_1 = i64toi32_i32$2;
      $433$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $430$hi;
      i64toi32_i32$5 = $430_1;
      i64toi32_i32$2 = $433$hi;
      i64toi32_i32$3 = $433_1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $434$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $422$hi;
      i64toi32_i32$4 = $422_1;
      i64toi32_i32$5 = $434$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $435$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $398$hi;
      i64toi32_i32$1 = $398_1;
      i64toi32_i32$4 = $435$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$3 = $15_1;
      $439_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $440$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $397$hi;
      i64toi32_i32$3 = $397_1;
      i64toi32_i32$2 = $440$hi;
      i64toi32_i32$1 = $439_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $441_1 = i64toi32_i32$4;
      $441$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = -2;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      $446_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $447$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $441$hi;
      i64toi32_i32$1 = $441_1;
      i64toi32_i32$4 = $447$hi;
      i64toi32_i32$0 = $446_1;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $17_1 = i64toi32_i32$4;
      $17$hi = i64toi32_i32$3;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $2_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $2$hi = i64toi32_i32$5;
      $452_1 = $2_1;
      $452$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 62;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $502_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
       $502_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $454_1 = $502_1;
      $454$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$5 = $11_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
       $503_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
       $503_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      }
      $456$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $454$hi;
      i64toi32_i32$2 = $454_1;
      i64toi32_i32$5 = $456$hi;
      i64toi32_i32$0 = $503_1;
      i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $4_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $452$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($452_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $15_1 = i64toi32_i32$3;
      $15$hi = i64toi32_i32$2;
      $461_1 = i64toi32_i32$3;
      $461$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 30;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $504_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $504_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      i64toi32_i32$2 = $504_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $13_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $13$hi = i64toi32_i32$5;
      $465_1 = $13_1;
      $465$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $506_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
       $506_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $17_1 = $506_1;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $465$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = __wasm_i64_mul($465_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $469_1 = i64toi32_i32$3;
      $469$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $461$hi;
      i64toi32_i32$5 = $461_1;
      i64toi32_i32$3 = $469$hi;
      i64toi32_i32$0 = $469_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$0 = $15_1;
      $473_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $474_1 = $473_1;
      $474$hi = i64toi32_i32$2;
      i64toi32_i32$2 = i64toi32_i32$4;
      $475_1 = i64toi32_i32$1;
      $475$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$0 = $16_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $508_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
       $508_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $15_1 = $508_1;
      $15$hi = i64toi32_i32$4;
      $478_1 = $15_1;
      $478$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$2 = $11_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 30;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $509_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       $509_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
      }
      i64toi32_i32$4 = $509_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = -262145;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 262144;
      i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      $11_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $478$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = __wasm_i64_mul($478_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $484_1 = i64toi32_i32$0;
      $484$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $475$hi;
      i64toi32_i32$2 = $475_1;
      i64toi32_i32$0 = $484$hi;
      i64toi32_i32$5 = $484_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $19_1 = i64toi32_i32$3;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$5 = $18_1;
      $488_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $489$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $474$hi;
      i64toi32_i32$5 = $474_1;
      i64toi32_i32$1 = $489$hi;
      i64toi32_i32$2 = $488_1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $490$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $493_1 = i64toi32_i32$5;
      $493$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $490$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$5 = $493$hi;
      i64toi32_i32$2 = $493_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $494_1 = i64toi32_i32$1;
      $494$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$4;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $501_1 = i64toi32_i32$4;
      $501$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$3 = $20_1;
      i64toi32_i32$4 = $501$hi;
      i64toi32_i32$2 = $501_1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $18_1 = i64toi32_i32$5;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$2 = $20_1;
      $505_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $505_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $513_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $513_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $507_1 = $513_1;
      $507$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$0 = $18_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $514_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $514_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $509$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $507$hi;
      i64toi32_i32$1 = $507_1;
      i64toi32_i32$0 = $509$hi;
      i64toi32_i32$3 = $514_1;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $510_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $510$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $494$hi;
      i64toi32_i32$2 = $494_1;
      i64toi32_i32$1 = $510$hi;
      i64toi32_i32$3 = $510_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $511_1 = i64toi32_i32$4;
      $511$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      $512_1 = $19_1;
      $512$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$0 = $18_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
       $515_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $515_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      }
      $514$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $512$hi;
      i64toi32_i32$5 = $512_1;
      i64toi32_i32$0 = $514$hi;
      i64toi32_i32$3 = $515_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$3 = $19_1;
      $518_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $519$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $511$hi;
      i64toi32_i32$3 = $511_1;
      i64toi32_i32$4 = $519$hi;
      i64toi32_i32$5 = $518_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $520_1 = i64toi32_i32$0;
      $520$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      $521_1 = $18_1;
      $521$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$3;
      $20$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$2 = $16_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $16_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $530_1 = i64toi32_i32$2;
      $530$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$1 = $20_1;
      i64toi32_i32$2 = $530$hi;
      i64toi32_i32$5 = $530_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$5 = $20_1;
      $534_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $535_1 = $534_1;
      $535$hi = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$0;
      $536_1 = i64toi32_i32$4;
      $536$hi = i64toi32_i32$0;
      i64toi32_i32$3 = $2$hi;
      $537_1 = $2_1;
      $537$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 2;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
       $516_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
       $516_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      }
      i64toi32_i32$3 = $516_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = -4;
      i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $20_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $20$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $537$hi;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = __wasm_i64_mul($537_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $542_1 = i64toi32_i32$3;
      $542$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $536$hi;
      i64toi32_i32$0 = $536_1;
      i64toi32_i32$3 = $542$hi;
      i64toi32_i32$1 = $542_1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $21_1 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$1 = $19_1;
      $546_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $547$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $535$hi;
      i64toi32_i32$1 = $535_1;
      i64toi32_i32$4 = $547$hi;
      i64toi32_i32$0 = $546_1;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $548$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $521$hi;
      i64toi32_i32$5 = $521_1;
      i64toi32_i32$1 = $548$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$0 = $18_1;
      $552_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $553$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $520$hi;
      i64toi32_i32$0 = $520_1;
      i64toi32_i32$3 = $553$hi;
      i64toi32_i32$5 = $552_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $554_1 = i64toi32_i32$1;
      $554$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      $555_1 = $19_1;
      $555$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$0 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $562_1 = i64toi32_i32$0;
      $562$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$2 = $18_1;
      i64toi32_i32$0 = $562$hi;
      i64toi32_i32$5 = $562_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $567_1 = i64toi32_i32$2;
      $567$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $567$hi;
      i64toi32_i32$5 = $567_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $4_1 = i64toi32_i32$0;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $572_1 = i64toi32_i32$4;
      $572$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $572$hi;
      i64toi32_i32$5 = $572_1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $517_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $517_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $575_1 = $517_1;
      $575$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$0 = $17_1;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$5 = $18_1;
      $578_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $579$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$3 = $17_1;
      $582_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $583$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $579$hi;
      i64toi32_i32$3 = $578_1;
      i64toi32_i32$0 = $583$hi;
      i64toi32_i32$1 = $582_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $584$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      $587_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $588$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $584$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $588$hi;
      i64toi32_i32$3 = $587_1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
       $519_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $519_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      }
      $590$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $575$hi;
      i64toi32_i32$4 = $575_1;
      i64toi32_i32$5 = $590$hi;
      i64toi32_i32$3 = $519_1;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $591_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      $591$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $555$hi;
      i64toi32_i32$1 = $555_1;
      i64toi32_i32$4 = $591$hi;
      i64toi32_i32$3 = $591_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $17_1 = i64toi32_i32$2;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$5 = i64toi32_i32$2;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$3 = $19_1;
      $595_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $596$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $554$hi;
      i64toi32_i32$3 = $554_1;
      i64toi32_i32$0 = $596$hi;
      i64toi32_i32$1 = $595_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $597_1 = i64toi32_i32$4;
      $597$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $17$hi;
      $598_1 = $17_1;
      $598$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $21$hi;
      $599_1 = $21_1;
      $599$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$2 | 0, $13_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $606_1 = i64toi32_i32$3;
      $606$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$3 = $606$hi;
      i64toi32_i32$1 = $606_1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $13_1 = i64toi32_i32$0;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $522_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       $522_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
      }
      $609_1 = $522_1;
      $609$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$1 = $4_1;
      $612_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = $612_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
       $523_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
       $523_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      }
      $614$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $609$hi;
      i64toi32_i32$4 = $609_1;
      i64toi32_i32$1 = $614$hi;
      i64toi32_i32$2 = $523_1;
      i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $615_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $615$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $599$hi;
      i64toi32_i32$5 = $599_1;
      i64toi32_i32$4 = $615$hi;
      i64toi32_i32$2 = $615_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$2 = $21_1;
      i64toi32_i32$1 = 0;
      $620_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      $620$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$0;
      $621_1 = i64toi32_i32$3;
      $621$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $524_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $524_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $623$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $621$hi;
      i64toi32_i32$1 = $621_1;
      i64toi32_i32$2 = $623$hi;
      i64toi32_i32$5 = $524_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $624$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $624$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$5 = $4_1;
      $626_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $627$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $620$hi;
      i64toi32_i32$5 = $620_1;
      i64toi32_i32$3 = $627$hi;
      i64toi32_i32$1 = $626_1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $628$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $598$hi;
      i64toi32_i32$0 = $598_1;
      i64toi32_i32$5 = $628$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$1 = $17_1;
      $632_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $633$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $597$hi;
      i64toi32_i32$1 = $597_1;
      i64toi32_i32$2 = $633$hi;
      i64toi32_i32$0 = $632_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = 131071;
      i64toi32_i32$0 = -1;
      if (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$13
      }
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 49;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $525_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $525_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $638$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$4 = $4_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = -1;
      i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $1_1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = -1;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $13_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      $647_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = 0;
      $648$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $638$hi;
      i64toi32_i32$1 = $525_1;
      i64toi32_i32$4 = $648$hi;
      i64toi32_i32$3 = $647_1;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
      $649_1 = i64toi32_i32$2;
      $649$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
      $16_1 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$2;
      $652_1 = i64toi32_i32$4;
      $652$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $526_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $526_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $17_1 = $526_1;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$5;
      $18$hi = i64toi32_i32$0;
      $658_1 = i64toi32_i32$5;
      $658$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      $659_1 = $1_1;
      $659$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $527_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       $527_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
      }
      $15_1 = $527_1;
      $15$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $659$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = __wasm_i64_mul($659_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $663_1 = i64toi32_i32$2;
      $663$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $658$hi;
      i64toi32_i32$0 = $658_1;
      i64toi32_i32$2 = $663$hi;
      i64toi32_i32$3 = $663_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $11_1 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
       $528_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $528_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      }
      $19_1 = $528_1;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $652$hi;
      i64toi32_i32$4 = $652_1;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$3 = $19_1;
      $668_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $669$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $649$hi;
      i64toi32_i32$3 = $649_1;
      i64toi32_i32$0 = $669$hi;
      i64toi32_i32$5 = $668_1;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
      $670_1 = i64toi32_i32$2;
      $670$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $672$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $672$hi;
      $561_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = __wasm_i64_mul($561_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $674_1 = i64toi32_i32$4;
      $674$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $677_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
      $677$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$1 = $677$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $677_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $678_1 = i64toi32_i32$1;
      $678$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $674$hi;
      i64toi32_i32$3 = $674_1;
      i64toi32_i32$1 = $678$hi;
      i64toi32_i32$5 = $678_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $679$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $682_1 = i64toi32_i32$3;
      $682$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $679$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$3 = $682$hi;
      i64toi32_i32$5 = $682_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $683_1 = i64toi32_i32$1;
      $683$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$2 = $11_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $529_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $529_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
      }
      $685_1 = $529_1;
      $685$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$0 = $11_1;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$5 = $18_1;
      $688_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = $688_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
       $531_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
       $531_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
      }
      $690$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $685$hi;
      i64toi32_i32$0 = $685_1;
      i64toi32_i32$5 = $690$hi;
      i64toi32_i32$2 = $531_1;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $691_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $691$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $683$hi;
      i64toi32_i32$4 = $683_1;
      i64toi32_i32$0 = $691$hi;
      i64toi32_i32$2 = $691_1;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $692_1 = i64toi32_i32$3;
      $692$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $693_1 = $4_1;
      $693$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$5 = $14_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $532_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $532_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $695$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $693$hi;
      i64toi32_i32$5 = $695$hi;
      i64toi32_i32$5 = __wasm_i64_mul($693_1 | 0, i64toi32_i32$4 | 0, $532_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $696_1 = i64toi32_i32$5;
      $696$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      $697_1 = $3_1;
      $697$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $533_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
       $533_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
      }
      $699$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $697$hi;
      i64toi32_i32$1 = $699$hi;
      i64toi32_i32$1 = __wasm_i64_mul($697_1 | 0, i64toi32_i32$5 | 0, $533_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $700_1 = i64toi32_i32$1;
      $700$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $696$hi;
      i64toi32_i32$4 = $696_1;
      i64toi32_i32$1 = $700$hi;
      i64toi32_i32$2 = $700_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $701$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $704_1 = i64toi32_i32$4;
      $704$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $701$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$4 = $704$hi;
      i64toi32_i32$2 = $704_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $705$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$5 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $708_1 = i64toi32_i32$5;
      $708$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $705$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$5 = $708$hi;
      i64toi32_i32$2 = $708_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
       $538_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
       $538_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
      }
      $710$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $692$hi;
      i64toi32_i32$1 = $692_1;
      i64toi32_i32$0 = $710$hi;
      i64toi32_i32$2 = $538_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $711$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $670$hi;
      i64toi32_i32$3 = $670_1;
      i64toi32_i32$1 = $711$hi;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
      $13_1 = i64toi32_i32$0;
      $13$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$4 = $16_1;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
      $1_1 = i64toi32_i32$1;
      $1$hi = i64toi32_i32$0;
      $6_1 = $6_1 + -1 | 0;
      break label$12;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = $4_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 33;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $539_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $539_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
     }
     $15_1 = $539_1;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 48;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $540_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
      $540_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $721_1 = $540_1;
     $721$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $541_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
      $541_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
     }
     $16_1 = $541_1;
     $16$hi = i64toi32_i32$0;
     $724_1 = $16_1;
     $724$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
      $543_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $543_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     }
     $726$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $724$hi;
     i64toi32_i32$0 = $724_1;
     i64toi32_i32$5 = $726$hi;
     i64toi32_i32$2 = $543_1;
     i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $1_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $13_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $17_1 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     $736_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = 0;
     $737$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $721$hi;
     i64toi32_i32$2 = $721_1;
     i64toi32_i32$4 = $737$hi;
     i64toi32_i32$5 = $736_1;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     $738_1 = i64toi32_i32$3;
     $738$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$5 = $17_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$3;
     $741_1 = i64toi32_i32$4;
     $741$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     $742_1 = $1_1;
     $742$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $544_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      $544_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
     }
     $17_1 = $544_1;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $742$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = __wasm_i64_mul($742_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$0;
     $747_1 = i64toi32_i32$1;
     $747$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     $748_1 = $15_1;
     $748$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 31;
     i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      $545_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
      $545_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     }
     $750$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $748$hi;
     i64toi32_i32$0 = $748_1;
     i64toi32_i32$3 = $750$hi;
     i64toi32_i32$5 = $545_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $20_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $20$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $20_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $756_1 = i64toi32_i32$1;
     $756$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $747$hi;
     i64toi32_i32$3 = $747_1;
     i64toi32_i32$1 = $756$hi;
     i64toi32_i32$5 = $756_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $15_1 = i64toi32_i32$2;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $547_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $547_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $21_1 = $547_1;
     $21$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $741$hi;
     i64toi32_i32$4 = $741_1;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$5 = $21_1;
     $761_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $762$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $738$hi;
     i64toi32_i32$5 = $738_1;
     i64toi32_i32$3 = $762$hi;
     i64toi32_i32$0 = $761_1;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
     $763_1 = i64toi32_i32$1;
     $763$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $766_1 = i64toi32_i32$5;
     $766$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $548_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      $548_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
     }
     $11_1 = $548_1;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $770$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $770$hi;
     $563_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = __wasm_i64_mul($563_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $772_1 = i64toi32_i32$2;
     $772$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $766$hi;
     i64toi32_i32$5 = $766_1;
     i64toi32_i32$2 = $772$hi;
     i64toi32_i32$0 = $772_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $773$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$4 = $10_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $776_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
     $776$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $776$hi;
     i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $776_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $777_1 = i64toi32_i32$4;
     $777$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $773$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$4 = $777$hi;
     i64toi32_i32$0 = $777_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $778_1 = i64toi32_i32$2;
     $778$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$5 = $15_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $549_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      $549_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
     }
     $780_1 = $549_1;
     $780$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = $19$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     $783_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = $783_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $550_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $550_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $785$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $780$hi;
     i64toi32_i32$3 = $780_1;
     i64toi32_i32$0 = $785$hi;
     i64toi32_i32$5 = $550_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $786_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $786$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $778$hi;
     i64toi32_i32$1 = $778_1;
     i64toi32_i32$3 = $786$hi;
     i64toi32_i32$5 = $786_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $787_1 = i64toi32_i32$4;
     $787$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     $788_1 = $16_1;
     $788$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $551_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      $551_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $790$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $788$hi;
     i64toi32_i32$0 = $790$hi;
     i64toi32_i32$0 = __wasm_i64_mul($788_1 | 0, i64toi32_i32$1 | 0, $551_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $791_1 = i64toi32_i32$0;
     $791$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $792_1 = $3_1;
     $792$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 33;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $553_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $553_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
     }
     $794$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $792$hi;
     i64toi32_i32$2 = $794$hi;
     i64toi32_i32$2 = __wasm_i64_mul($792_1 | 0, i64toi32_i32$0 | 0, $553_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $795_1 = i64toi32_i32$2;
     $795$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $791$hi;
     i64toi32_i32$1 = $791_1;
     i64toi32_i32$2 = $795$hi;
     i64toi32_i32$5 = $795_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $796$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $799_1 = i64toi32_i32$1;
     $799$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $796$hi;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$1 = $799$hi;
     i64toi32_i32$5 = $799_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $800$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $803_1 = i64toi32_i32$0;
     $803$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $800$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = $803$hi;
     i64toi32_i32$5 = $803_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $556_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $556_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $805$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $787$hi;
     i64toi32_i32$2 = $787_1;
     i64toi32_i32$3 = $805$hi;
     i64toi32_i32$5 = $556_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $806$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $763$hi;
     i64toi32_i32$4 = $763_1;
     i64toi32_i32$2 = $806$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     $13_1 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$5 = $21_1;
     i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     $1_1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $11$hi;
     $2_1 = $11_1;
     $2$hi = i64toi32_i32$3;
    }
    label$14 : {
     $6_1 = $6_1 + 16383 | 0;
     if (($6_1 | 0) < (32767 | 0)) {
      break label$14
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = $12_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $12_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    label$15 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$15
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 48;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $557_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $557_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $822$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$5 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $824_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $824$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $822$hi;
    i64toi32_i32$0 = $557_1;
    i64toi32_i32$1 = $824$hi;
    i64toi32_i32$5 = $824_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $825_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    $825$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $826_1 = $4_1;
    $826$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $558_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $558_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $828$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $828$hi;
    i64toi32_i32$1 = $558_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$5 = $3_1;
    $830_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$5 = $13_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $559_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $559_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $832_1 = $559_1;
    $832$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $560_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $560_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $834$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $832$hi;
    i64toi32_i32$0 = $832_1;
    i64toi32_i32$1 = $834$hi;
    i64toi32_i32$3 = $560_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$3 = $14_1;
    $838_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $14_1;
    $842_1 = (i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) | 0 ? $830_1 : $838_1;
    i64toi32_i32$3 = 0;
    $843$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $826$hi;
    i64toi32_i32$0 = $826_1;
    i64toi32_i32$5 = $843$hi;
    i64toi32_i32$1 = $842_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $4_1;
    $847_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $848$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $825$hi;
    i64toi32_i32$1 = $825_1;
    i64toi32_i32$2 = $848$hi;
    i64toi32_i32$0 = $847_1;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $849$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = $849$hi;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$0 = $12_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $12_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $12$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $0_1;
   HEAP32[i64toi32_i32$3 >> 2] = $1_1;
   HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $12_1;
   HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$1;
   global$0 = $5_1 + 192 | 0;
   return;
  }
  i64toi32_i32$3 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$3 >> 2] = 0;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$4 = $3_1;
  i64toi32_i32$3 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = 2147450880;
  i64toi32_i32$4 = i64toi32_i32$2 ? $12_1 : 0;
  i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
  $865_1 = i64toi32_i32$4;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $865_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 192 | 0;
 }
 
 function $1666($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $6$hi = 0, $2_1 = 0, $4_1 = 0, $7_1 = 0, $7$hi = 0, $4$hi = 0, $3_1 = 0, $5$hi = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $5_1 = 0, $52_1 = 0, $52$hi = 0, $56$hi = 0, $65_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  wasm2js_scratch_store_f64(+$1_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $6_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$1 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     $22_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
     $22_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    }
    $7_1 = $22_1;
    $7$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $23_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $23_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
    }
    i64toi32_i32$5 = $23_1;
    i64toi32_i32$2 = 1006632960;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$1 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
     $24_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $7_1 = $24_1;
    $7$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $25_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     $25_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$4 = $25_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $6_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $6$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $6$hi;
    if (!!($6_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    break label$1;
   }
   label$5 : {
    label$6 : {
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$4 = 1;
     i64toi32_i32$5 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $26_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      $26_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
     }
     $3_1 = Math_clz32($26_1);
     break label$5;
    }
    i64toi32_i32$3 = $4$hi;
    $3_1 = Math_clz32($4_1) + 32 | 0;
   }
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$5 = 0;
   $1660($2_1 | 0, $6_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$1 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
   $52_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
   $52$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 48;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    $27_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $27_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
   }
   $56$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $52$hi;
   i64toi32_i32$5 = $52_1;
   i64toi32_i32$3 = $56$hi;
   i64toi32_i32$4 = $27_1;
   i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $6_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $6$hi = i64toi32_i32$3;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $7$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  $65_1 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $65_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1667($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $3_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $4_1 = 0, $33_1 = 0, $41_1 = 0, $41$hi = 0, $45$hi = 0, $51_1 = 0, $52_1 = 0, $52$hi = 0, $55$hi = 0, $56_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(0));
  $4_1 = $3_1 & -2147483648 | 0;
  label$1 : {
   label$2 : {
    $5_1 = $3_1 & 2147483647 | 0;
    if (($5_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $25_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($5_1 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $26_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $6_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($5_1) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $33_1 = $5_1;
   $5_1 = Math_clz32($5_1);
   i64toi32_i32$5 = 0;
   $1660($2_1 | 0, $33_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $5_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $41_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $41$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $5_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $27_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $27_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $45$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $41$hi;
   i64toi32_i32$5 = $41_1;
   i64toi32_i32$1 = $45$hi;
   i64toi32_i32$3 = $27_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $7$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $51_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $6$hi;
  $52_1 = $6_1;
  $52$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $28_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $28_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $55$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $52$hi;
  i64toi32_i32$5 = $52_1;
  i64toi32_i32$0 = $55$hi;
  i64toi32_i32$3 = $28_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $56_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $51_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $56_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1668($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 + $3_1 | 0) ^ $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $1660($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1669($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $19_1 = 0, $19$hi = 0, $23$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $1660($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1670($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $4_1 = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($3_1 & 64 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$3 = $3_1 + -64 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $1_1 = $18_1;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $2_1 = 0;
     $2$hi = i64toi32_i32$1;
     break label$2;
    }
    if (!$3_1) {
     break label$1
    }
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = 0;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$3 = 64 - $3_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $20_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $19_1 = $20_1;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = 0;
    $4_1 = $3_1;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $24$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $21_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $22_1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1671($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $14$hi = 0, $14_1 = 0, $12$hi = 0, $11$hi = 0, $10$hi = 0, $16$hi = 0, $12_1 = 0, $6_1 = 0, $16_1 = 0, $11_1 = 0, $10_1 = 0, $18$hi = 0, $8_1 = 0, $18_1 = 0, $13$hi = 0, $15$hi = 0, $17$hi = 0, $7_1 = 0, $13_1 = 0, $15_1 = 0, $17_1 = 0, $19$hi = 0, $22$hi = 0, $19_1 = 0, $9_1 = 0, $20$hi = 0, $21$hi = 0, $23$hi = 0, $24$hi = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $233_1 = 0, $234_1 = 0, $235_1 = 0, $237_1 = 0, $238_1 = 0, $239_1 = 0, $240_1 = 0, $241_1 = 0, $242_1 = 0, $244_1 = 0, $246_1 = 0, $248_1 = 0, $249_1 = 0, $251_1 = 0, $252_1 = 0, $254_1 = 0, $256_1 = 0, $20_1 = 0, $257_1 = 0, $258_1 = 0, $21_1 = 0, $22_1 = 0, $259_1 = 0, $24_1 = 0, $260_1 = 0, $261_1 = 0, $262_1 = 0, $263_1 = 0, $265_1 = 0, $266_1 = 0, $267_1 = 0, $268_1 = 0, $270_1 = 0, $271_1 = 0, $272_1 = 0, $273_1 = 0, $274_1 = 0, $275_1 = 0, $276_1 = 0, $278_1 = 0, $29_1 = 0, $29$hi = 0, $31$hi = 0, $34_1 = 0, $34$hi = 0, $36$hi = 0, $39_1 = 0, $39$hi = 0, $43$hi = 0, $70_1 = 0, $74_1 = 0, $81_1 = 0, $85_1 = 0, $94_1 = 0, $94$hi = 0, $106_1 = 0, $106$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $150_1 = 0, $150$hi = 0, $155$hi = 0, $162_1 = 0, $163_1 = 0, $163$hi = 0, $164_1 = 0, $164$hi = 0, $171$hi = 0, $174$hi = 0, $186_1 = 0, $186$hi = 0, $191$hi = 0, $194_1 = 0, $194$hi = 0, $196$hi = 0, $207_1 = 0, $207$hi = 0, $215_1 = 0, $215$hi = 0, $222_1 = 0, $222$hi = 0, $227_1 = 0, $227$hi = 0, $236_1 = 0, $236$hi = 0, $243_1 = 0, $243$hi = 0, $245_1 = 0, $245$hi = 0, $247_1 = 0, $247$hi = 0, $250_1 = 0, $252$hi = 0, $253_1 = 0, $253$hi = 0, $255_1 = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $269_1 = 0, $269$hi = 0, $277_1 = 0, $277$hi = 0, $280$hi = 0, $23_1 = 0, $296_1 = 0, $296$hi = 0, $300_1 = 0, $301_1 = 0, $301$hi = 0, $305_1 = 0, $305$hi = 0, $309_1 = 0, $310$hi = 0, $311_1 = 0, $311$hi = 0, $312_1 = 0, $312$hi = 0, $315_1 = 0, $316$hi = 0, $319_1 = 0, $320$hi = 0, $321$hi = 0, $325_1 = 0, $326$hi = 0, $327$hi = 0, $330_1 = 0, $330$hi = 0, $331_1 = 0, $331$hi = 0, $338_1 = 0, $338$hi = 0, $344_1 = 0, $344$hi = 0, $346$hi = 0, $347_1 = 0, $347$hi = 0, $348_1 = 0, $348$hi = 0, $349_1 = 0, $349$hi = 0, $351$hi = 0, $355_1 = 0, $356$hi = 0, $357_1 = 0, $357$hi = 0, $358_1 = 0, $358$hi = 0, $360_1 = 0, $360$hi = 0, $363_1 = 0, $364$hi = 0, $367_1 = 0, $368$hi = 0, $369$hi = 0, $372_1 = 0, $373$hi = 0, $375$hi = 0, $376_1 = 0, $376$hi = 0, $380_1 = 0, $381$hi = 0, $382_1 = 0, $382$hi = 0, $383_1 = 0, $383$hi = 0, $386_1 = 0, $387$hi = 0, $390_1 = 0, $391$hi = 0, $392$hi = 0, $396_1 = 0, $397$hi = 0, $407_1 = 0, $407$hi = 0, $409$hi = 0, $412_1 = 0, $412$hi = 0, $414$hi = 0, $418_1 = 0, $418$hi = 0, $420$hi = 0, $454_1 = 0, $454$hi = 0, $456_1 = 0, $456$hi = 0, $457_1 = 0, $457$hi = 0, $459_1 = 0, $459$hi = 0, $463_1 = 0, $463$hi = 0, $465_1 = 0, $466$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $484$hi = 0, $486_1 = 0, $486$hi = 0, $492_1 = 0, $498_1 = 0, $498$hi = 0, $503_1 = 0, $504$hi = 0, $508_1 = 0, $508$hi = 0, $512_1 = 0, $512$hi = 0, $515_1 = 0, $515$hi = 0, $519_1 = 0, $520$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $228_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $228_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $228_1;
  $29$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $229_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $229_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $31$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $29$hi;
  i64toi32_i32$1 = $29_1;
  i64toi32_i32$0 = $31$hi;
  i64toi32_i32$3 = $229_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $10_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $34_1 = $230_1;
  $34$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $36$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $34$hi;
  i64toi32_i32$1 = $34_1;
  i64toi32_i32$0 = $36$hi;
  i64toi32_i32$3 = $231_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $39_1 = $232_1;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $12_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $233_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $233_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $43$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $39$hi;
  i64toi32_i32$2 = $39_1;
  i64toi32_i32$1 = $43$hi;
  i64toi32_i32$3 = $233_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $14_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$2 = $12_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $234_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $234_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $15_1 = $234_1;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $16_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $16_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $235_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $235_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $17_1 = $235_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $237_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $237_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $237_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $238_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $238_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $238_1 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $1$hi;
     $70_1 = !($1_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $74_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $70_1 : $74_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $81_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $85_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $81_1 : $85_1) {
      break label$5
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $94_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $94$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $94$hi;
     i64toi32_i32$1 = $94_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $106_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $106$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = $106$hi;
     i64toi32_i32$2 = $106_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     label$9 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2_1 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $128_1 = $5_1 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $129_1 = $1_1;
     $129$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     $130_1 = $16_1;
     $130$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $16$hi;
     $8_1 = !($16_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $16_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $239_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $239_1 = i64toi32_i32$0
     }
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $140$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $137$hi;
     i64toi32_i32$3 = $239_1;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$0 = $8_1 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$2;
     i64toi32_i32$5 = $129$hi;
     i64toi32_i32$3 = $130$hi;
     $1660($128_1 | 0, $129_1 | 0, i64toi32_i32$5 | 0, $130_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $240_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $240_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $150_1 = $240_1;
     $150$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$3;
     $16$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $241_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $241_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $155$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $150$hi;
     i64toi32_i32$4 = $150_1;
     i64toi32_i32$5 = $155$hi;
     i64toi32_i32$0 = $241_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $242_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $242_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $17_1 = $242_1;
     $17$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $162_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $163_1 = $3_1;
    $163$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $164_1 = $12_1;
    $164$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $12$hi;
    $9_1 = !($12_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $12_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $244_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $244_1 = i64toi32_i32$5
    }
    $171$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $174$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $171$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$0 = $174$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$3 = $164$hi;
    $1660($162_1 | 0, $163_1 | 0, i64toi32_i32$2 | 0, $164_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $246_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $246_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $186_1 = $246_1;
    $186$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $248_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $191$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $186$hi;
    i64toi32_i32$1 = $186_1;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $249_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $249_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $194_1 = $249_1;
    $194$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $251_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $251_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $196$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $194$hi;
    i64toi32_i32$1 = $194_1;
    i64toi32_i32$2 = $196$hi;
    i64toi32_i32$5 = $251_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $252_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $252_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $15_1 = $252_1;
    $15$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$1;
   $19$hi = i64toi32_i32$2;
   $207_1 = i64toi32_i32$1;
   $207$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $254_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $254_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $254_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$1 = $11_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $215_1 = i64toi32_i32$1;
   $215$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$3 = $207_1;
   i64toi32_i32$1 = $215$hi;
   i64toi32_i32$5 = $215_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $256_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $256_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $12_1 = $256_1;
   $12$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $222_1 = i64toi32_i32$2;
   $222$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$2 = $222$hi;
   i64toi32_i32$5 = $222_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$3 = 0;
   $227_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $227$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $20_1 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$5 = $16_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $236_1 = i64toi32_i32$5;
   $236$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$5 = $236$hi;
   i64toi32_i32$4 = $236_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $18_1 = i64toi32_i32$2;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$0 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $16_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $16$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $243_1 = i64toi32_i32$0;
   $243$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $243$hi;
   i64toi32_i32$4 = $243_1;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $13_1 = i64toi32_i32$5;
   $13$hi = i64toi32_i32$2;
   $245_1 = i64toi32_i32$5;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $257_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $257_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $247_1 = $257_1;
   $247$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$4 = $19_1;
   $250_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $250_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $258_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $258_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $247$hi;
   i64toi32_i32$2 = $247_1;
   i64toi32_i32$4 = $252$hi;
   i64toi32_i32$3 = $258_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $253_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $253$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $245$hi;
   i64toi32_i32$1 = $245_1;
   i64toi32_i32$2 = $253$hi;
   i64toi32_i32$3 = $253_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $19_1 = i64toi32_i32$0;
   $19$hi = i64toi32_i32$5;
   $255_1 = i64toi32_i32$0;
   $255$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $17$hi;
   i64toi32_i32$4 = $17_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $264_1 = i64toi32_i32$4;
   $264$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$5 = $21_1;
   i64toi32_i32$4 = $264$hi;
   i64toi32_i32$3 = $264_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $17_1 = i64toi32_i32$2;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $269_1 = i64toi32_i32$5;
   $269$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$5 = $269$hi;
   i64toi32_i32$3 = $269_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $22_1 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $15$hi;
   i64toi32_i32$0 = $15_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $277_1 = i64toi32_i32$2;
   $277$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $277$hi;
   i64toi32_i32$3 = $277_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $15_1 = i64toi32_i32$5;
   $15$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $259_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $259_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $280$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $255$hi;
   i64toi32_i32$4 = $255_1;
   i64toi32_i32$0 = $280$hi;
   i64toi32_i32$3 = $259_1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $23_1 = i64toi32_i32$2;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $227$hi;
   i64toi32_i32$1 = $227_1;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$1;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $296_1 = i64toi32_i32$1;
     $296$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$5 = $24_1;
     i64toi32_i32$1 = $296$hi;
     i64toi32_i32$3 = $296_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$3 = $24_1;
     $300_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $301_1 = $300_1;
     $301$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $305_1 = i64toi32_i32$0;
     $305$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $305$hi;
     i64toi32_i32$5 = $305_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2_1;
     $309_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $310$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $301$hi;
     i64toi32_i32$5 = $301_1;
     i64toi32_i32$4 = $310$hi;
     i64toi32_i32$3 = $309_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $311_1 = i64toi32_i32$0;
     $311$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $312_1 = $3_1;
     $312$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $316$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$5 = $18_1;
     $319_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $320$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $316$hi;
     i64toi32_i32$5 = $315_1;
     i64toi32_i32$2 = $320$hi;
     i64toi32_i32$1 = $319_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $321$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $312$hi;
     i64toi32_i32$3 = $312_1;
     i64toi32_i32$5 = $321$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $325_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $326$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $311$hi;
     i64toi32_i32$1 = $311_1;
     i64toi32_i32$4 = $326$hi;
     i64toi32_i32$3 = $325_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $327$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $330_1 = i64toi32_i32$1;
     $330$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $327$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $330$hi;
     i64toi32_i32$3 = $330_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $331_1 = i64toi32_i32$4;
     $331$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $338_1 = i64toi32_i32$0;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = $338$hi;
     i64toi32_i32$3 = $338_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $260_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $260_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $344_1 = $260_1;
     $344$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $261_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $261_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $346$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $344$hi;
     i64toi32_i32$4 = $344_1;
     i64toi32_i32$5 = $346$hi;
     i64toi32_i32$2 = $261_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $347_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $331$hi;
     i64toi32_i32$3 = $331_1;
     i64toi32_i32$4 = $347$hi;
     i64toi32_i32$2 = $347_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $348_1 = i64toi32_i32$0;
     $348$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $349_1 = $2_1;
     $349$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $262_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $262_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $349$hi;
     i64toi32_i32$1 = $349_1;
     i64toi32_i32$5 = $351$hi;
     i64toi32_i32$2 = $262_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2_1;
     $355_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $356$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $348$hi;
     i64toi32_i32$2 = $348_1;
     i64toi32_i32$0 = $356$hi;
     i64toi32_i32$1 = $355_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $357_1 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $358_1 = $1_1;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $263_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $263_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $360_1 = $263_1;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$4 = $17_1;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21_1;
     $363_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$3 = $17_1;
     $367_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $368$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = $363_1;
     i64toi32_i32$4 = $368$hi;
     i64toi32_i32$2 = $367_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $369$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$1 = $15_1;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$2 = $22_1;
     $372_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $373$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $369$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $373$hi;
     i64toi32_i32$3 = $372_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $265_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $265_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $375$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $360$hi;
     i64toi32_i32$0 = $360_1;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$3 = $265_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $376_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$2 = $358_1;
     i64toi32_i32$0 = $376$hi;
     i64toi32_i32$3 = $376_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     $380_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $381$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $357$hi;
     i64toi32_i32$3 = $357_1;
     i64toi32_i32$4 = $381$hi;
     i64toi32_i32$2 = $380_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $382_1 = i64toi32_i32$0;
     $382$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     $383_1 = $3_1;
     $383$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$2 = $13_1;
     $386_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$2 = $23_1;
     i64toi32_i32$3 = $19_1;
     $390_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $391$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $387$hi;
     i64toi32_i32$3 = $386_1;
     i64toi32_i32$1 = $391$hi;
     i64toi32_i32$5 = $390_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $392$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $383$hi;
     i64toi32_i32$2 = $383_1;
     i64toi32_i32$3 = $392$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     $396_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $397$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = $382_1;
     i64toi32_i32$4 = $397$hi;
     i64toi32_i32$2 = $396_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$5 = 65536;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $266_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $266_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $266_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $267_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $267_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $407_1 = $267_1;
    $407$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $268_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $268_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $409$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $407$hi;
    i64toi32_i32$1 = $407_1;
    i64toi32_i32$0 = $409$hi;
    i64toi32_i32$2 = $268_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $270_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $270_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $412_1 = $270_1;
    $412$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $271_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $271_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $414$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $412$hi;
    i64toi32_i32$1 = $412_1;
    i64toi32_i32$0 = $414$hi;
    i64toi32_i32$2 = $271_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$5 = $11_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $272_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $272_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $11_1 = $272_1;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $418_1 = $3_1;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $273_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $273_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $418$hi;
    i64toi32_i32$1 = $418_1;
    i64toi32_i32$0 = $420$hi;
    i64toi32_i32$2 = $273_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$5 = $14_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 > 127 >>> 0) {
       break label$18
      }
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$5 = $4$hi;
      $1670($5_1 + 16 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $1$hi;
      $6_1 = $6_1 + 127 | 0;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$1 = $1$hi;
      $1660($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0);
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$5 = $4$hi;
      $1660($5_1 + 48 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0);
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$1 = $1$hi;
      $1670($5_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      $454_1 = i64toi32_i32$1;
      $454$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      $456_1 = i64toi32_i32$5;
      $456$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $454$hi;
      i64toi32_i32$0 = $454_1;
      i64toi32_i32$5 = $456$hi;
      i64toi32_i32$2 = $456_1;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $457_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $457$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
      $459_1 = i64toi32_i32$5;
      $459$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $463_1 = i64toi32_i32$0;
      $463$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $459$hi;
      i64toi32_i32$1 = $459_1;
      i64toi32_i32$0 = $463$hi;
      i64toi32_i32$2 = $463_1;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      $465_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = 0;
      $466$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $457$hi;
      i64toi32_i32$2 = $457_1;
      i64toi32_i32$0 = $466$hi;
      i64toi32_i32$1 = $465_1;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      $11_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $11$hi = i64toi32_i32$0;
      i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $471_1 = i64toi32_i32$0;
      $471$hi = i64toi32_i32$2;
      i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $475_1 = i64toi32_i32$2;
      $475$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $471$hi;
      i64toi32_i32$5 = $471_1;
      i64toi32_i32$2 = $475$hi;
      i64toi32_i32$1 = $475_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $5_1 + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$2;
      break label$16;
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $274_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $274_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $484$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $486_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $486$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $484$hi;
    i64toi32_i32$5 = $274_1;
    i64toi32_i32$2 = $486$hi;
    i64toi32_i32$1 = $486_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$1 = $14_1;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $14_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $14$hi = i64toi32_i32$5;
   label$19 : {
    i64toi32_i32$5 = $11$hi;
    $492_1 = !($11_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $275_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $276_1 = 0
      } else {
       $276_1 = 1
      }
      $278_1 = $276_1;
     } else {
      $278_1 = 0
     }
     $275_1 = $278_1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $492_1 : $275_1) {
     break label$19
    }
    i64toi32_i32$1 = $14$hi;
    $498_1 = $14_1;
    $498$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    $503_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $498$hi;
    i64toi32_i32$5 = $498_1;
    i64toi32_i32$3 = $504$hi;
    i64toi32_i32$0 = $503_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14_1 = i64toi32_i32$2;
    $14$hi = i64toi32_i32$4;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    $508_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $508$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$1 = $508$hi;
    i64toi32_i32$0 = $508_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$5 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $14$hi;
   $512_1 = $14_1;
   $512$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $515_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $515$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $515$hi;
   i64toi32_i32$4 = $515_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $519_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $520$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $512$hi;
   i64toi32_i32$4 = $512_1;
   i64toi32_i32$2 = $520$hi;
   i64toi32_i32$5 = $519_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $14_1 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $14$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $1672($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $46_1;
  $4$hi = i64toi32_i32$2;
  $16_1 = $4_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $48_1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3_1 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $1673($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $1659($5_1 | 0, $1_1 | 0, $1$hi | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$3;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $1$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 16 | 0;
 }
 
 function $1674($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $42_1 = 0, $43_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $33$hi = 0, $37_1 = 0, $39_1 = 0, $44_1 = 0, $44$hi = 0, $46$hi = 0, $74_1 = 0, $74$hi = 0, $78$hi = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $100$hi = 0, $107_1 = 0, $107$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $42_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $42_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $42_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $43_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $43_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $43_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $33$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$5 = $33$hi;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37_1 : $39_1) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $45_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $45_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44_1 = $45_1;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $46_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $46_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44_1;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $46_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $47_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $47_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $47_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   $1670($2_1 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $1660($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $48_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74_1 = $48_1;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $49_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $49_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $49_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83_1;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81_1;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $1675($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $3_1 = 0, $5$hi = 0, $2_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $20_1 = 0, $24_1 = 0, $34_1 = 0, $34$hi = 0, $42_1 = 0, $44_1 = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $93_1 = 0, $97_1 = 0, $105_1 = 0, $105$hi = 0, $114_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = $1_1 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $37_1;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20_1 = !($0_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $5_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20_1 : $24_1) {
      break label$3
     }
     $3_1 = $3_1 + 1073741825 | 0;
     break label$1;
    }
    $3_1 = $3_1 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $3_1 = ($3_1 & 1 | 0) + $3_1 | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42_1 : $44_1) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $38_1 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $3_1 = 2139095040;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $3_1 = 0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4_1 = $39_1;
   if ($4_1 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   $1670($2_1 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, 16257 - $4_1 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   $1660($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0, $4_1 + -16129 | 0 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $3_1 = $40_1;
   label$5 : {
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83_1;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81_1;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93_1 = !($0_1 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $5_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93_1 : $97_1) {
     break label$5
    }
    $3_1 = $3_1 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $3_1 = ($3_1 & 1 | 0) + $3_1 | 0;
  }
  global$0 = $2_1 + 32 | 0;
  $114_1 = $3_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(0, $114_1 | ($41_1 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function $1676($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $10$hi = 0, $10_1 = 0, $11$hi = 0, $8_1 = 0, $11_1 = 0, i64toi32_i32$6 = 0, $13$hi = 0, $6_1 = 0, $13_1 = 0, $9_1 = 0, $12$hi = 0, $63_1 = 0, $7_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $12_1 = 0, $69_1 = 0, $70_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $54_1 = 0, $54$hi = 0, $57$hi = 0, $59_1 = 0, $59$hi = 0, $61_1 = 0, $61$hi = 0, $62_1 = 0, $62$hi = 0, $69$hi = 0, $71_1 = 0, $71$hi = 0, $130$hi = 0, $133_1 = 0, $134$hi = 0, $174_1 = 0, $174$hi = 0, $179_1 = 0, $180$hi = 0, $217_1 = 0, $217$hi = 0, $219$hi = 0, $228_1 = 0, $229_1 = 0, $229$hi = 0, $231_1 = 0, $231$hi = 0, $237$hi = 0, $238_1 = 0, $238$hi = 0, $245_1 = 0, $245$hi = 0, $250$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($1663($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6_1 = $1678($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $63_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $63_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $63_1;
     $8_1 = $7_1 & 32767 | 0;
     if (($8_1 | 0) == (32767 | 0)) {
      break label$3
     }
     if ($6_1) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $1671($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $1665($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $54_1 = $1_1;
    $54$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $64_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $64_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $57$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $59_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $59$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $57$hi;
    i64toi32_i32$1 = $64_1;
    i64toi32_i32$3 = $59$hi;
    i64toi32_i32$0 = $59_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $10_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$3;
    $61_1 = $10_1;
    $61$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $62_1 = $3_1;
    $62$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $65_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $65_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9_1 = $65_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $66_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $66_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $69$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $71_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $71$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $69$hi;
    i64toi32_i32$2 = $66_1;
    i64toi32_i32$1 = $71$hi;
    i64toi32_i32$0 = $71_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $11_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $54$hi;
    i64toi32_i32$2 = $61$hi;
    i64toi32_i32$3 = $62$hi;
    i64toi32_i32$0 = $11$hi;
    if (($1661($54_1 | 0, i64toi32_i32$1 | 0, $61_1 | 0, i64toi32_i32$2 | 0, $62_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $11$hi;
     if (!($1664($1_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $11_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $1671($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$8_1) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $1671($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $67_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $67_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $67_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($9_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $1671($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $68_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9_1 = $68_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $10_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $10$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$0 = $11_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$2 = $12$hi;
   i64toi32_i32$3 = $12_1;
   i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $130$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$3 = $3_1;
   $133_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $134$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $130$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = $134$hi;
   i64toi32_i32$1 = $133_1;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
   $13_1 = i64toi32_i32$2;
   $13$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = -1;
   if ((i64toi32_i32$4 | 0) > (i64toi32_i32$3 | 0)) {
    $69_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$1 >>> 0) {
      $70_1 = 0
     } else {
      $70_1 = 1
     }
     $72_1 = $70_1;
    } else {
     $72_1 = 0
    }
    $69_1 = $72_1;
   }
   $6_1 = $69_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $11_1 = i64toi32_i32$5;
   $11$hi = i64toi32_i32$2;
   label$9 : {
    if (($8_1 | 0) <= ($9_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($6_1 & 1 | 0)) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$2 = $13$hi;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$2 = $13$hi;
        i64toi32_i32$0 = $13_1;
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $1671($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$1 = $11_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $73_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $73_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $10_1 = $73_1;
       $10$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$0 = $13_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $74_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $74_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       }
       $13_1 = $74_1;
       $13$hi = i64toi32_i32$1;
       break label$11;
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $75_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $75_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $13_1 = $75_1;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $10_1 = $76_1;
      $10$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      $11_1 = $4_1;
      $11$hi = i64toi32_i32$3;
     }
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $10_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
     $174_1 = i64toi32_i32$4;
     $174$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$1 = $11_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $77_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $77_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $4_1 = $77_1;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$5 = $4_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $179_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $180$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $174$hi;
     i64toi32_i32$2 = $174_1;
     i64toi32_i32$3 = $180$hi;
     i64toi32_i32$1 = $179_1;
     i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     $13_1 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $78_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $79_1 = 0
       } else {
        $79_1 = 1
       }
       $80_1 = $79_1;
      } else {
       $80_1 = 0
      }
      $78_1 = $80_1;
     }
     $6_1 = $78_1;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$0;
     $8_1 = $8_1 + -1 | 0;
     if (($8_1 | 0) > ($9_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
   }
   label$14 : {
    if (!$6_1) {
     break label$14
    }
    i64toi32_i32$0 = $13$hi;
    $10_1 = $13_1;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    $4_1 = $11_1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    $1671($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $5_1 + 56 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$5;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$5;
    break label$1;
   }
   label$15 : {
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$15
    }
    label$16 : while (1) {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $81_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $81_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $81_1;
     $3$hi = i64toi32_i32$5;
     $8_1 = $8_1 + -1 | 0;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $82_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $82_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $82_1;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $217_1 = $3_1;
     $217$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $83_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $83_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $219$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $217$hi;
     i64toi32_i32$0 = $217_1;
     i64toi32_i32$5 = $219$hi;
     i64toi32_i32$2 = $83_1;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$16
     }
     break label$16;
    };
   }
   $6_1 = $7_1 & 32768 | 0;
   label$17 : {
    if (($8_1 | 0) > (0 | 0)) {
     break label$17
    }
    $228_1 = $5_1 + 64 | 0;
    i64toi32_i32$1 = $4$hi;
    $229_1 = $4_1;
    $229$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $231_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $231$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $8_1 + 120 | 0 | $6_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $84_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $84_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $237$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $231$hi;
    i64toi32_i32$5 = $231_1;
    i64toi32_i32$1 = $237$hi;
    i64toi32_i32$0 = $84_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $238_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $238$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $229$hi;
    i64toi32_i32$5 = $238$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1065811968;
    $1671($228_1 | 0, $229_1 | 0, i64toi32_i32$1 | 0, $238_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = $5_1 + 72 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $245_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = $8_1 | $6_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $85_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $85_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $250$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $245$hi;
   i64toi32_i32$2 = $245_1;
   i64toi32_i32$0 = $250$hi;
   i64toi32_i32$1 = $85_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $1677($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $35_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     $2_1 = $1_1 + -1023 | 0;
     if (($2_1 | 0) >= (1024 | 0)) {
      break label$3
     }
     $1_1 = $2_1;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    $2_1 = $1_1 + 1022 | 0;
    if (($2_1 | 0) <= (-1023 | 0)) {
     break label$4
    }
    $1_1 = $2_1;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $35_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $9_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $9_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $9_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($35_1 * +wasm2js_scratch_load_f64());
 }
 
 function $1678($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4$hi = 0, $4_1 = 0, $13_1 = 0, $2_1 = 0, $3_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $13_1 & 32767 | 0;
    if (($2_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $3_1 = 4;
    if ($2_1) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $3_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1679($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 8192 >>> 0) {
    break label$1
   }
   fimport$22($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($0_1 & 3 | 0) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 >= $3_1 >>> 0) {
       break label$4
      }
      if ($2_1 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $1680($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5_1 = 0, $14_1 = 0, $104$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6_1 = $1_1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6_1 = i64toi32_i32$0 | $6_1 | 0;
   $6$hi = i64toi32_i32$2;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1681($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (($1_1 + $2_1 | 0) >>> 0 <= $0_1 >>> 0) {
      break label$3
     }
     $3_1 = $0_1 + $2_1 | 0;
     if ($3_1 >>> 0 > $1_1 >>> 0) {
      break label$2
     }
    }
    return $1679($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   }
   $4_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
   label$4 : {
    label$5 : {
     label$6 : {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$6
      }
      label$7 : {
       if (!$4_1) {
        break label$7
       }
       $4_1 = $0_1;
       break label$4;
      }
      label$8 : {
       if ($0_1 & 3 | 0) {
        break label$8
       }
       $4_1 = $0_1;
       break label$5;
      }
      $4_1 = $0_1;
      label$9 : while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$4_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $4_1 = $4_1 + 1 | 0;
       if (!($4_1 & 3 | 0)) {
        break label$5
       }
       continue label$9;
      };
     }
     label$10 : {
      if ($4_1) {
       break label$10
      }
      label$11 : {
       if (!($3_1 & 3 | 0)) {
        break label$11
       }
       label$12 : while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $4_1 = $0_1 + $2_1 | 0;
        HEAP8[$4_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($4_1 & 3 | 0) {
         continue label$12
        }
        break label$12;
       };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
       break label$10
      }
      label$13 : while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$13
       }
       break label$13;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$14 : while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if ($2_1) {
       continue label$14
      }
      break label$1;
     };
    }
    if ($2_1 >>> 0 <= 3 >>> 0) {
     break label$4
    }
    $3_1 = $2_1;
    label$15 : while (1) {
     HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $4_1 = $4_1 + 4 | 0;
     $3_1 = $3_1 + -4 | 0;
     if ($3_1 >>> 0 > 3 >>> 0) {
      continue label$15
     }
     break label$15;
    };
    $2_1 = $2_1 & 3 | 0;
   }
   if (!$2_1) {
    break label$1
   }
   label$16 : while (1) {
    HEAP8[$4_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$16
    }
    break label$16;
   };
  }
  return $0_1 | 0;
 }
 
 function $1682($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAP32[(0 + 134224608 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 134224612 | 0) >> 2] = $1_1;
   HEAP32[(0 + 134224608 | 0) >> 2] = $0_1;
  }
 }
 
 function $1683() {
  return global$0 | 0;
 }
 
 function $1684($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $1685($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $1686($0_1) {
  $0_1 = $0_1 | 0;
  return abort() | 0;
 }
 
 function $1687($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1);
 }
 
 function $1688($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1) | 0 | 0;
 }
 
 function $1689($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1);
 }
 
 function $1690($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $1691($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $5_1);
 }
 
 function $1692($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1);
 }
 
 function $1693($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1) | 0 | 0;
 }
 
 function $1694($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1695($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1) | 0 | 0;
 }
 
 function $1696($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $1697($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1) | 0 | 0;
 }
 
 function $1698($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) | 0 | 0;
 }
 
 function $1699($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1) | 0 | 0;
 }
 
 function $1700($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $1701($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1) | 0 | 0;
 }
 
 function $1702($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0, $6_1, $6$hi) | 0 | 0;
 }
 
 function $1703($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1704($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $6$hi, $7_1, $7$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  $7_1 = $7_1 | 0;
  $7$hi = $7$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, i64toi32_i32$0, $7_1, $7$hi) | 0 | 0;
 }
 
 function $1705($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1);
 }
 
 function $1706($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[$0_1]();
 }
 
 function $1707($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $1708($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  i64toi32_i32$0 = 0;
  $11_1 = $3_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $18_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $1691($7_1 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $5_1 | 0, $6_1 | 0);
 }
 
 function $1709($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $1694($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$23($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $1710($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $13$hi = 0, $16$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  $10_1 = $3_1;
  $11_1 = $4_1;
  i64toi32_i32$0 = 0;
  $13_1 = $5_1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$0 = $13_1;
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $1700($7_1 | 0, $8_1 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1711($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $29_1 = 0, $30_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $15$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $21_1 = 0, $21$hi = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0;
  $9_1 = $0_1;
  $10_1 = $1_1;
  $11_1 = $2_1;
  $12_1 = $3_1;
  $13_1 = $4_1;
  i64toi32_i32$0 = 0;
  $15_1 = $5_1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $29_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$3 = $29_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $19_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $21_1 = $7_1;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $30_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $30_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $24$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$2 = $21_1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$3 = $30_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $25_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $25$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$2 = $25$hi;
  return $1702($9_1 | 0, $10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1712($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $31_1 = 0, $32_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $17$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $23_1 = 0, $23$hi = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0;
  $10_1 = $0_1;
  $11_1 = $1_1;
  $12_1 = $2_1;
  $13_1 = $3_1;
  $14_1 = $4_1;
  $15_1 = $5_1;
  i64toi32_i32$0 = 0;
  $17_1 = $6_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $31_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $31_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$0 = $17_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $23_1 = $8_1;
  $23$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $9_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $32_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $32_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $26$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$2 = $23_1;
  i64toi32_i32$1 = $26$hi;
  i64toi32_i32$3 = $32_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $27_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $27$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$2 = $27$hi;
  return $1704($10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0;
  i64toi32_i32$0 = $0$hi;
  $2_1 = $0_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  legalimport$wasm2js_scratch_store_i64($2_1 | 0, $8_1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             legalfunc$wasm2js_scratch_store_i64(var$0 - Math_imul(var$2, var$3) | 0 | 0, i64toi32_i32$1 | 0);
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            legalfunc$wasm2js_scratch_store_i64(i64toi32_i32$3 | i64toi32_i32$0 | 0 | 0, i64toi32_i32$1 | 0);
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        legalfunc$wasm2js_scratch_store_i64($41_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      legalfunc$wasm2js_scratch_store_i64(var$4 & var$0 | 0 | 0, i64toi32_i32$2 | 0);
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    legalfunc$wasm2js_scratch_store_i64(var$5 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   legalfunc$wasm2js_scratch_store_i64(var$0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS;
 FUNCTION_TABLE[1] = $4;
 FUNCTION_TABLE[2] = $11;
 FUNCTION_TABLE[3] = $18;
 FUNCTION_TABLE[4] = $37;
 FUNCTION_TABLE[5] = $1619;
 FUNCTION_TABLE[6] = $266;
 FUNCTION_TABLE[7] = $267;
 FUNCTION_TABLE[8] = $269;
 FUNCTION_TABLE[9] = $270;
 FUNCTION_TABLE[10] = $271;
 FUNCTION_TABLE[11] = $273;
 FUNCTION_TABLE[12] = $274;
 FUNCTION_TABLE[13] = $275;
 FUNCTION_TABLE[14] = $276;
 FUNCTION_TABLE[15] = $282;
 FUNCTION_TABLE[16] = $283;
 FUNCTION_TABLE[17] = $285;
 FUNCTION_TABLE[18] = $286;
 FUNCTION_TABLE[19] = $287;
 FUNCTION_TABLE[20] = $288;
 FUNCTION_TABLE[21] = $289;
 FUNCTION_TABLE[22] = $291;
 FUNCTION_TABLE[23] = $292;
 FUNCTION_TABLE[24] = $293;
 FUNCTION_TABLE[25] = $294;
 FUNCTION_TABLE[26] = $295;
 FUNCTION_TABLE[27] = $296;
 FUNCTION_TABLE[28] = $297;
 FUNCTION_TABLE[29] = $301;
 FUNCTION_TABLE[30] = $303;
 FUNCTION_TABLE[31] = $305;
 FUNCTION_TABLE[32] = $306;
 FUNCTION_TABLE[33] = $307;
 FUNCTION_TABLE[34] = $309;
 FUNCTION_TABLE[35] = $311;
 FUNCTION_TABLE[36] = $310;
 FUNCTION_TABLE[37] = $312;
 FUNCTION_TABLE[38] = $332;
 FUNCTION_TABLE[39] = $334;
 FUNCTION_TABLE[40] = $333;
 FUNCTION_TABLE[41] = $335;
 FUNCTION_TABLE[42] = $357;
 FUNCTION_TABLE[43] = $359;
 FUNCTION_TABLE[44] = $358;
 FUNCTION_TABLE[45] = $360;
 FUNCTION_TABLE[46] = $373;
 FUNCTION_TABLE[47] = $375;
 FUNCTION_TABLE[48] = $374;
 FUNCTION_TABLE[49] = $376;
 FUNCTION_TABLE[50] = $261;
 FUNCTION_TABLE[51] = $383;
 FUNCTION_TABLE[52] = $260;
 FUNCTION_TABLE[53] = $263;
 FUNCTION_TABLE[54] = $264;
 FUNCTION_TABLE[55] = $265;
 FUNCTION_TABLE[56] = $395;
 FUNCTION_TABLE[57] = $396;
 FUNCTION_TABLE[58] = $397;
 FUNCTION_TABLE[59] = $398;
 FUNCTION_TABLE[60] = $399;
 FUNCTION_TABLE[61] = $415;
 FUNCTION_TABLE[62] = $439;
 FUNCTION_TABLE[63] = $440;
 FUNCTION_TABLE[64] = $442;
 FUNCTION_TABLE[65] = $444;
 FUNCTION_TABLE[66] = $445;
 FUNCTION_TABLE[67] = $451;
 FUNCTION_TABLE[68] = $452;
 FUNCTION_TABLE[69] = $454;
 FUNCTION_TABLE[70] = $456;
 FUNCTION_TABLE[71] = $457;
 FUNCTION_TABLE[72] = $460;
 FUNCTION_TABLE[73] = $461;
 FUNCTION_TABLE[74] = $462;
 FUNCTION_TABLE[75] = $464;
 FUNCTION_TABLE[76] = $465;
 FUNCTION_TABLE[77] = $467;
 FUNCTION_TABLE[78] = $468;
 FUNCTION_TABLE[79] = $469;
 FUNCTION_TABLE[80] = $471;
 FUNCTION_TABLE[81] = $472;
 FUNCTION_TABLE[82] = $498;
 FUNCTION_TABLE[83] = $520;
 FUNCTION_TABLE[84] = $521;
 FUNCTION_TABLE[85] = $524;
 FUNCTION_TABLE[86] = $1653;
 FUNCTION_TABLE[87] = $866;
 FUNCTION_TABLE[88] = $1173;
 FUNCTION_TABLE[89] = $1182;
 FUNCTION_TABLE[90] = $1279;
 FUNCTION_TABLE[91] = $1282;
 FUNCTION_TABLE[92] = $1286;
 FUNCTION_TABLE[93] = $1289;
 FUNCTION_TABLE[94] = $1292;
 FUNCTION_TABLE[95] = $1295;
 FUNCTION_TABLE[96] = $1297;
 FUNCTION_TABLE[97] = $1299;
 FUNCTION_TABLE[98] = $1301;
 FUNCTION_TABLE[99] = $1303;
 FUNCTION_TABLE[100] = $1305;
 FUNCTION_TABLE[101] = $1307;
 FUNCTION_TABLE[102] = $1309;
 FUNCTION_TABLE[103] = $1311;
 FUNCTION_TABLE[104] = $1158;
 FUNCTION_TABLE[105] = $1163;
 FUNCTION_TABLE[106] = $1177;
 FUNCTION_TABLE[107] = $1201;
 FUNCTION_TABLE[108] = $1202;
 FUNCTION_TABLE[109] = $1203;
 FUNCTION_TABLE[110] = $1204;
 FUNCTION_TABLE[111] = $1205;
 FUNCTION_TABLE[112] = $1206;
 FUNCTION_TABLE[113] = $1207;
 FUNCTION_TABLE[114] = $1208;
 FUNCTION_TABLE[115] = $1209;
 FUNCTION_TABLE[116] = $1210;
 FUNCTION_TABLE[117] = $1047;
 FUNCTION_TABLE[118] = $1220;
 FUNCTION_TABLE[119] = $1221;
 FUNCTION_TABLE[120] = $1224;
 FUNCTION_TABLE[121] = $1227;
 FUNCTION_TABLE[122] = $1228;
 FUNCTION_TABLE[123] = $1231;
 FUNCTION_TABLE[124] = $1232;
 FUNCTION_TABLE[125] = $1234;
 FUNCTION_TABLE[126] = $1259;
 FUNCTION_TABLE[127] = $1260;
 FUNCTION_TABLE[128] = $1263;
 FUNCTION_TABLE[129] = $1265;
 FUNCTION_TABLE[130] = $1267;
 FUNCTION_TABLE[131] = $1269;
 FUNCTION_TABLE[132] = $1273;
 FUNCTION_TABLE[133] = $1261;
 FUNCTION_TABLE[134] = $1262;
 FUNCTION_TABLE[135] = $1264;
 FUNCTION_TABLE[136] = $1266;
 FUNCTION_TABLE[137] = $1268;
 FUNCTION_TABLE[138] = $1270;
 FUNCTION_TABLE[139] = $1274;
 FUNCTION_TABLE[140] = $563;
 FUNCTION_TABLE[141] = $1176;
 FUNCTION_TABLE[142] = $1184;
 FUNCTION_TABLE[143] = $1185;
 FUNCTION_TABLE[144] = $1187;
 FUNCTION_TABLE[145] = $1188;
 FUNCTION_TABLE[146] = $1189;
 FUNCTION_TABLE[147] = $1190;
 FUNCTION_TABLE[148] = $1192;
 FUNCTION_TABLE[149] = $1193;
 FUNCTION_TABLE[150] = $1195;
 FUNCTION_TABLE[151] = $1196;
 FUNCTION_TABLE[152] = $1197;
 FUNCTION_TABLE[153] = $1198;
 FUNCTION_TABLE[154] = $1199;
 FUNCTION_TABLE[155] = $1211;
 FUNCTION_TABLE[156] = $1212;
 FUNCTION_TABLE[157] = $1213;
 FUNCTION_TABLE[158] = $1214;
 FUNCTION_TABLE[159] = $1215;
 FUNCTION_TABLE[160] = $1216;
 FUNCTION_TABLE[161] = $1217;
 FUNCTION_TABLE[162] = $1218;
 FUNCTION_TABLE[163] = $1235;
 FUNCTION_TABLE[164] = $1236;
 FUNCTION_TABLE[165] = $1238;
 FUNCTION_TABLE[166] = $1240;
 FUNCTION_TABLE[167] = $1241;
 FUNCTION_TABLE[168] = $1242;
 FUNCTION_TABLE[169] = $1243;
 FUNCTION_TABLE[170] = $1245;
 FUNCTION_TABLE[171] = $1246;
 FUNCTION_TABLE[172] = $1247;
 FUNCTION_TABLE[173] = $1249;
 FUNCTION_TABLE[174] = $1251;
 FUNCTION_TABLE[175] = $1252;
 FUNCTION_TABLE[176] = $1253;
 FUNCTION_TABLE[177] = $1254;
 FUNCTION_TABLE[178] = $1256;
 FUNCTION_TABLE[179] = $1257;
 FUNCTION_TABLE[180] = $1258;
 FUNCTION_TABLE[181] = $562;
 FUNCTION_TABLE[182] = $564;
 FUNCTION_TABLE[183] = $565;
 FUNCTION_TABLE[184] = $566;
 FUNCTION_TABLE[185] = $569;
 FUNCTION_TABLE[186] = $570;
 FUNCTION_TABLE[187] = $571;
 FUNCTION_TABLE[188] = $572;
 FUNCTION_TABLE[189] = $573;
 FUNCTION_TABLE[190] = $577;
 FUNCTION_TABLE[191] = $1317;
 FUNCTION_TABLE[192] = $578;
 FUNCTION_TABLE[193] = $593;
 FUNCTION_TABLE[194] = $605;
 FUNCTION_TABLE[195] = $608;
 FUNCTION_TABLE[196] = $611;
 FUNCTION_TABLE[197] = $614;
 FUNCTION_TABLE[198] = $617;
 FUNCTION_TABLE[199] = $620;
 FUNCTION_TABLE[200] = $625;
 FUNCTION_TABLE[201] = $628;
 FUNCTION_TABLE[202] = $631;
 FUNCTION_TABLE[203] = $1318;
 FUNCTION_TABLE[204] = $644;
 FUNCTION_TABLE[205] = $654;
 FUNCTION_TABLE[206] = $659;
 FUNCTION_TABLE[207] = $661;
 FUNCTION_TABLE[208] = $663;
 FUNCTION_TABLE[209] = $665;
 FUNCTION_TABLE[210] = $667;
 FUNCTION_TABLE[211] = $669;
 FUNCTION_TABLE[212] = $673;
 FUNCTION_TABLE[213] = $675;
 FUNCTION_TABLE[214] = $677;
 FUNCTION_TABLE[215] = $1319;
 FUNCTION_TABLE[216] = $690;
 FUNCTION_TABLE[217] = $698;
 FUNCTION_TABLE[218] = $705;
 FUNCTION_TABLE[219] = $706;
 FUNCTION_TABLE[220] = $707;
 FUNCTION_TABLE[221] = $708;
 FUNCTION_TABLE[222] = $719;
 FUNCTION_TABLE[223] = $720;
 FUNCTION_TABLE[224] = $1320;
 FUNCTION_TABLE[225] = $721;
 FUNCTION_TABLE[226] = $730;
 FUNCTION_TABLE[227] = $736;
 FUNCTION_TABLE[228] = $737;
 FUNCTION_TABLE[229] = $738;
 FUNCTION_TABLE[230] = $739;
 FUNCTION_TABLE[231] = $747;
 FUNCTION_TABLE[232] = $748;
 FUNCTION_TABLE[233] = $1321;
 FUNCTION_TABLE[234] = $1323;
 FUNCTION_TABLE[235] = $753;
 FUNCTION_TABLE[236] = $754;
 FUNCTION_TABLE[237] = $755;
 FUNCTION_TABLE[238] = $756;
 FUNCTION_TABLE[239] = $758;
 FUNCTION_TABLE[240] = $760;
 FUNCTION_TABLE[241] = $763;
 FUNCTION_TABLE[242] = $1277;
 FUNCTION_TABLE[243] = $1284;
 FUNCTION_TABLE[244] = $1290;
 FUNCTION_TABLE[245] = $1304;
 FUNCTION_TABLE[246] = $1308;
 FUNCTION_TABLE[247] = $1296;
 FUNCTION_TABLE[248] = $1300;
 FUNCTION_TABLE[249] = $1324;
 FUNCTION_TABLE[250] = $1326;
 FUNCTION_TABLE[251] = $778;
 FUNCTION_TABLE[252] = $779;
 FUNCTION_TABLE[253] = $780;
 FUNCTION_TABLE[254] = $787;
 FUNCTION_TABLE[255] = $789;
 FUNCTION_TABLE[256] = $791;
 FUNCTION_TABLE[257] = $794;
 FUNCTION_TABLE[258] = $1280;
 FUNCTION_TABLE[259] = $1287;
 FUNCTION_TABLE[260] = $1293;
 FUNCTION_TABLE[261] = $1306;
 FUNCTION_TABLE[262] = $1310;
 FUNCTION_TABLE[263] = $1298;
 FUNCTION_TABLE[264] = $1302;
 FUNCTION_TABLE[265] = $1328;
 FUNCTION_TABLE[266] = $1327;
 FUNCTION_TABLE[267] = $807;
 FUNCTION_TABLE[268] = $1330;
 FUNCTION_TABLE[269] = $1329;
 FUNCTION_TABLE[270] = $814;
 FUNCTION_TABLE[271] = $1331;
 FUNCTION_TABLE[272] = $823;
 FUNCTION_TABLE[273] = $826;
 FUNCTION_TABLE[274] = $827;
 FUNCTION_TABLE[275] = $828;
 FUNCTION_TABLE[276] = $829;
 FUNCTION_TABLE[277] = $830;
 FUNCTION_TABLE[278] = $831;
 FUNCTION_TABLE[279] = $832;
 FUNCTION_TABLE[280] = $833;
 FUNCTION_TABLE[281] = $1332;
 FUNCTION_TABLE[282] = $834;
 FUNCTION_TABLE[283] = $835;
 FUNCTION_TABLE[284] = $836;
 FUNCTION_TABLE[285] = $837;
 FUNCTION_TABLE[286] = $838;
 FUNCTION_TABLE[287] = $839;
 FUNCTION_TABLE[288] = $840;
 FUNCTION_TABLE[289] = $841;
 FUNCTION_TABLE[290] = $842;
 FUNCTION_TABLE[291] = $1333;
 FUNCTION_TABLE[292] = $843;
 FUNCTION_TABLE[293] = $846;
 FUNCTION_TABLE[294] = $847;
 FUNCTION_TABLE[295] = $848;
 FUNCTION_TABLE[296] = $851;
 FUNCTION_TABLE[297] = $852;
 FUNCTION_TABLE[298] = $853;
 FUNCTION_TABLE[299] = $854;
 FUNCTION_TABLE[300] = $855;
 FUNCTION_TABLE[301] = $1334;
 FUNCTION_TABLE[302] = $856;
 FUNCTION_TABLE[303] = $857;
 FUNCTION_TABLE[304] = $858;
 FUNCTION_TABLE[305] = $859;
 FUNCTION_TABLE[306] = $860;
 FUNCTION_TABLE[307] = $861;
 FUNCTION_TABLE[308] = $862;
 FUNCTION_TABLE[309] = $863;
 FUNCTION_TABLE[310] = $864;
 FUNCTION_TABLE[311] = $1335;
 FUNCTION_TABLE[312] = $865;
 FUNCTION_TABLE[313] = $886;
 FUNCTION_TABLE[314] = $1336;
 FUNCTION_TABLE[315] = $932;
 FUNCTION_TABLE[316] = $949;
 FUNCTION_TABLE[317] = $1337;
 FUNCTION_TABLE[318] = $989;
 FUNCTION_TABLE[319] = $1001;
 FUNCTION_TABLE[320] = $1338;
 FUNCTION_TABLE[321] = $1002;
 FUNCTION_TABLE[322] = $1013;
 FUNCTION_TABLE[323] = $1339;
 FUNCTION_TABLE[324] = $1023;
 FUNCTION_TABLE[325] = $1024;
 FUNCTION_TABLE[326] = $1032;
 FUNCTION_TABLE[327] = $1340;
 FUNCTION_TABLE[328] = $1033;
 FUNCTION_TABLE[329] = $1034;
 FUNCTION_TABLE[330] = $1046;
 FUNCTION_TABLE[331] = $1558;
 FUNCTION_TABLE[332] = $1559;
 FUNCTION_TABLE[333] = fimport$18;
 FUNCTION_TABLE[334] = $1616;
 FUNCTION_TABLE[335] = $1617;
 FUNCTION_TABLE[336] = $1618;
 FUNCTION_TABLE[337] = $1623;
 FUNCTION_TABLE[338] = $1624;
 FUNCTION_TABLE[339] = $1626;
 FUNCTION_TABLE[340] = $1628;
 FUNCTION_TABLE[341] = $1631;
 FUNCTION_TABLE[342] = $1629;
 FUNCTION_TABLE[343] = $1630;
 FUNCTION_TABLE[344] = $1635;
 FUNCTION_TABLE[345] = $1651;
 FUNCTION_TABLE[346] = $1648;
 FUNCTION_TABLE[347] = $1638;
 FUNCTION_TABLE[348] = $1632;
 FUNCTION_TABLE[349] = $1650;
 FUNCTION_TABLE[350] = $1647;
 FUNCTION_TABLE[351] = $1639;
 FUNCTION_TABLE[352] = $1633;
 FUNCTION_TABLE[353] = $1649;
 FUNCTION_TABLE[354] = $1644;
 FUNCTION_TABLE[355] = $1641;
 return {
  "__wasm_call_ctors": $0, 
  "main": $237, 
  "__errno_location": $392, 
  "fflush": $411, 
  "_ZSt18uncaught_exceptionv": $258, 
  "free": $1653, 
  "malloc": $1652, 
  "setThrew": $1682, 
  "stackSave": $1683, 
  "stackAlloc": $1684, 
  "stackRestore": $1685, 
  "__growWasmMemory": $1686, 
  "dynCall_vi": $1687, 
  "dynCall_ii": $1688, 
  "dynCall_vii": $1689, 
  "dynCall_iiii": $1690, 
  "dynCall_viijii": $1708, 
  "dynCall_viiii": $1692, 
  "dynCall_iii": $1693, 
  "dynCall_jiji": $1709, 
  "dynCall_iidiiii": $1695, 
  "dynCall_iiiii": $1696, 
  "dynCall_iiiiii": $1697, 
  "dynCall_iiiiiiiii": $1698, 
  "dynCall_iiiiiii": $1699, 
  "dynCall_iiiiij": $1710, 
  "dynCall_iiiiid": $1701, 
  "dynCall_iiiiijj": $1711, 
  "dynCall_iiiiiiii": $1703, 
  "dynCall_iiiiiijj": $1712, 
  "dynCall_viiiiii": $1705, 
  "dynCall_v": $1706, 
  "dynCall_viiiii": $1707
 };
}

return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}
)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: function(binary, info) {
    return {
      then: function(ok, err) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary, info))
        });
      }
    };
  }
};

// We don't need to actually download a wasm binary, mark it as present but empty.
Module['wasmBinary'] = [];




if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /_Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 1024,
    STACK_BASE = 139482064,
    STACKTOP = STACK_BASE,
    STACK_MAX = 134239184,
    DYNAMIC_BASE = 139482064,
    DYNAMICTOP_PTR = 134239168;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 536870912;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
assert(INITIAL_TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferViews();

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


  HEAP32[0] = 0x63736d65; /* 'emsc' */



// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = "nik.html.mem";






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'nik.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (Module['wasmBinary']) {
      return new Uint8Array(Module['wasmBinary']);
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm(env) {
  // wasm2js legalization of i64 support code may require these
  // autodebug may also need them
  env['setTempRet0'] = setTempRet0;
  env['getTempRet0'] = getTempRet0;

  // prepare imports
  var info = {
    'env': env
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!Module['wasmBinary'] &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        return WebAssembly.instantiateStreaming(response, info)
          .then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
// the wasm module at that time, and it receives imports and provides exports and so forth, the app
// doesn't need to care that it is wasm or asm.js.

Module['asm'] = function(global, env, providedBuffer) {
  // memory was already allocated (so js could use the buffer)
  env['memory'] = wasmMemory
  ;
  // import table
  env['table'] = wasmTable = new WebAssembly.Table({
    'initial': 356,
    'maximum': 356 + 0,
    'element': 'anyfunc'
  });
  // With the wasm backend __memory_base and __table_base and only needed for
  // relocatable output.

  var exports = createWasm(env);
  assert(exports, 'binaryen setup failed (no wasm support?)');
  return exports;
};

// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];




// STATICTOP = STATIC_BASE + 134238160;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });



/* no memory initializer */
// {{PRE_LIBRARY}}


  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _atexit(func, arg) {
      warnOnce('atexit() called, but EXIT_RUNTIME is not set, so atexits() will not be called. set EXIT_RUNTIME to 1 (see the FAQ)');
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  var ___exception_infos={};
  
  var ___exception_last=0;function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___cxa_uncaught_exceptions() {
      return __ZSt18uncaught_exceptionv.uncaught_exceptions;
    }

  function ___lock() {}

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(1);
      return -1;
    }

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(19);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(6);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(5);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(11);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(6);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(5);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(1);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[2];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(39);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(39);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(22);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(12);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err && !errored) {
            errored = true;
            return callback(err);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        transaction.oncomplete = function(e) {
          if (!errored) {
            callback(null);
          }
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_HAS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(22);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(-e.errno); // syscall errnos are negated, node's are not
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(22);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(-e.errno);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(2);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(1);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(1);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(1);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(1);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(1);
        },readlink:function (node) {
          throw new FS.ErrnoError(1);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(5);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(13);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(9);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -20;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -22;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -22;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -22;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -13;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(9);
        return stream;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -75;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((result)>>2)]=tempI64[0],HEAP32[(((result)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -25;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -25;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -25;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -25;
          return -22; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -25;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -25;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function __emscripten_syscall_munmap(addr, len) {
      if (addr === -1 || len === 0) {
        return -22;
      }
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags);
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      return __emscripten_syscall_munmap(addr, len);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _emscripten_get_now() { abort() }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }

  var _fabs=Math_abs;

  
  var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      var aligned_dest_end = 0;
      var block_aligned_dest_end = 0;
      var dest_end = 0;
      // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
      if ((num|0) >= 8192) {
        _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
        return dest|0;
      }
  
      ret = dest|0;
      dest_end = (dest + num)|0;
      if ((dest&3) == (src&3)) {
        // The initial unaligned < 4-byte front.
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        aligned_dest_end = (dest_end & -4)|0;
        block_aligned_dest_end = (aligned_dest_end - 64)|0;
        while ((dest|0) <= (block_aligned_dest_end|0) ) {
          HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
          HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
          HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
          HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
          HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
          HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
          HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
          HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
          HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
          HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
          HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
          HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
          HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
          HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
          HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
          HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
          dest = (dest+64)|0;
          src = (src+64)|0;
        }
        while ((dest|0) < (aligned_dest_end|0) ) {
          HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
          dest = (dest+4)|0;
          src = (src+4)|0;
        }
      } else {
        // In the unaligned copy case, unroll a bit as well.
        aligned_dest_end = (dest_end - 4)|0;
        while ((dest|0) < (aligned_dest_end|0) ) {
          HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
          HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
          HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
          HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
          dest = (dest+4)|0;
          src = (src+4)|0;
        }
      }
      // The remaining unaligned < 4 byte tail.
      while ((dest|0) < (dest_end|0)) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
      }
      return ret|0;
    }

  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
      end = (ptr + num)|0;
  
      value = value & 0xff;
      if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
        while ((ptr&3) != 0) {
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
  
        aligned_end = (end & -4)|0;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
  
        block_aligned_end = (aligned_end - 64)|0;
  
        while((ptr|0) <= (block_aligned_end|0)) {
          HEAP32[((ptr)>>2)]=value4;
          HEAP32[(((ptr)+(4))>>2)]=value4;
          HEAP32[(((ptr)+(8))>>2)]=value4;
          HEAP32[(((ptr)+(12))>>2)]=value4;
          HEAP32[(((ptr)+(16))>>2)]=value4;
          HEAP32[(((ptr)+(20))>>2)]=value4;
          HEAP32[(((ptr)+(24))>>2)]=value4;
          HEAP32[(((ptr)+(28))>>2)]=value4;
          HEAP32[(((ptr)+(32))>>2)]=value4;
          HEAP32[(((ptr)+(36))>>2)]=value4;
          HEAP32[(((ptr)+(40))>>2)]=value4;
          HEAP32[(((ptr)+(44))>>2)]=value4;
          HEAP32[(((ptr)+(48))>>2)]=value4;
          HEAP32[(((ptr)+(52))>>2)]=value4;
          HEAP32[(((ptr)+(56))>>2)]=value4;
          HEAP32[(((ptr)+(60))>>2)]=value4;
          ptr = (ptr + 64)|0;
        }
  
        while ((ptr|0) < (aligned_end|0) ) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      // The remaining bytes.
      while ((ptr|0) < (end|0)) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }
      return (end-num)|0;
    }

  function _pthread_cond_broadcast(x) {
      x = x | 0;
      return 0;
    }

  function _pthread_cond_wait() { return 0; }

  
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }function _sbrk(increment) {
      increment = increment|0;
      var oldDynamicTop = 0;
      var oldDynamicTopOnChange = 0;
      var newDynamicTop = 0;
      var totalMemory = 0;
      totalMemory = _emscripten_get_heap_size()|0;
  
        oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
        newDynamicTop = oldDynamicTop + increment | 0;
  
        if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
          | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
          abortOnCannotGrowMemory(newDynamicTop|0)|0;
          ___setErrNo(12);
          return -1;
        }
  
        if ((newDynamicTop|0) > (totalMemory|0)) {
          if (_emscripten_resize_heap(newDynamicTop|0)|0) {
            // We resized the heap. Start another loop iteration if we need to.
          } else {
            // We failed to resize the heap.
            ___setErrNo(12);
            return -1;
          }
        }
  
        HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop|0;
  
      return oldDynamicTop|0;
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
FS.staticInit();;
if (ENVIRONMENT_HAS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof performance === 'object' && performance && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Int8Array,Int32Array

var asmGlobalArg = {};
var asmLibraryArg = { "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "__cxa_allocate_exception": ___cxa_allocate_exception, "__cxa_atexit": ___cxa_atexit, "__cxa_pure_virtual": ___cxa_pure_virtual, "__cxa_throw": ___cxa_throw, "__cxa_uncaught_exceptions": ___cxa_uncaught_exceptions, "__lock": ___lock, "__map_file": ___map_file, "__setErrNo": ___setErrNo, "__syscall140": ___syscall140, "__syscall145": ___syscall145, "__syscall146": ___syscall146, "__syscall54": ___syscall54, "__syscall6": ___syscall6, "__syscall91": ___syscall91, "__unlock": ___unlock, "_addDays": __addDays, "_arraySum": __arraySum, "_emscripten_syscall_munmap": __emscripten_syscall_munmap, "_isLeapYear": __isLeapYear, "abort": _abort, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "atexit": _atexit, "emscripten_get_heap_size": _emscripten_get_heap_size, "emscripten_get_now": _emscripten_get_now, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "fabs": _fabs, "getenv": _getenv, "memcpy": _memcpy, "memset": _memset, "pthread_cond_broadcast": _pthread_cond_broadcast, "pthread_cond_wait": _pthread_cond_wait, "sbrk": _sbrk, "setTempRet0": _setTempRet0, "strftime": _strftime, "strftime_l": _strftime_l };
var asm = Module['asm'](asmGlobalArg, asmLibraryArg, buffer);
var real____wasm_call_ctors = asm["__wasm_call_ctors"];
asm["__wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____wasm_call_ctors.apply(null, arguments);
};

var real__main = asm["main"];
asm["main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real____errno_location = asm["__errno_location"];
asm["__errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real__fflush = asm["fflush"];
asm["fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real___ZSt18uncaught_exceptionv = asm["_ZSt18uncaught_exceptionv"];
asm["_ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real__free = asm["free"];
asm["free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__malloc = asm["malloc"];
asm["malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__setThrew = asm["setThrew"];
asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__setThrew.apply(null, arguments);
};

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real___growWasmMemory = asm["__growWasmMemory"];
asm["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___growWasmMemory.apply(null, arguments);
};

var real_dynCall_vi = asm["dynCall_vi"];
asm["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_vi.apply(null, arguments);
};

var real_dynCall_ii = asm["dynCall_ii"];
asm["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_ii.apply(null, arguments);
};

var real_dynCall_vii = asm["dynCall_vii"];
asm["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_vii.apply(null, arguments);
};

var real_dynCall_iiii = asm["dynCall_iiii"];
asm["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiii.apply(null, arguments);
};

var real_dynCall_viijii = asm["dynCall_viijii"];
asm["dynCall_viijii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viijii.apply(null, arguments);
};

var real_dynCall_viiii = asm["dynCall_viiii"];
asm["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viiii.apply(null, arguments);
};

var real_dynCall_iii = asm["dynCall_iii"];
asm["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iii.apply(null, arguments);
};

var real_dynCall_jiji = asm["dynCall_jiji"];
asm["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_jiji.apply(null, arguments);
};

var real_dynCall_iidiiii = asm["dynCall_iidiiii"];
asm["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iidiiii.apply(null, arguments);
};

var real_dynCall_iiiii = asm["dynCall_iiiii"];
asm["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiii.apply(null, arguments);
};

var real_dynCall_iiiiii = asm["dynCall_iiiiii"];
asm["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiiii.apply(null, arguments);
};

var real_dynCall_iiiiiiiii = asm["dynCall_iiiiiiiii"];
asm["dynCall_iiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiiiiiii.apply(null, arguments);
};

var real_dynCall_iiiiiii = asm["dynCall_iiiiiii"];
asm["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiiiii.apply(null, arguments);
};

var real_dynCall_iiiiij = asm["dynCall_iiiiij"];
asm["dynCall_iiiiij"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiiij.apply(null, arguments);
};

var real_dynCall_iiiiid = asm["dynCall_iiiiid"];
asm["dynCall_iiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiiid.apply(null, arguments);
};

var real_dynCall_iiiiijj = asm["dynCall_iiiiijj"];
asm["dynCall_iiiiijj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiiijj.apply(null, arguments);
};

var real_dynCall_iiiiiiii = asm["dynCall_iiiiiiii"];
asm["dynCall_iiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiiiiii.apply(null, arguments);
};

var real_dynCall_iiiiiijj = asm["dynCall_iiiiiijj"];
asm["dynCall_iiiiiijj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiiiijj.apply(null, arguments);
};

var real_dynCall_viiiiii = asm["dynCall_viiiiii"];
asm["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viiiiii.apply(null, arguments);
};

var real_dynCall_v = asm["dynCall_v"];
asm["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_v.apply(null, arguments);
};

var real_dynCall_viiiii = asm["dynCall_viiiii"];
asm["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viiiii.apply(null, arguments);
};

Module["asm"] = asm;
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasm_call_ctors"].apply(null, arguments)
};

var _main = Module["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["main"].apply(null, arguments)
};

var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__errno_location"].apply(null, arguments)
};

var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fflush"].apply(null, arguments)
};

var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt18uncaught_exceptionv"].apply(null, arguments)
};

var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["free"].apply(null, arguments)
};

var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc"].apply(null, arguments)
};

var _setThrew = Module["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments)
};

var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

var __growWasmMemory = Module["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__growWasmMemory"].apply(null, arguments)
};

var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

var dynCall_viijii = Module["dynCall_viijii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viijii"].apply(null, arguments)
};

var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

var dynCall_jiji = Module["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiji"].apply(null, arguments)
};

var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};

var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments)
};

var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments)
};

var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments)
};

var dynCall_iiiiij = Module["dynCall_iiiiij"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiij"].apply(null, arguments)
};

var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiid"].apply(null, arguments)
};

var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiijj"].apply(null, arguments)
};

var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments)
};

var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiijj"].apply(null, arguments)
};

var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments)
};

var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};




// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    };
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



